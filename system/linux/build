#!/bin/sh -e

export LLVM=1
export LLVM_IAS=1
export CC=clang
export HOSTCC=clang

# export CFLAGS="$CFLAGS -mllvm -asan-stack=0 -fsanitize=kernel-address"
# export CFLAGS="$CFLAGS -Wframe-larger-than=8192"

jobs=$(($(nproc) + 1))

script=$(readlink -f "$0")
# For debug build
[ "${script%/*}" = "$PWD" ] || \ln -sf "$script" ./

script_path=${script%/*}
pkg_name=${script_path##*/}
echo "\$pkg_name  = $pkg_name"

while read -r line; do
    [ ! -f "$line" ] ||
    # Non in-place sed might lost permission of the files
    # sed 's/System\./system\./g' "$line" > _ && mv -f _ "$line" || {
    sed -i 's/System\.map/sysmap/g; s/System\.old/sysmap\.old/g' "$line" || {
        printf '%s\n' "Replacing from \"System.\" to \"system.\" failed on file $line"
        kill 0
    }
done < system-map.list

# sed $'s/set -e/set -eE; trap \'Unhandled failure on \"\$LINENO\"\' ERR/g' scripts/link-vmlinux.sh > _
# mv -f _ scripts/link-vmlinux.sh
#
# # sed 's#vmlinux: scripts/link-vmlinux.sh vmlinux.o $(KBUILD_LDS) FORCE#\
# # vmlinux: $(CONFIG_SHELL) scripts/link-vmlinux.sh vmlinux.o $(KBUILD_LDS) FORCE#g' scripts/Makefile.vmlinux > _
# # mv -f _ scripts/Makefile.vmlinux
# chmod a+x scripts/link-vmlinux.sh

[ -z "$1" ] || [ -z "$2" ] ||
# patch -p1 < no-perl.patch
patch -p1 < make-yacc-usage-POSIX-compliant.diff

# Determine arch
case $KISS_XHOST_ARCH in
    aarch64)     arch=arm64;;
    aarch64_be)  arch=arm64;;
    armv7)       arch=arm;;
    x86_64)      arch=x86_64;;
    powerpc64le) arch=powerpc;;
    powerpc64)   arch=powerpc;;
    powerpcle)   arch=powerpc;;
    powerpc)     arch=powerpc;;
    riscv64)     arch=riscv;;
    riscv32)     arch=riscv;;
    i686)        arch=i386;;
   *) echo "Unsupported platform: $KISS_XHOST_ARCH"; exit;;
esac

{ [ -z "$1" ] || [ -z "$2" ]; } &&
# For debug build
pkg_dir="$KISS_SRC_ROOT/proc/pkg/$pkg_name" ||
pkg_dir="$1"
[ -n "${KISS_ROOT:+x}" ] ||
[ "$(expr substr "$KISS_ROOT" 1 1)" != "/" ] || kiss_root_dir="${KISS_ROOT#"/"}"
pkg_root="$pkg_dir${kiss_root_dir:+"/$kiss_root_dir"}"
[ -d "$pkg_root" ] || mkdir -p "$pkg_root"
# Always use the host compiler here
make LLVM=1 LLVM_IAS=1 ARCH=$arch CROSS_COMPILE=$KISS_XHOST_ARCH HOSTCC="clang" INSTALL_HDR_PATH=$pkg_root/usr headers
# https://www.kernel.org/doc/Documentation/kbuild/headers_install.txt
[ -d "$pkg_root/usr" ] || mkdir -p "$pkg_root/usr"
make headers_install ARCH=$arch CROSS_COMPILE=$KISS_XHOST_ARCH INSTALL_HDR_PATH=$pkg_root/usr
# \chown -R $USER:$USER .

# The headers require rsync for installation, this command
# simply does the equivalent using find, mkdir and cp.
find usr/include -name \*.h -type f | while read -r file; do
    mkdir -p "$pkg_dir/${file%/*}"
    cp -f "$file" "$pkg_dir/$file"
done

# cp config .config
cp .config oldconfig
make olddefconfig
make prepare
make clean

# VERSION="$(make kernelversion)"
# Store the build version in a file and a variable.
make kernelrelease > version
read ver < version
[ -n "$ver" ] || {
    echo "\$ver does not exists"
    ver="$(git branch | grep -v remotes | grep \* | awk '{print $2}')"
    [ -n "$ver" ] || {
        echo "\$ver does not exists"
        kill 0
    }
}
stamp=$ver-$(date +%F-%H-%M-%S)

make LLVM=1 LLVM_IAS=1 ARCH=$arch -j $(($(nproc) + 1))
# make LLVM=1 LLVM_IAS=1 ARCH=$arch CROSS_COMPILE=$KISS_XHOST_ARCH HOSTCC="clang" -j $(($(nproc) + 1))
make CC=clang HOSTCC=clang -no-intergrated-as LLVM=1 LLVM_IAS=1 INSTALL_MOD_PATH=$pkg_root/usr ARCH=$arch modules
# make ARCH=$arch CROSS_COMPILE=$KISS_XHOST_ARCH CC=clang HOSTCC=clang -no-intergrated-as LLVM=1 LLVM_IAS=1 modules

make LLVM=1 LLVM_IAS=1 ARCH=$arch INSTALL_MOD_PATH=$pkg_root/usr modules_install
# make ARCH=$arch CROSS_COMPILE=$KISS_XHOST_ARCH CC=clang HOSTCC=clang LLVM=1 LLVM_IAS=1 -no-intergrated-as modules_install
[ -d "$pkg_root/boot" ] || mkdir -p "$pkg_root/boot"
make ARCH=$arch CROSS_COMPILE=$KISS_XHOST_ARCH CC=clang HOSTCC=clang LLVM=1 LLVM_IAS=1 INSTALL_PATH=$pkg_root/boot install

# sh /mnt/b "kiss on nvme1" "/dev/nvme1n1" "p3" "p2"

[ -d "$pkg_root/boot/efi/EFI/efistub" ] || mkdir -p "$pkg_root/boot/efi/EFI/efistub"
# cp -f arch/x86/boot/bzImage $pkg_root/boot/efi/EFI/efistub/vmlinuz.efi
cp -f $pkg_root/boot/vmlinuz $pkg_root/boot/efi/EFI/efistub/vmlinuz.efi
mv $pkg_root/boot/vmlinuz $pkg_root/boot/vmlinuz-${stamp}
mv $pkg_root/boot/sysmap $pkg_root/boot/sysmap-${stamp}
cp -f .config $pkg_root/boot/config-${stamp}

# For debug build
{ [ -n "$1" ] && [ -n "$2" ]; } || {
    cd "$KISS_SRC_ROOT/proc/extract/$pkg_name"
    doas "$script_path/post-install"
}

#   AR      /tmp/eli/kiss/proc/make/linux/tools/objtool/libsubcmd/libsubcmd.a
# diff: unrecognized option: I
# Warning: Kernel ABI header at 'tools/arch/x86/include/asm/inat.h' differs from latest version at 'arch/x86/include/asm/inat.h'
# diff -u tools/arch/x86/include/asm/inat.h arch/x86/include/asm/inat.h
# diff: unrecognized option: I
# Warning: Kernel ABI header at 'tools/arch/x86/include/asm/insn.h' differs from latest version at 'arch/x86/include/asm/insn.h'
# diff -u tools/arch/x86/include/asm/insn.h arch/x86/include/asm/insn.h
# diff: unrecognized option: I
# Warning: Kernel ABI header at 'tools/arch/x86/lib/inat.c' differs from latest version at 'arch/x86/lib/inat.c'
# diff -u tools/arch/x86/lib/inat.c arch/x86/lib/inat.c
# diff: unrecognized option: I
# Warning: Kernel ABI header at 'tools/arch/x86/lib/insn.c' differs from latest version at 'arch/x86/lib/insn.c'
# diff -u tools/arch/x86/lib/insn.c arch/x86/lib/insn.c

