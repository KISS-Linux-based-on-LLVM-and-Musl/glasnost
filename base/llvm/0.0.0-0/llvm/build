#! /bin/sh -e
# From llvm-14.0.3 to llvm-18.0.0
# libcxx/CMakeLists.txt
# TODO: Projects that depend on libc++ should use LIBCXX_GENERATED_INCLUDE_DIR
# instead of hard-coding include/c++/v1.

# CFLAGS="--target=$KISS_XHOST_TRIPLE -O3 -pipe -fPIC -march=x86-64 -mtune=native -mcpu=x86-64"
# CXXFLAGS="--target=$KISS_XHOST_TRIPLE -O3 -pipe -fPIC -march=x86-64 -mtune=native -mcpu=x86-64"

# CFLAGS="--target=$KISS_XHOST_TRIPLE -O3 -pipe -fPIC -march=x86-64 -mtune=native"
# CXXFLAGS="-DLIBCXX_HAS_MUSL_LIBC=1 --target=x86_64-linux-musl -O3 -pipe -fPIC -march=x86-64 -mtune=native"


newline="
"
# For debug information
SCRIPT_NAME="build" && export SCRIPT_NAME

# Moved to hardcoded.patch
# sed -i 's/set(COMPILER_RT_HAS_SANITIZER_COMMON TRUE)/set(COMPILER_RT_HAS_SANITIZER_COMMON FALSE)/' compiler-rt/cmake/config-ix.cmake
sed -i 's/!defined(_GCC_MAX_ALIGN_T)/& \&\& !defined(__DEFINED_max_align_t)/' libcxx/include/stddef.h

[ -z "${1:+x}" ] &&
	: "${DESTDIR:="$DES_ROOT/proc/pkg/$pkg_name"}" ||
	: "${DESTDIR:="$1"}"
[ -d "$DESTDIR" ] || // die '$DESTDIR' "$DESTDIR"
export DESTDIR
// log '$DESTDIR' "$DESTDIR"

: "${SYS_ROOT:=""}" && export SYS_ROOT
# echo "\$SYS_ROOT = $SYS_ROOT"
// log '$SYS_ROOT' "$SYS_ROOT"

PREFIX_HOST="usr" && export PREFIX_HOST
# echo "\$PREFIX_HOST = $PREFIX_HOST"
// log '$PREFIX_HOST' "$PREFIX_HOST"

jobs=$(($(nproc) + 1))
MAKEOPTS="-j$jobs" && export MAKEOPTS

# script=$(readlink -f "$0")
# script_path=${script%/*}
# pkg_name=${script_path##*/}
# On source (.) mode build script dialing, $(readlink -f "$0") will return /usr/bin/busybox
# So, don't depend on $0
pkg_name=${PWD##*/}
# echo "\$pkg_name  = $pkg_name"
[ ! -z "${pkg_name:+x}" ] && [ -z "${pkg_name##*"llvm"*}" ] ||
	// die '$pkg_name' "'$pkg_name' does not seem to be correct"
// log '$pkg_name' "$pkg_name"

: ${OBJ_ROOT:="$KISS_TMPDIR/objects"} && export OBJ_ROOT

OUTPUT_DIR="$OBJ_ROOT/$pkg_name" && export OUTPUT_DIR
# echo "\$OUTPUT_DIR = $OUTPUT_DIR"
// log '$OUTPUT_DIR' "$OUTPUT_DIR"

repo_urn="$REPO_DIR/$pkg_name"
script="$repo_urn/build"

// log '$script' "$script"
# Modifing the build script will ruin the current building process?
[ "${script%/*}" = "$PWD" ] || \ln -sf "$script" ./

# echo "\$PWD = $PWD"
// log '$PWD' "$PWD"
[ "${MAKE_DIR-}" = "$PWD" ] ||
# : "${MAKE_DIR:="$PWD"}" && export MAKE_DIR
MAKE_DIR="$PWD" && export MAKE_DIR
// log '$MAKE_DIR' "$MAKE_DIR"

: "${ORIGIN:="$OUTPUT_DIR/bin"}" && export ORIGIN
// log '$ORIGIN' "$ORIGIN"
# [ -d "$OUTPUT_DIR/include/c++/v1" ] || \mkdir -p "$OUTPUT_DIR/include/c++/v1"
# [ -d "$OUTPUT_DIR/lib" ] || \mkdir -p "$OUTPUT_DIR/lib"
# [ -d "$ORIGIN" ] || \mkdir -p "$ORIGIN"

[ -n "${GENERATOR_TYPE+x}" ] || GENERATOR_TYPE="Ninja"

[ -n "${MAKE_PROGRAM+x}" ] || MAKE_PROGRAM=$(which ninja)

command -v "$MAKE_PROGRAM" > /dev/null 2>&1 || {
	# echo "Provide \$MAKE_PROGRAM please."
	// war '$MAKE_PROGRAM' "$MAKE_PROGRAM"
	exit 1;
}

[ -n "${CMAKE+x}" ] || CMAKE=$(which cmake)
// log '$CMAKE' "$CMAKE"
command -v "$CMAKE" > /dev/null 2>&1 || {
	# echo "Provide \$CMAKE please."
	// war '$CMAKE' "$CMAKE"
	exit 1;
}

CMAKE_VERSION="$($CMAKE --version | grep version | awk "{print \$3}")"
export CMAKE_VERSION
// log '$CMAKE_VERSION' "$CMAKE_VERSION"

# subshell_all() does not export SRC_ROOT
# source was copied to make dir
# [ -n "${SRC_ROOT+x}" ] || SRC_ROOT="$HOME/.cache/kiss/sources"
# [ -n "${SRCDIR+x}" ] || SRCDIR="$SRC_ROOT/$pkg_name"

export LLVM_IAS=1
export LLVM=1

[ -z "$1" ] || [ -z "$2" ] ||
# for item in *.patch; do
for item in $(\ls -1 -- patches/*.patch); do
	# echo "Applying patch file $item"
	// log 'Applying patch file' "$item" &&
	patch -p1 < "$item" || kill 0
done

# # LLVM_CONFIG_PATH is deprecated, please use LLVM_CMAKE_DIR instead
# sed -e 's/LLVM_CONFIG_PATH/LLVM_CMAKE_DIR/g' < "llvm/tools/llvm-config/CMakeLists.txt" > _
# mv -f _ "llvm/tools/llvm-config/CMakeLists.txt"

# /tmp/$LOGNAME/kiss/proc/make/llvm/objects/./lib/clang/18/include/emmintrin.h:43:9: error: _Float16 is not supported on this target
# typedef _Float16 __v8hf __attribute__((__vector_size__(16), __aligned__(16)));
# Remove headers of CMAKE_C_FLAGS
# Not helpful
# sed -e 's/#ifdef COMPILER_RT_HAS_FLOAT16/#if defined(__FLT16_MAX__)/g' < compiler-rt/lib/builtins/fp_trunc.h > _
# mv -f _ compiler-rt/lib/builtins/fp_trunc.h
# sed -e 's/#ifdef COMPILER_RT_HAS_FLOAT16/#if defined(__FLT16_MAX__)/g' < compiler-rt/lib/builtins/fp_extend.h > _
# mv -f _ compiler-rt/lib/builtins/fp_extend.h

handle_llvm_options="llvm/cmake/modules/HandleLLVMOptions.cmake"
# // as_own "${handle_llvm_options%/*}" \
sed -e '/set(LLVM_USE_LINKER "lld")/d' < "$handle_llvm_options" > _
# // as_own "${handle_llvm_options%/*}" \
\mv -f _ "$handle_llvm_options"

builtins_cmake="$MAKE_DIR/files/builtins.cmake"
[ -f "$builtins_cmake" ] || touch "$builtins_cmake"
printf '%s\n' "# Do not modify manually. Generated by code" |
	tee "$builtins_cmake"  > /dev/null
runtimes_cmake="$MAKE_DIR/files/runtimes.cmake"
[ -f "$runtimes_cmake" ] || touch "$runtimes_cmake"
printf '%s\n' "# Do not modify manually. Generated by code" |
	tee "$runtimes_cmake"  > /dev/null
	# // as_own "${runtimes_cmake%/*}" tee "$runtimes_cmake"  > /dev/null

# https://unix.stackexchange.com/questions/251405/extract-substring-with-character-instead-of-position
# build_bazel="$(find $PWD -name "BUILD.bazel" | grep clang/BUILD.bazel)"

# [ -n "${version_target_major:+x}" ] ||
# version_target_major=$(grep "#define CLANG_VERSION_MAJOR " $build_bazel | \
#         awk '{print substr($4, "")}' | sed "s/\'//")
version_target_major="$(grep "set(LLVM_VERSION_MAJOR" llvm/CMakeLists.txt |
	awk "{print \$2}" | tr -d ')')"
export version_target_major
version_target_minor="$(grep "set(LLVM_VERSION_MINOR" llvm/CMakeLists.txt |
	awk "{print \$2}" | tr -d ')')"
export version_target_minor
version_target_patch="$(grep "set(LLVM_VERSION_PATCH" llvm/CMakeLists.txt |
	awk "{print \$2}" | tr -d ')')"
export version_target_patch
# git
version_target_suffix="$(grep "set(LLVM_VERSION_SUFFIX" llvm/CMakeLists.txt |
	awk "{print \$2}" | tr -d ')')"
export version_target_suffix

: ${cc:="/usr/lib/ccache/bin/cc"}
: ${cxx:="/usr/lib/ccache/bin/c++"}

: ${cc:="$(which cc)"}
: ${cxx:="$(which c++)"}

search_config="$MAKE_DIR/libcxx/include/__config"
[ -f "$search_config" ] ||
# search_config="$(grep -L "experimental" $(find /usr/include -type f -name "__config"))"
search_config="$(find "$PWD" -type f -name "__config" | grep -v "experimental" | grep -v "test")"
for config_file in $search_config; do
	[ -f "$config_file" ] || continue
	_LIBCPP_VERSION=$(printf '%s\n' "#include \"$config_file\"${newline}int main () { return 0;}" |
		${CC-"$cc"} -I$KISS_ROOT/usr/include -E -stdlib=libc++ -x c++ -dM - |
		grep " _LIBCPP_VERSION " | awk '{print $3}');
	[ -z "${_LIBCPP_VERSION+x}" ] || {
		# _LIBCPP_VERSION=180000
		export _LIBCPP_VERSION="$_LIBCPP_VERSION"
		break
	}
done
// log '$_LIBCPP_VERSION' "$_LIBCPP_VERSION"

# [ "$2" = "git" ] ||
# [ -z "${2:+x}" ] || version_target="$2"

# [ -z "${version_target:+x}" ] ||
# version_target=$(grep "#define CLANG_VERSION " $build_bazel | \
#         awk '{print substr($4, "")}' | sed "s/\'//")
version_target="$version_target_major.$version_target_minor.$version_target_patch"
export version_target
# What version of llvm is currently installed?
version_xhost=$("$KISS_ROOT"/usr/bin/llvm-config --version) 2>/dev/null || :
# version_xhost="$(cat ${KISS_ROOT}/var/db/kiss/installed/llvm/version | cut -d " " -f 1)"
version_host_major="${version_xhost%%.*}"

# From aports
ffi_include_dir=$($KISS_ROOT/$PREFIX_HOST/bin/pkg-config --cflags-only-I libffi | sed 's|^-I||g' | awk '{$1=$1}1')
// log '$ffi_include_dir' "$ffi_include_dir"

[ -d "cmake/Modules/" ] || \mkdir -p "cmake/Modules/"
[ ! -d "Modules" ] ||
# for file in $(\ls -1 "Modules"); do \mv -f "Modules/$file" "cmake/Modules/"; done
# for file in $(\ls -1 "Modules"); do rsync -aq "Modules/$file" "cmake/Modules/"; done
rsync -aq "Modules/." "cmake/Modules/"

[ ! -f "files/config.guess" ] ||
rsync -aq "files/config.guess" "llvm/cmake/"

# Don't set the compiler here, interferes with 2-stage build
[ ! -z "${cmake_config:+x}" ] &&
[ -f "$cmake_config" ] || {
	kiss-cmake-config | sed '/CMAKE_C_COMPILER/d;' | sed '/CMAKE_CXX_COMPILER/d;' > files/cmake.config || kill 0
	cmake_config="$(readlink -f "files/cmake.config")"
}

# Bootstrap only if version is different and it's not a crossbuild
# If insist, set KISS_ROOT and BOOTSTRAP at the same time
# BOOTSTRAP= KISS_ROOT=/opt/kiss kiss p llvm 3
[ "$version_xhost" = "$version_target" ] || { [ -n "${KISS_ROOT:+x}" ] &&
[ -z "${BOOTSTRAP+x}" ]; } ||
bootstrap="1"

# echo "\$BOOTSTRAP = ${BOOTSTRAP-}"
// log '$BOOTSTRAP' "${BOOTSTRAP-}"
# echo "\$bootstrap = ${bootstrap-}"
# // log '$bootstrap' "$bootstrap"

# export LD_LIBRARY_PATH="$DESTDIR/$PREFIX_HOST/lib:${LD_LIBRARY_PATH-}"
# export PATH="$DESTDIR/$PREFIX_HOST/bin:${PATH-}"
# export LDFLAGS="-L$DESTDIR/$PREFIX_HOST/lib ${LDFLAGS-}"
# export CFLAGS="-I$DESTDIR/$PREFIX_HOST/include ${CFLAGS-}"
# export CXXFLAGS="-I$DESTDIR/$PREFIX_HOST/include ${CXXFLAGS-}"

// log '$PATH' "$(esceval $PATH)"
cflags="${CFLAGS-}"
CFLAGS_ORIGIN="${CFLAGS-}"
# echo "Original \$CFLAGS = $CFLAGS"
// log '$CFLAGS' "$CFLAGS"
# kiss set one like this
# Original $CFLAGS = --target=x86_64-linux-musl --sysroot=/opt/kiss -fPIC
cxxflags="${CXXFLAGS-}"
CXXFLAGS_ORIGIN="${CXXFLAGS-}"
# echo "Original \$CXXFLAGS = $CXXFLAGS"
// log '$CXXFLAGS' "$CXXFLAGS"
# kiss set one like this
# Original $CXXFLAGS = --target=x86_64-linux-musl --sysroot=/opt/kiss -fPIC
LDFLAGS_ORIGIN="${LDFLAGS-}"


unset CFLAGS
unset CXXFLAGS
unset LDFLAGS

unset PKG_CONFIG_LIBDIR
unset PKG_CONFIG_SYSROOT_DIR
unset PKG_CONFIG_PATH

is_clang() {
	local compiler_path="$1"
	local result=1
	local key_word_list="$("$compiler_path" --version | grep "clang")"
	case "$key_word_list" in *"clang "*) result=0 ;; esac
	return $result
}

to_target_resource_prefix() {
	local toolchain_prefix="$1"
	local target_resource_prefix="$toolchain_prefix"
	[ "$toolchain_prefix" != "/$PREFIX_HOST" ] ||
		target_resource_prefix="$KISS_ROOT/$PREFIX_HOST"
	printf '\n%s' "$target_resource_prefix"
}

target_resource_prefix_to_version() {
	local target_resource_prefix="$1"
	local toolchain_version="$version_target"

	[ "$target_resource_prefix" = "$DESTDIR/$PREFIX_HOST" ] ||
		toolchain_version="$version_xhost"
	printf '\n%s' "$toolchain_version"
}

# alias ccache='ccache --max-size 10G --set-config cache_dir=/tmp/$LOGNAME/ccache'
alias ccache='ccache --max-size 10G --set-config base_dir=${DESTDIR}'

case "$(type path_prepend)" in *"function"*|*"alias"*) ;;
	*)
		# Add to the front of a target path
		_path_prepend() {
			[ ! -z "${1:+x}" ] &&
			[ -d "$2" ] || return
			local extend=":$(/ "echo \${${1}-}"):"
			# echo "\$2 = $2"
			# echo "test=${extend##*:$2:*}"
			# [ ! -d "$2" ] || {
			# / test -z "\"\${$1##*:$2:*}\"" -o -z "\"\${$1%%*:$2}\"" \
			# -o -z "\"\${$1##$2:*}\"" -o -z "\"\${$1##$2}\"" ||
			[ "$extend" = "::" ] && / "export $1=$2" ||
			[ -z "${extend##*:$2:*}" ] || / "export $1=$2:\$$1"
			# }
		}
		alias path_prepend='_path_prepend'
esac

tool_chain() {
	_level_2
	unset CC CXX CFLAGS CXXFLAGS LDFLAGS RESOURCE_DIR_HOST BINDIR_HOST LLVM_TOOLCHAIN_LIB_DIR_HOST
	# "$DESTDIR/$PREFIX_HOST", or /$PREFIX_HOST
	local toolchain_prefix="${1-"/$PREFIX_HOST"}"
	shift 1

	local target_resource_prefix="$(// delegate to_target_resource_prefix "$toolchain_prefix")"
	toolchain_version="$version_xhost"
	[ "$toolchain_prefix" != "$DESTDIR/$PREFIX_HOST" ] ||
		toolchain_version="$version_target"

	export toolchain_version

	compiler_refine() {
		local toolchain_prefix="$1"
		local compiler="$2"
		# For is_clang()
		local suffix="${3-}"

		[ ! -z "${suffix:+x}" ] || {
			local length="$(expr length "$compiler")"
			suffix="$(expr substr "$compiler" $((length - 1)) 2)"
		}

		[ "$suffix" = "++" ] || {
			[ "$suffix" != "xx" ] || suffix="++"
		}

		local real_compiler="$(command -v "$compiler" 2> /dev/null)"
		# [ ! -z "${real_compiler:+x}" ] && {
		#   "$real_compiler" -v > /dev/null 2>&1 ||
		#   // die '$real_compiler' "'$real_compiler' is not an executable"
		# } || {
		[ ! -z "${real_compiler:+x}" ] || {
			# [ -z "${compiler##*$toolchain_prefix*}" ] ||
			real_compiler="$toolchain_prefix/$compiler"
			command -v "$real_compiler" > /dev/null 2>&1 ||
				// die '$real_compiler' "'$real_compiler' is not an executable"
		}

		# ! is_clang "$compiler" ||
		#   ! command -v "$toolchain_prefix/bin/clang$suffix" > /dev/null 2>&1 ||
		#   compiler="$toolchain_prefix/bin/clang$suffix"

		printf '\n%s' "$real_compiler"
	}

	# If ccache needs to be disabled
	# Remove "/usr/lib/ccache/bin" from $PATH

	# export CCACHE_DISABLE=1
	# export CCACHE_RECACHE=1
	unset CCACHE_DISABLE
	unset CCACHE_RECACHE

	# : "${cc:="/usr/lib/ccache/bin/cc"}"   && export cc
	# cc="${1-"ccache cc"}"
	# cc="${1-"/usr/lib/ccache/bin/cc"}"
	# local real_cc="$(command -v "$cc" 2> /dev/null)"
	# "$real_cc" -v > /dev/null 2>&1 || // die '$real_cc' "'$real_cc' is not an executable"
	# [ ! -z "${real_cc:+x}" ] &&
	# [ -z "${real_cc##*$toolchain_prefix*}" ] || cc="$toolchain_prefix/$1"
	# command -v "$cc" > /dev/null 2>&1 || // die '$cc' "'$cc' is not an executable"
	cc="$(// delegate -- compiler_refine "$toolchain_prefix" "${1-"ccache cc"}")"
	export cc
	# : "${cxx:="/usr/lib/ccache/bin/c++"}" && export cxx
	# cxx="${2-"ccache c++"}"
	# cxx="${2-"/usr/lib/ccache/bin/c++"}"
	# local real_cxx="$(command -v "$cxx" 2> /dev/null)"
	# "$real_cxx" -v > /dev/null 2>&1 || // die '$real_cxx' "'$real_cxx' is not an executable"
	# [ ! -z "${real_cxx:+x}" ] &&
	# [ -z "${real_cxx##*$toolchain_prefix*}" ] || cxx="$toolchain_prefix/$2"
	# command -v "$cxx" > /dev/null 2>&1 || // die '$cxx' "'$cxx' is not an executable"
	cxx="$(// delegate -- compiler_refine "$toolchain_prefix" "${2-"ccache c++"}")"
	export cxx
	# kiss defined CC won't work
	# : "${CC:="$cc $CFLAGS_ORIGIN"}"   && export CC
	# CC="$(which clang)"    && export CC
	# CC="/usr/bin/clang"    && export CC
	CC="$cc"   && export CC
	# echo "\$CC  = $CC"
	// log '$CC' "$CC"
	# kiss defined CXX won't work
	# : "${CXX:="$cxx $CXXFLAGS_ORIGIN"}" && export CXX
	# CXX="$(which clang++)" && export CXX
	# CXX="/usr/bin/clang++" && export CXX
	CXX="$cxx" && export CXX
	# echo "\$CXX = $CXX"
	// log '$CXX' "$CXX"

	LLVM_TOOLCHAIN_LIB_DIR_HOST="$($toolchain_prefix/bin/llvm-config --libdir)"
	[ "$LLVM_TOOLCHAIN_LIB_DIR_HOST" = "$toolchain_prefix/lib" ] ||
		// die '$LLVM_TOOLCHAIN_LIB_DIR_HOST' "'$LLVM_TOOLCHAIN_LIB_DIR_HOST' looks not correct"
	export LLVM_TOOLCHAIN_LIB_DIR_HOST
	// log '$LLVM_TOOLCHAIN_LIB_DIR_HOST' "$LLVM_TOOLCHAIN_LIB_DIR_HOST"

	path_prepend LIBRARY_PATH "$LLVM_TOOLCHAIN_LIB_DIR_HOST"
	# LIBRARY_PATH="$LLVM_TOOLCHAIN_LIB_DIR_HOST${LIBRARY_PATH:+":${LIBRARY_PATH}"}"
	# export LIBRARY_PATH
	// log '$LIBRARY_PATH' "$LIBRARY_PATH"
	# local ld_library_path=":$LD_LIBRARY_PATH:"
	# [ -z "${ld_library_path##*":$toolchain_prefix/lib:"*}" ] ||

	path_prepend LD_LIBRARY_PATH "$LLVM_TOOLCHAIN_LIB_DIR_HOST"
	# LD_LIBRARY_PATH="$LLVM_TOOLCHAIN_LIB_DIR_HOST${LD_LIBRARY_PATH:+":${LD_LIBRARY_PATH}"}"
	# export LD_LIBRARY_PATH
	// log '$LD_LIBRARY_PATH' "$LD_LIBRARY_PATH"

	# path_prepend LD_LIBRARY_PATH "$toolchain_prefix/lib"
	# [ ! -z "${LD_LIBRARY_PATH:+x}" ] &&
	# [ -z "${LD_LIBRARY_PATH##"$toolchain_prefix/lib:"*}" ] ||
	# export LD_LIBRARY_PATH="$toolchain_prefix/lib${LD_LIBRARY_PATH:+":${LD_LIBRARY_PATH}"}"
	# // log '$LD_LIBRARY_PATH' "$LD_LIBRARY_PATH"

	# local path=":$PATH:"
	# [ -z "${path##*":$toolchain_prefix/bin:"*}" ] ||
	path_prepend PATH "$toolchain_prefix/bin"
	# [ ! -z "${PATH:+x}" ] &&
	# [ -z "${PATH##"$toolchain_prefix/bin:"*}" ] ||
	# export PATH="$toolchain_prefix/bin${PATH:+":${PATH}"}"
	// log '$PATH' "$(esceval $PATH)"

	# export LDFLAGS="-L$DESTDIR/$PREFIX_HOST/lib ${LDFLAGS-}"
	# export CFLAGS="-I$DESTDIR/$PREFIX_HOST/include ${CFLAGS-}"
	# export CXXFLAGS="-I$DESTDIR/$PREFIX_HOST/include ${CXXFLAGS-}"

	RESOURCE_DIR_HOST="$($toolchain_prefix/bin/clang --print-resource-dir)"
	RESOURCE_DIR_HOST="$(readlink -f "$RESOURCE_DIR_HOST")"
	# /usr/lib/clang/14.0.3
	# RESOURCE_DIR_HOST="$($CC --print-resource-dir)" && export RESOURCE_DIR_HOST
	[ ! -z "${toolchain_prefix:+x}" ] &&
	[ -z "${toolchain_prefix##*"$DESTDIR"*}" ] && {
	[ "$RESOURCE_DIR_HOST" = "$DESTDIR/$PREFIX_HOST/lib/clang/$version_target" ] ||
		# RESOURCE_DIR_HOST="$DESTDIR/$PREFIX_HOST/lib/clang/$version_target"
		// die '$RESOURCE_DIR_HOST' "'$RESOURCE_DIR_HOST' looks not correct"

	} || {
		[ "$RESOURCE_DIR_HOST" = "/$PREFIX_HOST/lib/clang/$version_xhost" ] && {
			RESOURCE_DIR_HOST="$KISS_ROOT/$RESOURCE_DIR_HOST"
		} ||
		// die '$RESOURCE_DIR_HOST' "'$RESOURCE_DIR_HOST' looks not correct"
	}

	export RESOURCE_DIR_HOST

	# echo "\$RESOURCE_DIR_HOST = $RESOURCE_DIR_HOST"
	// log '$RESOURCE_DIR_HOST' "$RESOURCE_DIR_HOST"

	# note: use 'c++2b' for 'Working draft for ISO C++ 2023 DIS' standard
	[ -n "${cxx_standard_version+x}" ] ||
		cxx_standard_version="c++2b"

	BINDIR_HOST="$($toolchain_prefix/bin/llvm-config --bindir)"
	# // log '$BINDIR_HOST' "$BINDIR_HOST"
	# /usr/bin
	# : "${BINDIR_HOST:=$(/$PREFIX_HOST/bin/llvm-config --bindir)}" && export BINDIR_HOST
	# BINDIR_HOST="$(/$PREFIX_HOST/bin/llvm-config --bindir)" && export BINDIR_HOST
	# BINDIR_HOST="$($toolchain_prefix/bin/llvm-config --bindir)" && export BINDIR_HOST
	# echo "\$BINDIR_HOST = $BINDIR_HOST"
	[ "$BINDIR_HOST" = "$toolchain_prefix/bin" ] ||
		// die '$BINDIR_HOST' "'$BINDIR_HOST' looks not correct"
	// log '$BINDIR_HOST' "$BINDIR_HOST"
	export BINDIR_HOST

	# sed -i 's/set(LLVM_REQUIRED_CXX_STANDARD 17)/set(LLVM_REQUIRED_CXX_STANDARD 20)/g' \
	#     "llvm/CMakeLists.txt"

	# LLVM_TOOLCHAIN_LIB_DIR
	# LLVM_TOOLCHAIN_LIB_DIR_HOST=/usr/lib
	# LLVM_TOOLCHAIN_LIB_DIR_HOST="$(/$PREFIX_HOST/bin/llvm-config --libdir)"
	LLVM_TOOLCHAIN_LIB_DIR_HOST="$(/$toolchain_prefix/bin/llvm-config --libdir)"


	cflags="${CFLAGS_ORIGIN-" "}"
	# For the test to get correct result
	# [ -z "${cxxflags##*LIBCXX_HAS_MUSL_LIBC*}" ] ||
	# The space in ${CXXFLAGS_ORIGIN-" "} is intentional
	cxxflags="${CXXFLAGS_ORIGIN-" "}"
	ldflags="${LDFLAGS_ORIGIN-" "}"

	cflags="$cflags \
-Os \
-fPIC \
-mtune=native \
"

	# cflags="$cflags -resource-dir=${RESOURCE_DIR_HOST} -B${BINDIR_HOST} -Os -fPIC"

	cflags="$cflags \
-v \
-pthread \
-pipe \
-fno-pie \
-fstack-protector-strong \
-Wformat \
-Werror=format-security \
-Wdate-time \
-Wno-unused-command-line-argument \
-Wno-gcc-compat \
-Wno-gnu-include-next \
-Wno-zero-length-array \
-Wno-gnu-anonymous-struct \
-Wno-unused-parameter \
-Wno-undef \
-Wno-unknown-warning-option \
-Wno-include-next-absolute-path \
-Wno-suggest-override \
-Wno-user-defined-literals \
-ferror-limit=100 \
-D _FORTIFY_SOURCE=2 \
"
# --sysroot=$KISS_ROOT \

	# /tmp/$LOGNAME/kiss/proc/make/llvm/objects/./lib/clang/18/include/emmintrin.h:43:9: error: _Float16 is not supported on this target
	# typedef _Float16 __v8hf __attribute__((__vector_size__(16), __aligned__(16)));
	# Removing headers of CMAKE_C_FLAGS helps
	# Not helpful
	# -msse2 \
	# -D HAVE \
	# /working/kiss/sources/llvm/clang/test/SemaCXX/Float16.cpp
	#
	# Search in Makefile, *.c, *.cpp and *.py. 2 is a mode
	# -D_FORTIFY_SOURCE=2 \
	# /usr/include/python3.11/pyconfig.h:589:/* Define if glibc has incorrect _FORTIFY_SOURCE wrappers for memmove and bcopy.

	# /usr/include/c++/v1/__config:891:# define _LIBCPP_USING_IF_EXISTS __attribute__((using_if_exists))
	# /usr/include/c++/v1/__config:893:# define _LIBCPP_USING_IF_EXISTS
	# -D__DEFINED_max_align_t \

	# -isystem /usr/include/bits \
	# -D_LIBCPP_CXX03_LANG \
	# -isystem /usr/include \
	# -isystem $PWD/include \
	# -isystem $PWD/lib/Headers \
	# -isystem $PWD/clang/lib/Headers \

	[ "$version_host_major" -lt 17 ] || cflags="$cflags --opaque-pointers=0 "

	cflags="$cflags -lz -O2"

	# deploy "-D" "CMAKE_C_FLAGS" "-nostdlib"
	# --sysroot=$SYS_ROOT \
	# cflags="$cflags \
	# -resource-dir=${RESOURCE_DIR_HOST} -B${BINDIR_HOST} \
	# -isystem $MAKE_DIR/lib/Headers \
	# -isystem $MAKE_DIR/include \
	# -Wno-bitwise-op-parentheses \
	# "

	# https://reviews.llvm.org/D66834?id=217991
	# Driver tests: set `--sysroot=""` to support clang with `DEFAULT_SYSROOT`
	# -nostdinc \
	# -nostdlib \
	# -nobuiltininc \
	# -nodefaultlibs \
	# -nolibc \
	#
	# $KISS_XHOST_ABI == $TARGET_ABI
	# env
	# export CLIBC="musl"
	# export KISS_XHOST_ABI="$CLIBC"
	[ -n "${KISS_XHOST_ABI+x}" ] ||
	KISS_XHOST_ABI="$($KISS_ROOT/usr/bin/ldd --version 2>&1 | grep musl | awk '{print $1}')" || :
	# echo "\$KISS_XHOST_ABI = $KISS_XHOST_ABI"
	// log '$KISS_XHOST_ABI' "$KISS_XHOST_ABI"
	# ! expr "$($KISS_ROOT/usr/bin/ldd --version 2>&1 | grep libc)" : "^musl" > /dev/null 2>&1 ||
	[ "$KISS_XHOST_ABI" != "musl" ] ||
	[ -z "${cxxflags##*"-D LIBCXX_HAS_MUSL_LIBC"*}" ] ||
	cxxflags="$cxxflags -D LIBCXX_HAS_MUSL_LIBC"

	LIBCXX_PREFIX="std"

	local libcxx_setting="$(for item in $("$KISS_ROOT"/usr/bin/llvm-config --cxxflags); \
	do [ -n "${item##*stdlib*}" ] || { printf '%s' "$item"; break; }; done)"

	# libcxx=$(expr substr "$(for item in $(llvm-config --cxxflags); \
	#             do [ -n "${item##*stdlib*}" ] || { printf '%s' "$item"; break; }; done)" 9 6)
	[ "${libcxx_setting##*=}" != "libc++" ] || {
		LIBCXX_PREFIX=""
		cxxflags="$cxxflags \
-D LLVM_ENABLE_LIBCXX \
-D LLVM_ENABLE_LIBCXXABI \
"
	}

	# echo "\$LIBCXX_PREFIX = $LIBCXX_PREFIX"
	// log '$LIBCXX_PREFIX' "$LIBCXX_PREFIX"

	# $OUTPUT_DIR/include/c++/v1/__config
	# [ -z "${_LIBCPP_VERSION+x}" ] ||
	# cxxflags="-D_LIBCPP_PROVIDES_DEFAULT_RUNE_TABLE=1 $cxxflags"

	cxxflags="$cxxflags \
-D _LIBCPP_ATOMIC_ONLY_USE_BUILTINS \
-U HAVE_CXX_ATOMICS_WITH_LIB \
-D LLVM_HAS_ATOMICS \
-D __NEED_max_align_t \
"
	# -U __NEED_max_align_t \

	cxxflags="$cxxflags \
-D _LARGEFILE64_SOURCE \
"

	#  include <sys/endian.h>
	# cxxflags="$cxxflags -D __FreeBSD__"

	cxxflags="$cxxflags \
-D _LIBCPP_STD_VER=23 \
"

	#   cxxflags="$cxxflags \
	# -D _LIBCPP_HAS_MUSL_LIBC \
	# "

	cxxflags="$cxxflags \
-D _LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER \
"

	# Conflicts with _LIBCPP_HAS_MUSL_LIBC
	# -D_LIBCPP_HAS_NO_WIDE_CHARACTERS \

	#   cxxflags="$cxxflags \
	# -D _LIBCPP_PSTL_CPU_BACKEND_THREAD \
	# "

	# LIBCXX_COMPILE_FLAGS="-isystem /usr/include/c++/v1"
	# In runtimes/CMakeLists.txt
	# -nostdinc++ \

	cxxflags="$cflags $cxxflags  \
-std=$cxx_standard_version \
-stdlib=libc++ \
"

	# clang-14: error: unknown argument: '-fexperimental-library'
	[ "$toolchain_prefix" != "$DESTDIR/$PREFIX_HOST" ] ||
		cxxflags=" \
$cxxflags  \
-fexperimental-library \
"

	# -nostdlib \
	# -nostdinc++ \
	# -nostdlib++ \
	# --sysroot=$SYS_ROOT \

	# CMake Error at cmake/modules/CheckAtomic.cmake:56 (message):
	# Host compiler must support std::atomic!
	# Insert the following line into CheckAtomic.cmake:42
	# message(STATUS "\${CMAKE_CXX_FLAGS} = ${CMAKE_CXX_FLAGS}")
	# Will found that the additional -isystem path is the reason of the fail
	# of compiling the check_working_cxx_atomics

	# -resource-dir=${RESOURCE_DIR_HOST} -B${BINDIR_HOST} \
	# -D_LIBCPP_BUILDING_LIBRARY=1 \
	# -D_LIBCPP_HAS_NO_VENDOR_AVAILABILITY_ANNOTATIONS=1 \
	# -std=$cxx_standard_version \
	# -Wno-bitwise-op-parentheses \

	# -isystem /usr/include/tirpc \

	# clang-14: warning: argument unused during compilation: '-stdlib=libc++' [-Wunused-command-line-argument]
	# -stdlib=libc++ \




	ldflags="${ldflags-} \
-fuse-ld=lld \
-stdlib=libc++ \
-rtlib=compiler-rt \
--unwindlib=none \
--warn-backrefs \
-lc \
-lc++ \
-lc++abi \
-lexecinfo \
-lrt -ldl -lz -lm \
-rdynamic -lc++experimental -lpthread -v \
-Wl,-z,relro \
-Wl,--build-id \
-Wl,--undefined-version \
"
	# --sysroot=$KISS_ROOT \
	# -Wl,-z,relro -Wl,--build-id
	# Depends on LLVM_ENABLE_PER_TARGET_RUNTIME_DIR. Might doesn't exist yet, won't pass test
	# -Wl,-L $RESOURCE_DIR_HOST/lib/$KISS_XHOST_TRIPLE \

	# -Wl,-rpath=../lib \
	# -Wl,-rpath=../lib/clang/$version_target_major/lib/linux \

	[ "$version_host_major" -lt 17 ] ||
		ldflags="$ldflags --opaque-pointers=0 "

	# CMake Error at /tmp/$LOGNAME/kiss/proc/llvm-git/make/llvm/cmake/modules/HandleLLVMOptions.cmake:324 (message):
	#   Host compiler does not support '-fuse-ld=lld'
	# -fuse-ld=lld \

	# -nostdlib++ \
	# --sysroot=$SYS_ROOT \
	# -nodefaultlibs \
	# -nostartfiles \
	# /usr/lib/crtn.o \
	# /lib/Scrt1.o \
	# /lib/crti.o \
	# /lib/crtn.o \
	# $RESOURCE_DIR_HOST/lib/linux/libclang_rt.builtins-x86_64.a \
	# $RESOURCE_DIR_HOST/lib/linux/clang_rt.crtbegin-x86_64.o \
	# $RESOURCE_DIR_HOST/lib/linux/clang_rt.crtend-x86_64.o \

	# -nostdlib \
	# ld.lld: warning: cannot find entry symbol _start; not setting start address
	# --entry main \

	# glasnost clang version 14.0.3
	# Target: x86_64-unknown-linux-musl
	# Thread model: posix
	# InstalledDir: /usr/bin
	#  "/usr/bin/ld.lld" --sysroot=/ -pie -export-dynamic --eh-frame-hdr -m elf_x86_64 -export-dynamic \
	# -dynamic-linker /lib/ld-musl-x86_64.so.1 -o bin/llvm-nm \
	# //lib/../lib64/Scrt1.o \
	# //lib/../lib64/crti.o \
	# //lib/../lib64/crtn.o \

	# /opt/kiss/lib/../lib64/Scrt1.o /opt/kiss/lib/../lib64/crti.o /usr/lib/clang/14.0.3/lib/linux/clang_rt.crtbegin-x86_64.o
	# /usr/lib/clang/14.0.3/lib/linux/libclang_rt.builtins-x86_64.a
	# /usr/lib/clang/14.0.3/lib/linux/clang_rt.crtend-x86_64.o /opt/kiss/lib/../lib64/crtn.o

	# -L/usr/lib/clang/14.0.3/lib/linux \
	# -L/usr/lib \
	# -L//lib/../lib64 \
	# -L//usr/lib/../lib64 \
	# -L/usr/bin/../lib \
	# -L/usr/bin/../lib64 \
	# -L//lib \
	# -L//usr/lib -rpath=/tmp/$LOGNAME/kiss/proc/llvm/build/objects/bin/../lib \
	# -lc -lc++ -lexecinfo -lrt -ldl -lz -lm -lc++experimental -lpthread \
	# --color-diagnostics \
	# --gc-sections \
	# tools/llvm-nm/CMakeFiles/llvm-nm.dir/llvm-nm.cpp.o -rpath "../lib" lib/libLLVM-15.so \
	# -lc++ -lm /usr/lib/clang/14.0.3/lib/linux/libclang_rt.builtins-x86_64.a \
	# -lpthread -lc /usr/lib/clang/14.0.3/lib/linux/libclang_rt.builtins-x86_64.a \

	cflags="$cflags \
-Wno-shift-op-parentheses \
"
	export cflags

	# Keep cxxflags including all cflags
	cxxflags="$cxxflags \
-Wno-shift-op-parentheses \
-Wno-unused-variable \
-Wno-ignored-attributes \
"
	export cxxflags

	# https://github.com/clangd/clangd/issues/495
	# -extra-arg="-ferror-limit x"
	ldflags="$ldflags \
-Wno-unknown-warning-option \
"


	# If this is a cross, use a toolchain file
	# [ -z "${KISS_ROOT+x}" ]  || {
	#     toolchain="-D CMAKE_TOOLCHAIN_FILE=$(realpath files/cmake.config)"
	#     bstoolchain="-D BOOTSTRAP_CMAKE_TOOLCHAIN_FILE=$(realpath files/cmake.config)"
	# }


	# llvm/CMakeLists.txt:152:set(LLVM_SUPPORTED_RUNTIMES "libc;libunwind;libcxxabi;pstl;libcxx;compiler-rt;openmp;llvm-libgcc")
	# Default set of runtimes
	# Supported runtimes are:
	# libc;libunwind;libcxxabi;pstl;libcxx;compiler-rt;openmp;llvm-libgcc
	#   Runtime "polly" is not a supported runtime.  Supported runtimes are:
	#   libc;libunwind;libcxxabi;pstl;libcxx;compiler-rt;openmp
	#   Runtime "bolt" is not a supported runtime.  Supported runtimes are:
	#   libc;libunwind;libcxxabi;pstl;libcxx;compiler-rt;openmp
	# runtimes="compiler-rt;libunwind;libcxxabi;libcxx;llvm-libgcc;pstl"
	runtimes="compiler-rt;libunwind;libcxxabi;libcxx;pstl"

	# -- clang project is enabled
	# -- clang-tools-extra project is enabled
	# -- lld project is enabled
	# -- polly project is enabled

	# -- bolt project is disabled
	# -- compiler-rt project is disabled
	# -- cross-project-tests project is disabled
	# -- libc project is disabled
	# -- libclc project is disabled
	# -- libcxx project is disabled
	# -- libcxxabi project is disabled
	# -- libunwind project is disabled
	# -- lldb project is disabled
	# -- mlir project is disabled
	# -- openmp project is disabled # but it should be a runtime component
	# -- pstl project is disabled
	# -- flang project is disabled
	# echo "\$KISS_XHOST_ARCH = $KISS_XHOST_ARCH"
	// log '$KISS_XHOST_ARCH' "$KISS_XHOST_ARCH"

	determine_target() {
		_level_2
		local runtimes_list=";${runtimes};"

		# Determine targets for architecture
		case "$KISS_XHOST_ARCH" in
			aarch64_be)  TARGET_ARCH="AArch64" libname="aarch64_be" ;;
			aarch64)     TARGET_ARCH="AArch64" libname="aarch64"
				[ -z "${runtimes_list##*";openmp;"*}" ] ||
				runtimes="${runtimes};openmp" ;;
			armv7)       TARGET_ARCH="ARMv7"   libname="armhf" ;;
			i686)        TARGET_ARCH="X86"     libname="i386" ;;
			powerpc64)   TARGET_ARCH="PowerPC" libname="powerpc64"
				[ -z "${runtimes_list##*";openmp;"*}" ] ||
				runtimes="${runtimes};openmp" ;;
			powerpc64le) TARGET_ARCH="PowerPC" libname="powerpc64le"
				[ -z "${runtimes_list##*";openmp;"*}" ] ||
				runtimes="${runtimes};openmp" ;;
			powerpcle)   TARGET_ARCH="PowerPC" libname="powerpcle" ;;
			powerpc)     TARGET_ARCH="PowerPC" libname="powerpc" ;;
			riscv64)     TARGET_ARCH="RISCV64" libname="riscv64" ;;
			x86_64)      TARGET_ARCH="X86"     libname="x86_64"
				[ -z "${runtimes_list##*";openmp;"*}" ] ||
				runtimes="${runtimes};openmp"
				# https://community.arm.com/arm-community-blogs/b/tools-software-ides-blog/posts/compiler-flags-across-architectures-march-mtune-and-mcpu
				# // RUN:     --target=x86_64-pc-linux-musl \
				# // RUN:     --target=x86_64-unknown-linux-musl \
				[ -z "${cflags##*"-mtune=native "*}" ] ||
				cflags="-mtune=native $cflags"
				[ -z "${cflags##*"-march=x86-64 "*}" ] ||
				cflags="-march=x86-64 $cflags"
				[ -z "${cflags##*"--target=$KISS_XHOST_TRIPLE "*}" ] ||
				cflags="--target=$KISS_XHOST_TRIPLE $cflags"
				export cflags
				# avoid exhausting memory limit
				ldflags="$ldflags -Wl,--no-keep-memory"
				export ldflags
				# clang++: error: unsupported option '-mcpu=' for target 'x86_64-linux-musl'
				# cxxflags="--target=$KISS_XHOST_TRIPLE -mcpu=x86-64 -march=x86-64 -mtune=native $cxxflags"
				[ -z "${cxxflags##*"-mtune=native "*}" ] ||
				cxxflags="-mtune=native $cxxflags"
				[ -z "${cxxflags##*"-march=x86-64 "*}" ] ||
				cxxflags="-march=x86-64 $cxxflags"
				[ -z "${cxxflags##*"--target=$KISS_XHOST_TRIPLE "*}" ] ||
				cxxflags="--target=$KISS_XHOST_TRIPLE $cxxflags"
				export cxxflags
				;;
			*) # echo "Unsupported platform: $KISS_XHOST_ARCH"; exit 1;;
			// log '$KISS_XHOST_ARCH' "'$KISS_XHOST_ARCH' not supported"
		esac
		export TARGET_ARCH
		export libname
		LLVM_DEFAULT_TARGET_TRIPLE="$KISS_XHOST_ARCH" &&
		export LLVM_DEFAULT_TARGET_TRIPLE
		LLVM_TARGET_TRIPLE="$KISS_XHOST_ARCH" &&
		export LLVM_TARGET_TRIPLE

	}

	# Global variables exported
	// determine_target

	# -- LLVM host triple: x86_64-linux-musl
	# -- LLVM default target triple: x86_64-linux-musl

	# case "$TARGET_ARCH" in
	#     x86)
	#         ldflags="$ldflags -Wl,--no-keep-memory"
	#         export ldflags
	#         CFLAGS="$cflags"
	#         export CFLAGS
	#         // log '$CFLAGS' "$CFLAGS"
	#         ;; # avoid exhausting memory limit
	# esac


	# Capital flags carrying the stages resources

	# CFLAGS=" $cflags "
	# stage2 does not like this
	CFLAGS=" \
-isystem $RESOURCE_DIR_HOST/include \
-isystem $target_resource_prefix/include \
$cflags \
"

	# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/llvm_libc_wrappers \
	# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include \
	# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/openmp_wrappers \
	# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/cuda_wrappers \
	# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/ppc_wrappers \
	# -isystem $OUTPUT_DIR/runtimes/runtimes-bins/pstl/generated_headers \
	# -isystem $MAKE_DIR/pstl/include \
	# -isystem $MAKE_DIR/clang/lib/Headers \

	#   cflags="$cflags \
	# -isystem $KISS_ROOT/$PREFIX_HOST/include \
	# "

	CFLAGS="$CFLAGS \
-resource-dir=$RESOURCE_DIR_HOST \
-B$BINDIR_HOST \
"

	export CFLAGS

	# echo "\$CFLAGS = $CFLAGS"
	// log '$CFLAGS' "$CFLAGS"


	# CXXFLAGS=" $cxxflags "
	# stage2 does not like this
	CXXFLAGS=" \
-isystem $target_resource_prefix/include/c++/v1 \
-isystem $RESOURCE_DIR_HOST/include \
-isystem $target_resource_prefix/include \
$cxxflags  \
"

	# -isystem $OUTPUT_DIR/include/x86_64-linux-musl/c++/v1 \
	# -isystem $DESTDIR/$PREFIX_HOST/lib/clang/$version_target_major/include/c++/v1 \
	# -isystem $OUTPUT_DIR/include/c++/v1 \
	#
	# -isystem $MAKE_DIR/libcxx/include \
	#
	# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/llvm_libc_wrappers \
	# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include \
	# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/openmp_wrappers \
	# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/cuda_wrappers \
	# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/ppc_wrappers \
	# -isystem $OUTPUT_DIR/runtimes/runtimes-bins/pstl/generated_headers \
	#
	# -isystem $MAKE_DIR/pstl/include \
	# -isystem $MAKE_DIR/clang/lib/Headers \

	# cxxflags=" \
	# $cxxflags  \
	# -isystem $KISS_ROOT/$PREFIX_HOST/include \
	# "

	# Don't set global paths, otherwise no one piece of code will be built
	# ninja: subcommands failed
	# -isystem $KISS_ROOT/$PREFIX_HOST/include/c++/v1 \
	# -isystem $OUTPUT_DIR/include/x86_64-linux-musl/c++/v1 \
	# -isystem $DESTDIR/$PREFIX_HOST/lib/clang/$version_target_major/include/c++/v1 \
	# -isystem $DESTDIR/$PREFIX_HOST/include/c++/v1 \
	# -isystem $OUTPUT_DIR/include/c++/v1 \
	# -isystem $MAKE_DIR/libcxx/include \
	# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/openmp_wrappers \
	# -isystem $MAKE_DIR/clang/lib/Headers \
	# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include \
	# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/openmp_wrappers \
	# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/cuda_wrappers \
	# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/llvm_libc_wrappers \
	# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/ppc_wrappers \
	# -isystem $OUTPUT_DIR/runtimes/runtimes-bins/pstl/generated_headers \
	# -isystem $MAKE_DIR/pstl/include \
	# -isystem $MAKE_DIR/clang/lib/Headers \
	# -isystem $KISS_ROOT/$PREFIX_HOST/include \

	# -isystem $DESTDIR/$PREFIX_HOST/include/c++/v1 \
	# -isystem $MAKE_DIR/libcxx/include \
	# -isystem $MAKE_DIR/clang/test/Modules/Inputs/libc-libcxx/sysroot/usr/include \
	# -isystem $MAKE_DIR/clang/test/Modules/Inputs/libc-libcxx/sysroot/usr/include/c++/v1 \

	# libcxxabi in-tree build will fail
	# -isystem $KISS_ROOT/$PREFIX_HOST/include/c++/v1 \


	CXXFLAGS="$CXXFLAGS \
-resource-dir=$RESOURCE_DIR_HOST \
-B$BINDIR_HOST \
"

	export CXXFLAGS

	# echo "\$CXXFLAGS = $CXXFLAGS"
	// log '$CXXFLAGS' "$CXXFLAGS"

	# LDFLAGS=" $ldflags "

	LDFLAGS=" \
-resource-dir=$RESOURCE_DIR_HOST \
"

	LDFLAGS="$LDFLAGS \
-Wl,-L $RESOURCE_DIR_HOST/lib/linux \
-Wl,-L $LLVM_TOOLCHAIN_LIB_DIR_HOST \
-Wl,-rpath-link $LLVM_TOOLCHAIN_LIB_DIR_HOST \
"

	[ ! -d "$RESOURCE_DIR_HOST/lib/$KISS_XHOST_TRIPLE" ] ||
		LDFLAGS="$LDFLAGS \
-Wl,-L $RESOURCE_DIR_HOST/lib/$KISS_XHOST_TRIPLE \
"
	LDFLAGS="$LDFLAGS $ldflags "

	export LDFLAGS

	# echo "\$LDFLAGS = $LDFLAGS"
	// log '$LDFLAGS' "$LDFLAGS"

	# printf '\n%s' "$toolchain_prefix"

	TOOLCHAIN_PREFIX="$toolchain_prefix"
	export TOOLCHAIN_PREFIX
}

# toolchain_prefix="$(// delegate tool_chain "/$PREFIX_HOST" "$(which cc)" "$(which c++)")"
// tool_chain "/$PREFIX_HOST" "cc" "c++"

# kiss will do this before new build
# [ ! -d "$OUTPUT_DIR" ] ||
# find "$OUTPUT_DIR" -mindepth 1 -maxdepth 1 -exec \rm -rf {} +

# Note that you do not wnat to completely depend on these options because it might be overridden by projects settings

# builtins_flags_list="$newline"

new_entry_template() {
	local key_type="$1"
	local key_name="$2"
	local key_value="$3"
	local new_entry=
	case "$key_type" in
		"BOOL")
			new_entry="option ( $key_name \"\" $key_value )"
			;;
		"STRING"|"INTERNAL")
			new_entry="set ( $key_name \"$key_value\" CACHE STRING \"\" )"
	esac
	printf '\n%s' "$new_entry"
}

item_outdated() (
	# local list="$1"
	# local file_path="$1"
	local item="$1"
	shift 1
	local key_type="$1"
	local key_name="$2"
	local key_value="$3"
	local new_entry=
	local outdated=1
	# local item=

	local ifs="$IFS"
	local IFS=$'\n'

	# for item in $list; do
	# while read -r item || [ ! -z "$item" ]; do
	#   [ ! -z "${item:+x}" ] || continue

	#   local item_name="$(printf '%s\n' "$item" | awk -F " " "{print \$3}")"

	#   [ "$item_name" = "$key_name" ] || continue

	new_entry="$(// delegate -- new_entry_template "$key_type" "$key_name" "$key_value")"
		# case "$key_type" in
		#   "BOOL")
		#       new_entry="option ( $key_name \"\" $key_value )"
		#       # local item_value="$(printf '%s\n' "$item" | awk -F " " "{print \$5}")"
		#       ;;
		#   "STRING")
		#       new_entry="set ( $key_name \"$key_value\" CACHE STRING \"\" )"
		#       # local item_value="$(printf '%s\n' "$item" | awk -F " " "{print \$4}")"
		# esac

		# [ "$item_value" != "$key_value" ] || continue
		# [ "$item_value" = "$key_value" ] ||
		[ "$new_entry" = "$item" ] ||
		outdated=0
	#   break
	# done < "$runtimes_cmake"
	# done < "$file_path"

	IFS="$ifs"

	return $outdated
)

# item_outdated() (
#   local list="$1"
#   local key_element="$2"
#   local outdated=1
#   local item=
#   for item in $list; do
#       case "${item}" in
#           *"$key_element"*)
#               # These two keys will get the same "outdated=0"
#               # RUNTIMES_x86_64-linux-musl_LLVM_TARGET_TRIPLE_ENV
#               # RUNTIMES_x86_64-linux-musl_LLVM_TARGET_TRIPLE
#               outdated=0
#               break
#               ;;
#           *)
#               continue
#       esac
#   done
#   return $outdated
# )

update_builtins_flags() {
	local target_file="$1"
	# local target_file_copy="$2"
	# shift 2
	shift 1
	local option="$1"
	local key="$2"
	# local key_type="$2"
	# local key_name="$3"
	[ -z "${key##*":"*}" ] && {
		local key_type="${key##*\:}"
		local key_name="${key%%\:*}"
	} || {
		local key_type=""
		local key_name="$key"
	}
	local key_value="$3"

	[ ! -z "${key_type:+x}" ] || {
		case "$key_value" in
			"ON"|"OFF"|"Yes"|"No"|"True"|"False")
				key_type="BOOL"
				;;
			*)
				key_type="STRING"
		esac
	}
	[ ! -z "${key_type:+x}" ] || // die '$key_type' "not defined"

	local new_entry=
	new_entry="$(// delegate -- new_entry_template "$key_type" "$key_name" "$key_value")"
	# case "$key_type" in
	#   "BOOL")
	#       new_entry="option ( $key_name \"\" $key_value )"
	#       ;;
	#   "STRING")
	#       new_entry="set ( $key_name \"$key_value\" CACHE STRING \"\" )"
	# esac

	local ifs=$IFS
	local IFS=$'\n'
	local item

	# local item="$(awk -v key_name="$key_name" "\$3 == key_name { print }" < "$target_file_copy")"
	local item="$(awk -v key_name="$key_name" "\$3 == key_name { print }" < "$target_file")"


	# local outdated=1
	# local key_value_origin=
	# case "$key_type" in
	#   "BOOL")
	#       key_value_origin="$(printf '%s\n' "$item" | awk -F " " "{print \$5}")"
	#       ;;
	#   "STRING")
	#       key_value_origin="$(printf '%s\n' "$item" | awk -F " " "{print \$4}")"
	# esac
	# [ "$key_value_origin" = "$key_value" ] ||
	#   outdated=0
	[ -z "${item:+x}" ] && {
		# builtins_flags_list="${new_entry}$newline${builtins_flags_list}"
		# printf '%s\n' "$new_entry" | // as_own "${target_file%/*}" tee -a "$target_file" > /dev/null ||
		# printf '%s\n' "$new_entry" | tee -a "$target_file" > /dev/null ||
		printf '%s\n' "$new_entry" >> "$target_file" ||
		// die '$new_entry' "'$new_entry' insert failed"
	} || [ "$item" = "$new_entry" ] || {

	# item_outdated "$builtins_flags_list" "$key_type" "$key_name" "$key_value" && {
	# item_outdated "$runtimes_cmake" "$key_type" "$key_name" "$key_value" && {
	# item_outdated "$item" "$key_type" "$key_name" "$key_value" && {
	# [ ! -z "${item:+x}" ] &&
	# [ "$outdated" -eq "1" ] || {
		// log '$key_name' "'$key_name' outdated"

		# case "$key_type" in
		#   "BOOL")
		#       // as_own "$target_file" \
		#           sed -e "/option ( $key_name \"\" /s/.*\ )/$key_value\ )/" < "$target_file" > _ ||

		#           # awk "/$key_name/{ gsub(/$key_value_origin/, \"$key_value\") }; { print }" < "$target_file" > _ ||
		#           // die '$new_entry' "'$new_entry' update failed"
		#       ;;
		#   "STRING")
		#       // as_own "$target_file" \
		#           sed -e "/set ( $key_name /s/\".*\" CACHE STRING \"\" )/\"$key_value\" CACHE STRING \"\" )/" < "$target_file" > _ ||
		#           // die '$new_entry' "'$new_entry' update failed"
		# esac

		# // as_own "${target_file%/*}" \
		# sed -e "/\b$key_name\b/d"  < "$target_file" > _ ||
		sed -i -e "/\b$key_name\b/d" "$target_file" ||
			# sed -E "/^$key_name$/,\$d"  < "$target_file" > _ ||
			// die '$new_entry' "'$new_entry' removing failed"

		# sed -e "s#$item#$new_entry#g" < "$target_file" > _ || // die '$new_entry' "'$new_entry' update failed"
		# // as_own "${target_file%/*}" \mv -f _ "$target_file"
		# \mv -f _ "$target_file"

		# printf '%s\n' "$new_entry" | // as_own "${target_file%/*}" tee -a "$target_file" > /dev/null ||
		# printf '%s\n' "$new_entry" | tee -a "$target_file" > /dev/null ||
		printf '%s\n' "$new_entry" >> "$target_file" ||
		  // die '$new_entry' "'$new_entry' insert failed"

		# local temp_list="$newline"
		# for item in $builtins_flags_list; do
		#   [ ! -z "${item:+x}" ] || continue

		#   local item_name="$(printf '%s\n' "$item" | awk -F " " "{print \$3}")"

		#   [ "$item_name" = "$key_name" ] && {
		#       // log '${new_entry}' "'${new_entry}' updated"
		#       temp_list="${new_entry}$newline${temp_list}"
		#   } ||
		#       temp_list="${item}$newline${temp_list}"

		# done
		# builtins_flags_list="$temp_list"
	}

	IFS=$ifs
}

# write_to_file "$runtimes_cmake" "$builtins_flags_list"
[ -z "${KEEP_DEPRECATED+x}" ] ||
write_to_file() {
	local target_file="$1"
	local builtins_flags_list="$2"
	printf '%s\n' "# Do not modify manually. Generated by code" | tee "$target_file" > /dev/null
	local ifs=$IFS
	local IFS=$'\n'
	local item
	for item in $builtins_flags_list; do
		printf '%s\n' "$item" | tee -a "$target_file" > /dev/null
	done
	IFS=$ifs
}

contains_key() {
	local list="$1"
	local option="$2"
	local key="$3"

	local result=1

	local ifs=$IFS
	local IFS=$'\n'

	# item == "option key"
	# item == "option key=\"value\""
	local item=
	for item in $list; do
		option_removed="${item#*"${option} "}"
		value_removed="${option_removed%%"="*}"
		[ "$value_removed" = "$key" ] || continue
		result=0
		break
	done

	IFS=$ifs

	return $result
}

# /usr/bin/ash: eval: /usr/bin/cmake: Argument list too long
# How to avoid "Argument list too long" is the key here
deploy() {
	_level_2
	local option="$1"
	local key="$2"
	[ -z "${3+x}" ] || local key_value="$3"
	local force_to_file="${4-}"

	[ "-D" != "$option" ] || {
		case "$key" in
			*"="*)
				[ ! -z "${key_value:+x}" ] || {
					key="${key%%=*}"
					key_value="${key##*=}"
					[ ! -z "${key:+x}" ] ||
						// die '=' "'$key' is not valid"
				}
		esac
	}

	if [ -z "${key_value+x}" ]; then
		# item == "option key"
		case "$option" in
			*"="*)
			// die '=' "is not needed but $option was"
		esac
		case "$key" in
			*"="*)
			// die '=' "is not needed but $key was"
		esac

		contains_key "$CMAKE_OPTIONS" "$option" "$key" ||
		# echo "$option $key \\"
		# CMAKE_OPTIONS="$CMAKE_OPTIONS $option $key"
		# CMAKE_OPTIONS="$CMAKE_OPTIONS$option $key \\$newline"
		CMAKE_OPTIONS="$CMAKE_OPTIONS$option $key \\$newline"
	else
		# item == "option key=\"value\""

		[ "-C" != "$option" ] ||
			// die '-C' "key_value is not needed"
		[ "-G" != "$option" ] ||
			// die '-G' "key_value is not needed"
		[ "-B" != "$option" ] ||
			// die '-B' "key_value is not needed"
		[ "-S" != "$option" ] ||
			// die '-S' "key_value is not needed"

		case "$key" in
			*"="*)
				key="${key%%=*}"
				[ ! -z "${key:+x}" ] ||
					// die '=' "'$key' is not valid"
		esac

		# echo "$option $key=\"$key_value\" \\"
		local just_updated=1

		update_builtins_flags_to_file() {
			case "$key_name" in
				*"BUILTINS"*)
					update_builtins_flags "$builtins_cmake" \
						"$option" "$key" "$key_value"
						# "$builtins_cmake.copy" \
					;;
				*)
					update_builtins_flags "$runtimes_cmake" \
						"$option" "$key" "$key_value"
						# "$runtimes_cmake.copy" \
			esac
			just_updated=0
		}

		local key_type="${key##*\:}"
		local key_name="${key%%\:*}"

		case "$key_value" in
			*"\$ENV{"*"}"*)
				# local value_header="${key_value%%"\$ENV"*}"
				#
				# set -x found infinite looping
				# This is a kiss bug which does not clear ENV=/usr/bin/kiss in the shell environment, and fixed
				#
				# And furthermore, using update_builtins_flags to store it to the runtimes.cmake
				local key_value_encoded="$( \
					// delegate -- bicode "edoc" "$key_value" "\\\$ENV" "\$ENV")"
				// log 'value encoded' "$key_value_encoded"
				key_value="$key_value_encoded"
				# CMAKE_OPTIONS="${CMAKE_OPTIONS-} $option $key=\""$key_value_encoded"\" \\$newline"
				#
				[ "$just_updated" -eq "0" ] ||
				update_builtins_flags_to_file
				;;
			*)
				case "$key_name" in
					*"$LLVM_TARGET_TRIPLE"*|*"ENV{"*"}"*)
						[ "$just_updated" -eq "0" ] ||
						update_builtins_flags_to_file
						;;
					"")
						;;
					*)
						contains_key "$CMAKE_OPTIONS" "$option" "$key" ||
						# CMAKE_OPTIONS="$CMAKE_OPTIONS $option $key=\"$key_value\""
						# CMAKE_OPTIONS="$CMAKE_OPTIONS$option $key=\"$key_value\" \\$newline"
						CMAKE_OPTIONS="$CMAKE_OPTIONS$option $key=\""$key_value"\" \\$newline"
				esac
		esac

		case "$key_name" in
			# *"-"*)
			# case "$key_name" in
			*"$LLVM_TARGET_TRIPLE"*|*"ENV{"*"}"*)
				[ "$just_updated" -eq "0" ] ||
					update_builtins_flags_to_file
				;;
			# esac
			#   ;;
			*"-"*)
				;;
			"")
				;;
			*)
				# eval "export ${key_name}=\"$key_value\""
				/ "export $key_name=\"$key_value\"" || {
					// war '$key_name' "$key_name"
					// war '$key_value' "$key_value"
					# exit 1
					kill 0
				}
		esac

		[ "$force_to_file" != "force" ] ||
		[ "$just_updated" -eq "0" ] ||
				update_builtins_flags_to_file
	fi
}

common_options_init() {
	_level_2
	local toolchain_prefix="$1"
	local target_resource_prefix="$(// delegate to_target_resource_prefix "$toolchain_prefix")"
	local toolchain_version="$(// delegate target_resource_prefix_to_version "$target_resource_prefix")"

	# // log  'cmake' "clear cache"
	# find $OUTPUT_DIR -mindepth 1 -maxdepth 1 -exec \rm -rf {} +
	find . -type f -name CMakeCache.txt -delete

	# touch "$MAKE_DIR/cache.cmake"
	# for item in $(find . -type f -name CMakeCache.txt); do
	#   // log '$item' "$item"
	#   # [ -z "${item##*"NATIVE"*}" ] ||
	#   echo "$(cat "$item")" >> "$MAKE_DIR/cache.cmake" > /dev/null
	# done

	# CMAKE_OPTIONS="$CMAKE \\$newline"
	CMAKE_OPTIONS=

	deploy "-G" "\"$GENERATOR_TYPE\""
	deploy "-B" "\"$OUTPUT_DIR\""


	# deploy "-D" "CMAKE_TOOLCHAIN_FILE" "$SOURCE_PREFIX/$RELATIVE_PATH/cmake/toolchain.cmake"
	# deploy "-C" "$SOURCE_PREFIX/toolchain/cmake/clang.cmake"

	# [ -z "${_LIBCPP_VERSION+x}" ] ||
	# deploy "-D" "_LIBCPP_PROVIDES_DEFAULT_RUNE_TABLE:INTERNAL" "1"

	# ! expr "$KISS_XHOST_ABI" : "musl" > /dev/null 2>&1 || {
	[ "$KISS_XHOST_ABI" != "musl" ] || {
		deploy "-D" "_LIBCPP_HAS_MUSL_LIBC:BOOL" "ON"
		deploy "-D" "LIBCXX_HAS_MUSL_LIBC:BOOL"  "ON"
	}

	deploy "-D" "CMAKE_VERBOSE_MAKEFILE" "ON"

	CMAKE_MODULE_PATH="$($CMAKE --system-information | grep "CMAKE_MODULE_PATH" || :)"
	CMAKE_MODULE_PATH="$MAKE_DIR/cmake/Modules${CMAKE_MODULE_PATH:+";${CMAKE_MODULE_PATH}"}"
	export CMAKE_MODULE_PATH
	deploy "-D" "CMAKE_MODULE_PATH" "$CMAKE_MODULE_PATH"
	# deploy "-D" "CMAKE_MODULE_PATH" \
	#   "$MAKE_DIR/cmake/Modules${CMAKE_MODULE_PATH:+";${CMAKE_MODULE_PATH}"}"

	deploy "-D" "CMAKE_POLICY_DEFAULT_CMP0002" "NEW"
	deploy "-D" "CMAKE_POLICY_DEFAULT_CMP0003" "NEW"
	deploy "-D" "CMAKE_POLICY_DEFAULT_CMP0056" "NEW"
	deploy "-D" "CMAKE_POLICY_DEFAULT_CMP0057" "NEW"
	deploy "-D" "CMAKE_POLICY_DEFAULT_CMP0058" "NEW"
	deploy "-D" "CMAKE_POLICY_DEFAULT_CMP0011" "NEW"
	deploy "-D" "CMAKE_POLICY_DEFAULT_CMP0076" "NEW"
	deploy "-D" "CMAKE_POLICY_DEFAULT_CMP0114" "NEW"

	deploy "-D" "LLVM_CCACHE_BUILD" "ON"
	deploy "-D" "CMAKE_C_COMPILER_LAUNCHER"   "ccache"
	# deploy "-D" "CMAKE_C_COMPILER_LAUNCHER"   ""
	deploy "-D" "CMAKE_CXX_COMPILER_LAUNCHER" "ccache"
	# deploy "-D" "CMAKE_CXX_COMPILER_LAUNCHER" ""
	deploy "-D" "CMAKE_FIND_PACKAGE_PREFER_CONFIG" "TRUE"


	# Checked in compiler-rt/lib/profile/CMakeLists.txt
	# COMPILER_RT_TARGET_HAS_ATOMICS

	# For BLAKE3
	deploy "-D" "LLVM_DISABLE_ASSEMBLY_FILES"        "OFF"

	# Otherwise llvm needs gold
	deploy "-D" "BOOTSTRAP_LLVM_ENABLE_LLD" "ON"
	# deploy "-D" "CMAKE_LINKER" "lld"
	# deploy "-D" "CMAKE_LINKER:FILEPATH"     "$DESTDIR/$PREFIX_HOST/bin/lld"
	deploy "-D" "CMAKE_LINKER:FILEPATH"     "$(which ld.lld)"
	# deploy "-D" "CMAKE_LINKER:FILEPATH"     "$DESTDIR/$PREFIX_HOST/bin/clang++"
	# deploy "-D" "CMAKE_LINKER:FILEPATH"     "$(which clang++)"
	deploy "-D" "CMAKE_LINK_EXECUTABLE"     "$(which ld.lld)"
	# deploy "-D" "CMAKE_LINK_EXECUTABLE"     "$DESTDIR/$PREFIX_HOST/bin/lld"
	# deploy "-D" "CMAKE_LINK_EXECUTABLE"     "$(which clang++)"
	deploy "-D" "CMAKE_AR"                  "$(which llvm-ar)"
	deploy "-D" "CMAKE_AS"                  "$(which llvm-as)"
	deploy "-D" "CLANG_DEFAULT_LINKER"      "ld.lld"
	deploy "-D" "CLANG_DEFAULT_RTLIB"       "compiler-rt"
	deploy "-D" "CLANG_DEFAULT_UNWINDLIB"   "libunwind"
	# Headers for current compilation
	# deploy "-D" "CLANG_RESOURCE_DIR:STRING"    "../lib/clang/$toolchain_version"
	deploy "-D" "CLANG_RESOURCE_DIR:STRING"    "../lib/clang/$version_target" "force"
	# libc of LLVM specific
	# deploy "-D" "COMPILER_RESOURCE_DIR:STRING" "$RESOURCE_DIR_HOST"
	# deploy "-D" "COMPILER_RESOURCE_DIR:STRING" "$DESTDIR/$PREFIX_HOST/lib/clang/$toolchain_version"
	deploy "-D" "COMPILER_RESOURCE_DIR:STRING" "$DESTDIR/$PREFIX_HOST/lib/clang/$version_target" "force"
	# LLDB_EXTERNAL_CLANG_RESOURCE_DIR
	# "${LLDB_CLANG_RESOURCE_DIR_PARENT}/${LLDB_CLANG_RESOURCE_DIR_NAME}"

	[ ! -z "${toolchain_prefix:+x}" ] &&
	[ -z "${toolchain_prefix##*"$DESTDIR"*}" ] &&
		deploy "-D" "LLVM_TOOLS_BINARY_DIR:PATH" "$DESTDIR/$PREFIX_HOST/bin" ||
		deploy "-D" "LLVM_TOOLS_BINARY_DIR:PATH" "/$PREFIX_HOST/bin"

	# set(CMAKE_SIZEOF_VOID_P "${CMAKE_CXX_SIZEOF_DATA_PTR}")
	# set(CMAKE_SIZEOF_VOID_P "${CMAKE_C_SIZEOF_DATA_PTR}")
	deploy "-D" "CMAKE_C_SIZEOF_DATA_PTR"   "8"
	deploy "-D" "CMAKE_CXX_SIZEOF_DATA_PTR" "8"
	deploy "-D" "CMAKE_SIZEOF_VOID_P"       "8"


	# -std=c++23
	# cxx_standard_version="c++23"
	# Hardcoded in llvm/CMakeLists.txt
	# This C++ standard is required to build LLVM.
	# set(LLVM_REQUIRED_CXX_STANDARD 23)
	# error: friends can only be classes or functions -- if hardcoded c++17
	# In flang only
	# deploy "-D" "LLVM_CXX_STD:STRING" "c++23"
	# How to set c++2b ?
	deploy "-D" "LLVM_REQUIRED_CXX_STANDARD" "23"
	deploy "-D" "CMAKE_CXX_STANDARD"  "$LLVM_REQUIRED_CXX_STANDARD"

	# fin "check_cxx_compiler_flag" "*.cmake" | grep "\-std="
	# ./openmp/cmake/config-ix.cmake:40:check_cxx_compiler_flag(-std=c++17 OPENMP_HAVE_STD_CPP17_FLAG)
	# Intermediate variable. Value came from: openmp/cmake/config-ix.cmake
	# deploy "-D" "OPENMP_HAVE_STD_CPP17_FLAG"                "ON"

	deploy "-D" "CMAKE_INSTALL_LIBDIR:PATH"          "lib"
	deploy "-D" "LIBUNWIND_INSTALL_LIBRARY_DIR:PATH" "lib"
	# deploy "-D" "CXX_SUPPORTS_STDLIB:INTERNAL"  "-stdlib=lib${LIBCXX_PREFIX}c++"
	deploy "-D" "CXX_SUPPORTS_STDLIB:BOOL" "YES"
	# libc++ as std lib in clang by default
	deploy "-D" "CLANG_DEFAULT_CXX_STDLIB" "libc++"
	# deploy "-D" "LLVM_DEFAULT_TARGET_TRIPLE:STRING" "x86_64-unknown-linux-musl"
	deploy "-D" "LLVM_TARGET_TRIPLE:STRING"         "$KISS_XHOST_TRIPLE"
	deploy "-D" "LLVM_DEFAULT_TARGET_TRIPLE:STRING" "$KISS_XHOST_TRIPLE"
	# deploy "-D" "LLVM_TARGET_TRIPLE_ENV"            "\$ENV{LLVM_TARGET_TRIPLE}"
	deploy "-D" "LLVM_TARGET_TRIPLE_ENV"            "$LLVM_TARGET_TRIPLE"

	# -D LLVM_HOST_TRIPLE="$(cc -dumpmachine)" \
	# deploy "-D" "LLVM_HOST_TRIPLE:STRING"                   "$KISS_XHOST_TRIPLE"
	deploy "-D" "LLVM_HOST_TRIPLE:STRING"                   "$(cc -dumpmachine)"
	# TODO
	deploy "-D" "CROSS_TOOLCHAIN_FLAGS_LLVM_NATIVE:STRING"  ""
	deploy "-D" "LLVM_NATIVE_TARGET:STRING"                 "$KISS_XHOST_TRIPLE"
	deploy "-D" "LLVM_DEFAULT_TARGET_TRIPLE_default:STRING" "$KISS_XHOST_TRIPLE"

	# Will be reseted in /usr/share/cmake-3.25/Modules/CMakeTestCCompiler.cmake
	deploy "-D" "CMAKE_C_COMPILER_WORKS"             "ON"
	deploy "-D" "CMAKE_CXX_COMPILER_WORKS"           "ON"
	deploy "-D" "CMAKE_ASM_COMPILER_WORKS"           "ON"
	# deploy "-D" "CMAKE_ASM_COMPILER_WORKS:INTERNAL" "1"
	# llvm/ADT ... under it and as same as "$DESTDIR/$PREFIX_HOST/include"
	# deploy "-D" "LLVM_INCLUDE_DIRS:PATH"        "$MAKE_DIR/llvm/include"
	# This is FLAGS syntax
	# deploy "-D" "LLVM_INCLUDE_DIRS:PATH"        " -isystem $DESTDIR/$PREFIX_HOST/include -isystem $KISS_ROOT/$PREFIX_HOST/include"
	deploy "-D" "LLVM_INCLUDE_DIRS:PATH"        "$DESTDIR/$PREFIX_HOST/include"
	# deploy "-D" "LLVM_INCLUDE_DIRS:PATH"        "$RESOURCE_DIR_HOST/include"

	# Useless
	# deploy "-D" "STAGE2_LLVM_INCLUDE_DIRS:PATH" "$MAKE_DIR/llvm/include"
	# clang/AST ... under it and as same as "$DESTDIR/$PREFIX_HOST/include"
	# deploy "-D" "C_INCLUDE_DIRS:STRING"         "$MAKE_DIR/clang/include"
	#
	# ignoring nonexistent directory "/working/kiss/proc/pkg/llvm/usr/include;/opt/kiss/usr/include"
	# deploy "-D" "C_INCLUDE_DIRS:STRING"         "$DESTDIR/$PREFIX_HOST/include;$KISS_ROOT/$PREFIX_HOST/include"
	#
	#
	# ignoring nonexistent directory "/working/kiss/proc/pkg/llvm/usr/include;/opt/kiss/usr/include"
	# deploy "-D" "C_INCLUDE_DIRS:STRING"         "$DESTDIR/$PREFIX_HOST/include;$KISS_ROOT/$PREFIX_HOST/include"
	#
	# ignoring nonexistent directory "/opt/kiss-isystem /working/kiss/proc/pkg/llvm/usr/include -isystem /opt/kiss/usr/include"
	# deploy "-D" "C_INCLUDE_DIRS:STRING"         "-isystem $DESTDIR/$PREFIX_HOST/include -isystem $KISS_ROOT/$PREFIX_HOST/include"
	# ignoring nonexistent directory "/opt/kiss -isystem /working/kiss/proc/pkg/llvm/usr/include -isystem /opt/kiss/usr/include"
	# deploy "-D" "C_INCLUDE_DIRS:STRING"         " -isystem $DESTDIR/$PREFIX_HOST/include -isystem $KISS_ROOT/$PREFIX_HOST/include"

	# deploy "-D" "C_INCLUDE_DIRS:STRING"         "$DESTDIR/$PREFIX_HOST/include"
	deploy "-D" "C_INCLUDE_DIRS:STRING"         "$KISS_ROOT/$PREFIX_HOST/include"

	# Useless
	# deploy "-D" "STAGE2_C_INCLUDE_DIRS:STRING"  "$MAKE_DIR/clang/include"

	# Loook into
	# $OUTPUT_DIR/tools/clang/stage2/tmp/stage2-cfgcmd.txt
	# And
	# ExternalProject_Add(${name} in llvm/cmake/modules/LLVMExternalProjectUtils.cmake
	# deploy "-D" "LLVM_BINUTILS_INCDIR"        "$OUTPUT_DIR/include"

	# stage2 does not like this combination
	#   deploy "-D" "LLVM_BINUTILS_INCDIR" \
	#       "\
	# $DESTDIR/$PREFIX_HOST/include/c++/v1;\
	# $DESTDIR/$PREFIX_HOST/lib/clang/$version_target_major/include;\
	# $DESTDIR/$PREFIX_HOST/include\
	# "

	#   deploy "-D" "LLVM_BINUTILS_INCDIR" \
	# "$DESTDIR/$PREFIX_HOST/include\
	# "

	# $KISS_ROOT/$PREFIX_HOST/include/c++/v1;\
	#
	# $DESTDIR/$PREFIX_HOST/lib/clang/$version_target_major/include/c++/v1;\
	# $OUTPUT_DIR/include/x86_64-linux-musl/c++/v1;\
	# $OUTPUT_DIR/include/c++/v1;\
	# $MAKE_DIR/libcxx/include\
	#
	# $OUTPUT_DIR/lib/clang/$version_target_major/include;\
	# $OUTPUT_DIR/runtimes/runtimes-bins/pstl/generated_headers;\
	#
	# $MAKE_DIR/pstl/include;\
	#
	# $KISS_ROOT/$PREFIX_HOST/include\
	#
	# NATIVE/runtimes/runtimes-bins
	# Seems deprecated
	deploy "-D" "CMAKE_INSTALL_OLDINCLUDEDIR" \
		"\
$KISS_ROOT/$PREFIX_HOST/include\
"
	# $KISS_ROOT/$PREFIX_HOST/include/c++/v1;\

	# LLVM_CONFIG_PATH is deprecated, please use LLVM_CMAKE_DIR instead
	# Compute the path to the LLVM install prefix and pass it as LLVM_CMAKE_DIR,
	# CMake will locate the appropriate lib*/cmake subdirectory from there.
	# For example. for -DLLVM_CONFIG_PATH=/usr/lib/llvm/16/bin/llvm-config
	# this will yield LLVM_CMAKE_DIR=/usr/lib/llvm/16.
	# deploy "-D" "LLVM_CONFIG_PATH" "$(which llvm-config)"
	# compiler-rt/cmake/Modules/CompilerRTUtils.cmake
	# deploy "-D" "LLVM_CMAKE_DIR"            "/usr/lib/llvm/$toolchain_version"
	# Runtimes file dir: "/usr/lib/clang/$toolchain_version/lib/linux"
	# deploy "-D" "LLVM_CMAKE_DIR"            "/usr/lib/clang/$toolchain_version"
	deploy "-D" "LLVM_CMAKE_DIR"            "$KISS_ROOT/usr/lib/cmake/llvm"

	# alpine sets this path
	deploy "-D" "CMAKE_INSTALL_PREFIX:PATH"   "/$PREFIX_HOST"
	# deploy "-D" "CMAKE_INSTALL_RPATH:PATH"  "$KISS_ROOT/usr/lib/clang/$version_target"
	# deploy "-D" "CMAKE_INSTALL_RPATH:PATH"  "../lib"
	# deploy "-D" "CMAKE_INSTALL_RPATH:PATH"  "../lib/clang/$version_target"
	deploy "-D" "CMAKE_INSTALL_RPATH:PATH"  "../lib/clang/$version_target"

	deploy "-D" "CMAKE_MAKE_PROGRAM:FILEPATH" "$MAKE_PROGRAM"

	# ld: error: undefined symbol: backtrace
	# >>> referenced by Signals.cpp
	# >>>               Signals.cpp.o:(llvm::sys::PrintStackTrace(llvm::raw_ostream&, int)) in archive lib/libLLVMSupport.a
	deploy "-D" "Backtrace_INCLUDE_DIR"       "$KISS_ROOT/$PREFIX_HOST/include"
	deploy "-D" "Backtrace_LIBRARY"           "$KISS_ROOT/$PREFIX_HOST/lib/libexecinfo.so"
	deploy "-D" "ICONV_LIBRARY_PATH"          "$KISS_ROOT/$PREFIX_HOST/lib/libc.so"
	deploy "-D" "COMPILER_RT_HAS_LIBEXECINFO" "ON"

	deploy "-D" "LLVM_ENABLE_BACKTRACES"      "ON"

	# -fPIC
	deploy "-D" "CMAKE_POSITION_INDEPENDENT_CODE" "ON"

	deploy "-D" "CMAKE_HAVE_LIBC_PTHREAD" "ON"

	deploy "-D" "LLVM_ENABLE_EH"          "ON"

	# alpine sets ON
	# deploy "-D" "LLVM_ENABLE_TERMINFO"    "OFF"
	deploy "-D" "LLVM_ENABLE_TERMINFO"    "ON"
	#   Could not find builtins library from libc++abi
	#   Could not find builtins library from libc++

	# Hard coded in libcxxabi/CMakeLists.txt to OFF
	# deploy "-D" "LIBCXXABI_USE_COMPILER_RT"           "ON"
	#
	# For --unwindlib=none
	deploy "-D" "LIBCXXABI_USE_LLVM_UNWINDER"         "ON"           # libunwind in libc++

	deploy "-D" "CXX_SUPPORTS_UNWINDLIB_EQ_NONE_FLAG" "ON"

	# Conflicts with _LIBCPP_HAS_MUSL_LIBC
	# deploy "-D" "LIBCXX_ENABLE_WIDE_CHARACTERS"       "OFF"

	deploy "-D" "LIBCXXABI_ENABLE_THREADS"            "ON"
	deploy "-D" "LIBCXXABI_HERMETIC_STATIC_LIBRARY"   "ON"
	deploy "-D" "LIBCXXABI_INSTALL_LIBRARY"           "ON"
	deploy "-D" "LIBCXXABI_ENABLE_EXCEPTIONS"         "ON"
	# Conceptual
	deploy "-D" "LIBUNWIND_ENABLE_EXCEPTIONS"         "ON"

	deploy "-D" "LIBCXXABI_ENABLE_STATIC_UNWINDER"    "ON"
	deploy "-D" "LIBCXXABI_ENABLE_STATIC"             "ON"
	deploy "-D" "LIBCXXABI_STATICALLY_LINK_UNWINDER_IN_STATIC_LIBRARY" "ON"
	# deploy "-D" "LIBCXXABI_ENABLE_SHARED"                              "ON"
	# deploy "-D" "LIBCXXABI_STATICALLY_LINK_UNWINDER_IN_SHARED_LIBRARY" "ON"

	deploy "-D" "LIBCXX_ENABLE_STATIC_ABI_LIBRARY"   "ON"
	#
	# deploy "-D" "LIBCXX_USE_COMPILER_RT"             "ON"           # compiler-rt in libc++
	#
	deploy "-D" "LIBCXX_INSTALL_LIBRARY"             "ON"
	# https://reviews.llvm.org/D60480
	deploy "-D" "LIBCXX_ENABLE_PARALLEL_ALGORITHMS"  "ON"
	deploy "-D" "LIBCXX_ENABLE_ASSERTIONS:BOOL"      "ON"
	deploy "-D" "LIBCXX_ENABLE_EXCEPTIONS:BOOL"      "ON"
	deploy "-D" "LIBCXX_ENABLE_RTTI:BOOL"            "ON"
	deploy "-D" "LIBCXX_CXX_ABI"                     "libcxxabi"
	deploy "-D" "LIBCXX_PSTL_CPU_BACKEND"            "std_thread"

	# From toolchiain file?
	# deploy "-D" "LLVM_HAS_ATOMICS"                                "OFF"
	# https://wiki.aalto.fi/display/t1065450/LLVM+atomics
	# Define LLVM_HAS_ATOMICS if gcc or MSVC atomic builtins are supported.
	# https://github.com/llvm/llvm-project/commit/21450545d14
	deploy "-D" "LLVM_HAS_ATOMICS"                               "ON"
	deploy "-D" "_LIBCPP_ATOMIC_ONLY_USE_BUILTINS"               "ON"

	# NATIVE evaluated to 0
	deploy "-D" "HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL"          "1"
	deploy "-D" "HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL"        "1"
	deploy "-D" "LIBCXX_HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL"   "1"
	deploy "-D" "LIBCXX_HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL" "1"

	# Recommended by LLVM: compiler-rt/lib/builtins/CMakeLists.txt
	# "Skip the atomic builtin (these should normally be provided by a shared library)"
	# Did it say libgcc_s ? Or just wrong said
	deploy "-D" "COMPILER_RT_EXCLUDE_ATOMIC_BUILTIN" "ON"
	# deploy "-D" "COMPILER_RT_EXCLUDE_ATOMIC_BUILTIN" "OFF"
	# deploy "-D" "HAVE_CXX_ATOMICS_WITH_LIB:INTERNAL" "OFF"
	#
	# NATIVE evaluated to nothing
	deploy "-D" "HAVE_CXX_ATOMICS_WITH_LIB:INTERNAL" "0"
	deploy "-D" "HAVE_CXX_LIBATOMICS64:INTERNAL"     "0"
	# NATIVE evaluated to 1
	deploy "-D" "HAVE_LIBATOMIC:INTERNAL"            "0"
	deploy "-D" "LIBCXX_HAS_ATOMIC_LIB:INTERNAL"     "0"
	deploy "-D" "CMAKE_EXPORT_COMPILE_COMMANDS:BOOL" "ON"

	# https://stackoverflow.com/questions/47304919/building-and-using-a-pure-llvm-toolchain-for-c-on-linux
	#   Cannot enable BUILD_SHARED_LIBS with LLVM_LINK_LLVM_DYLIB.  We recommend
	#   disabling BUILD_SHARED_LIBS.
	# deploy "-D" "BUILD_SHARED_LIBS:BOOL"          "OFF"
	deploy "-D" "BUILD_SHARED_LIBS:BOOL"          "ON"

	deploy "-D" "LLVM_BUILD_LLVM_DYLIB"           "ON"
	# alpine turn off this item
	# Turn it on in the second run
	deploy "-D" "LLVM_ENABLE_ASSERTIONS"          "OFF"
	# alpine enable this item

	deploy "-D" "LLVM_ENABLE_LIBEDIT"                "OFF"
	deploy "-D" "LLVM_ENABLE_SPHINX:BOOL"            "OFF"
	deploy "-D" "LLVM_INCLUDE_GO_TESTS"              "OFF"
	# Hardcoded
	deploy "-D" "LLVM_INCLUDE_BENCHMARKS"            "OFF"
	deploy "-D" "LLVM_BUILD_BENCHMARKS"              "OFF"

	deploy "-D" "LLVM_ENABLE_LIBXML2"                "OFF"

	# Might be ON
	# deploy "-D" "LLVM_BUILD_TESTS"                   "ON"
	deploy "-D" "LLVM_BUILD_TESTS"                   "OFF"
	# Depends on lit installed
	deploy "-D" "LLVM_INCLUDE_TESTS"                 "ON"
	# deploy "-D" "LLVM_INCLUDE_TESTS"                 "OFF"
	# deploy "-D" "NATIVE_LLVM_INCLUDE_TESTS:BOOL"     "ON"
	# LLVMTestingSupport not found in LLVM_AVAILABLE_LIBS

	deploy "-D" "LLVM_INCLUDE_EXAMPLES"              "OFF"
	deploy "-D" "LLVM_INCLUDE_DOCS"                  "OFF"

	# LLVM_ENABLE_LLD and LLVM_USE_LINKER can't be set at the same time
	# deploy "-D" "LLVM_USE_LINKER" "lld"
	# deploy "-U" "LLVM_USE_LINKER"
	deploy "-D" "LLVM_ENABLE_LLD"                    "ON"
	deploy "-D" "LLVM_ENABLE_RTTI"                   "ON"
	deploy "-D" "LLVM_ENABLE_THREADS:BOOL"           "ON"
	deploy "-D" "LLVM_INSTALL_UTILS:BOOL"            "ON"
	# Equal to -stdlib=libc++
	deploy "-D" "LLVM_ENABLE_LIBCXX:BOOL"            "ON"
	deploy "-D" "LLVM_ENABLE_LIBCXXABI:BOOL"         "ON"
	deploy "-D" "LLVM_HAVE_LIBXAR"                   "OFF"
	deploy "-D" "LLVM_BUILD_DOCS:BOOL"               "OFF"
	deploy "-D" "LLVM_BUILD_EXAMPLES"                "OFF"

	deploy "-D" "LLVM_PARALLEL_COMPILE_JOBS" "$jobs"
	deploy "-D" "LLVM_PARALLEL_LINK_JOBS"    "$jobs"

	# llvm/cmake/modules/HandleLLVMStdlib.cmake
	# Not sure how to specify libc++ for this compiler
	# "-stdlib=libc++"
	# LLVM_ENABLE_LIBCXX add LLVM_COMPILER_IS_GCC_COMPATIBLE
	# append "-stdlib=libc++" to CMAKE_CXX_FLAGS
	# CMAKE_EXE_LINKER_FLAGS CMAKE_SHARED_LINKER_FLAGS and CMAKE_MODULE_LINKER_FLAGS
	# It means switch between "-stdlib=libc++" and "-stdlib=libstdc++" in the future ?
	# Switch this option will rebuild everyting
	deploy "-D" "LLVM_COMPILER_IS_GCC_COMPATIBLE" "OFF"
	# If turn this option on, build times will increase significantly/dramatically (ten times?)
	# deploy "-D" "LLVM_COMPILER_IS_GCC_COMPATIBLE" "ON"

	# ./clang/test/Driver/linux-per-target-runtime-dir.c:20:// RUN:   | FileCheck --check-prefix=CHECK-CLANGRT-X8664 %s
	# ./clang/test/Driver/linux-per-target-runtime-dir.c:21:// CHECK-CLANGRT-X8664: lib{{/|\\}}x86_64-unknown-linux-gnu{{/|\\}}libclang_rt.builtins.a
	# ./clang/test/Driver/print-libgcc-file-name-clangrt.c:7:// RUN:   | FileCheck --check-prefix=CHECK-CLANGRT-X8664 %s
	# ./clang/test/Driver/print-libgcc-file-name-clangrt.c:8:// CHECK-CLANGRT-X8664: libclang_rt.builtins-x86_64.a
	# deploy "-D" "CLANGRT-X8664" "libclang_rt.builtins-x86_64.a"
	#
	# ./clang/test/Driver/linux-per-target-runtime-dir.c:26:// RUN:   | FileCheck --check-prefix=CHECK-FILE-NAME-X8664 %s
	# ./clang/test/Driver/linux-per-target-runtime-dir.c:27:// CHECK-FILE-NAME-X8664: lib{{/|\\}}x86_64-unknown-linux-gnu{{/|\\}}libclang_rt.builtins.a
	# deploy "-D" "FILE-NAME-X8664" "lib{{/|\\}}x86_64-unknown-linux-musl{{/|\\}}libclang_rt.builtins.a"

	# deploy "-D" "LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default:BOOL" "OFF"
	deploy "-D" "LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default:BOOL" "ON"
	# Hardcoded in the following file
	# /working/toolchain/llvm/llvm-project/llvm/runtimes/CMakeLists.txt
	# deploy "-D" "LLVM_ENABLE_PER_TARGET_RUNTIME_DIR" "OFF"
	# deploy "-D" "LLVM_ENABLE_PER_TARGET_RUNTIME_DIR:BOOL" "ON"

	deploy "-D" "LLVM_ENABLE_PER_TARGET_RUNTIME_DIR"     "${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default}"

	deploy "-D" "LLVM_ENABLE_FFI"           "ON"
	deploy "-D" "LLVM_ENABLE_PIC"           "ON"
	deploy "-D" "LLVM_ENABLE_ZLIB"          "ON"
	deploy "-D" "LLVM_BUILD_TOOLS"          "ON"
	# deploy "-D" "LLVM_USE_HOST_TOOLS"       "OFF"
	deploy "-D" "LLVM_USE_HOST_TOOLS"       "ON"
	deploy "-D" "LLVM_ENABLE_PROJECTS_USED" "ON"
	deploy "-D" "LLVM_APPEND_VC_REV"        "OFF"

	# For libunwind;pstl;libc;libcxxabi;libcxx
	# llvm/projects/CMakeLists.txt
	deploy "-D" "LLVM_FORCE_BUILD_RUNTIME"        "ON"


	deploy "-D" "RUNTIMES_BUILD_BUILTINS"         "ON"
	deploy "-D" "COMPILER_RT_BUILD_BUILTINS:BOOL" "OFF"
	# deploy "-D" "COMPILER_RT_BUILD_BUILTINS:BOOL" "ON"
	# compiler-rt/lib/CMakeLists.txt
	deploy "-D" "COMPILER_RT_BUILD_CRT:BOOL"      "ON"
	# Hardcoded to OFF
	deploy "-D" "LLVM_BUILD_EXTERNAL_COMPILER_RT" "OFF"

	# deploy "-D" "COMPILER_RT_BAREMETAL_BUILD:BOOL" "ON"

	deploy "-D" "FFI_INCLUDE_DIR:PATH"  "\$ffi_include_dir"
	deploy "-D" "LIBOMPTARGET_DEP_LIBFFI_INCLUDE_DIR"  "\$ffi_include_dir"

	# COMPILER_RT_DEFAULT_TARGET_TRIPLE isn't supported when building for default
	deploy "-D" "COMPILER_RT_DEFAULT_TARGET_ARCH"   "$libname"

	# "compiler-rt/cmake/Modules/CompilerRTUtils.cmake"
	# Refer to LLVM_TARGET_TRIPLE
	deploy "-D" "COMPILER_RT_DEFAULT_TARGET_TRIPLE" "$KISS_XHOST_TRIPLE"

	deploy "-D" "CMAKE_C_COMPILER_TARGET"           "$KISS_XHOST_TRIPLE"
	deploy "-D" "CMAKE_CXX_COMPILER_TARGET"         "$KISS_XHOST_TRIPLE"
	deploy "-D" "CMAKE_ASM_COMPILER_TARGET"         "$KISS_XHOST_TRIPLE"
	deploy "-D" "CMAKE_CPP_COMPILER_TARGET"         "$KISS_XHOST_TRIPLE"

	deploy "-D" "LLVM_INFERRED_HOST_TRIPLE"         "$KISS_XHOST_TRIPLE"
	deploy "-D" "LLVM_RUNTIME_TARGETS"              "$KISS_XHOST_TRIPLE"
	deploy "-D" "LLVM_BUILTIN_TARGETS:STRING"       "$KISS_XHOST_TRIPLE"

	# No ffs implementation found
	deploy "-D" "HAVE_DECL_FFS"         "ON"
	deploy "-D" "HAVE_DECL_STRCASECMP"  "ON"
	deploy "-D" "HAVE_DECL_STRNCASECMP" "ON"
	deploy "-D" "HAVE_DECL_SNPRINTF"    "ON"

	deploy "-D" "CMAKE_THREAD_LIBS_INIT"         "-lpthread"
	deploy "-D" "CMAKE_HAVE_THREADS_LIBRARY"     "1"
	deploy "-D" "CMAKE_USE_WIN32_THREADS_INIT"   "0"
	deploy "-D" "CMAKE_USE_PTHREADS_INIT"        "1"
	# set(THREADS_PREFER_PTHREAD_FLAG TRUE)
	deploy "-D" "THREADS_PREFER_PTHREAD_FLAG"    "ON"

	# Will be reseted in /usr/share/cmake-3.25/Modules/CMakeTestCCompiler.cmake
	# deploy "-D" "CMAKE_C_COMPILER_FORCED"      "ON"
	# deploy "-D" "CMAKE_CXX_COMPILER_FORCED"    "ON"


	deploy "-D" "POLLY_ENABLE_GPGPU_CODEGEN:BOOL" "OFF"
	# if enabled, polly needs cuda or opencl. And NVPTX needs to be added to LLVM_TARGETS_TO_BUILD
	# deploy "-D" "POLLY_ENABLE_GPGPU_CODEGEN:BOOL" "ON"

	deploy "-D" "LLVM_POLLY_LINK_INTO_TOOLS:BOOL" "ON"

	# For native llvm-config
	# LLVMCONFIG_TARGET_OBJROOT

	# For bypassing llvm-tblgen and clang-tblgen
	# LLVM_NATIVE_TOOL_DIR
	# LLVM_TBLGEN
	# deploy "-D" "LLVM_NATIVE_TOOL_DIR" "/usr/bin"
	# deploy "-D" "LLVM_TBLGEN"          "/usr/bin/llvm-tblgen"
	# deploy "-D" "CLANF_TBLGEN"         "/usr/bin/clang-tblgen"
	# -DCMAKE_INSTALL_COMPONENT="LLVMAMDGPUUtils"
	#
	if [ "$POLLY_ENABLE_GPGPU_CODEGEN" = "ON" ]; then
		# Refer to TARGET_ARCH
		deploy "-D" "LLVM_TARGETS_TO_BUILD:STRING" "host;AMDGPU;NVPTX"
	else
		deploy "-D" "LLVM_TARGETS_TO_BUILD:STRING" "host;AMDGPU"
		# deploy "-D" "LLVM_TARGETS_TO_BUILD:STRING" "host"
	fi

	deploy "-D" "LLVM_INSTALL_BINUTILS_SYMLINKS"  "ON"

	# include / lib under it?
	deploy "-D" "LLVM_BINARY_DIR:PATH"                 "$OUTPUT_DIR"
	# deploy "-D" "LLVM_BINARY_DIR:PATH"                 "/$PREFIX_HOST"

	deploy "-D" "LLVM_ENABLE_WERROR"                     "OFF"
	deploy "-D" "LLVM_USE_RELATIVE_PATHS_IN_DEBUG_INFO"  "OFF"
	deploy "-D" "LLVM_USE_RELATIVE_PATHS_IN_FILES"       "ON"
	deploy "-D" "LLVM_HAVE_LINK_VERSION_SCRIPT"          "1"
	deploy "-D" "LLVM_SOURCE_PREFIX"                     "$MAKE_DIR"
	deploy "-D" "HAVE_LLVM_LIT"                          "ON"
	deploy "-D" "LLVM_LIT_ARGS"                          "-vv --show-unsupported --show-xfail -j $jobs"
	# deploy "-D" "LLVM_LIT_ARGS"                         "-sv --show-unsupported --show-xfail -j $jobs"
	# PACKAGE_VERSION is not consistent
	# deploy "-D" "PACKAGE_VERSION"                        "$version_target"
	# deploy "-D" "LLVM_PACKAGE_VERSION"                   "$version_target"
	# clang/CMakeLists.txt
	# Unlike PACKAGE_VERSION, CLANG_VERSION does not include LLVM_VERSION_SUFFIX.
	# set(CLANG_VERSION "${CLANG_VERSION_MAJOR}.${CLANG_VERSION_MINOR}.${CLANG_VERSION_PATCHLEVEL}")
	deploy "-D" "CLANG_VERSION"                          "$version_target"
	deploy "-D" "COMPILER_RT_BUILD_GWP_ASAN"             "OFF"
	deploy "-D" "COMPILER_RT_BUILD_STANDALONE_LIBATOMIC" "OFF"

	deploy "-D" "COMPILER_RT_BUILD_SANITIZERS"           "OFF"
	deploy "-D" "COMPILER_RT_BUILD_MEMPROF"              "OFF"
	deploy "-D" "COMPILER_RT_BUILD_XRAY"                 "OFF"
	deploy "-D" "COMPILER_RT_BUILD_LIBFUZZER"            "OFF"
	deploy "-D" "COMPILER_RT_BUILD_ORC"                  "OFF"
	deploy "-D" "COMPILER_RT_ENABLE_CET"                 "OFF"
	# deploy "-D" "COMPILER_RT_INCLUDE_TESTS"              "OFF"
	deploy "-D" "COMPILER_RT_INCLUDE_TESTS"              "ON"
	deploy "-D" "LIBCXXABI_INCLUDE_TESTS"                "ON"
	deploy "-D" "LIBCXX_INCLUDE_TESTS"                   "ON"


	deploy "-D" "COMPILER_RT_BUILD_PROFILE"              "OFF"
	deploy "-D" "COMPILER_RT_USE_LIBCXX"                 "OFF"

	# DEFAULT_COMPILER_RT_USE_BUILTINS_LIBRARY => COMPILER_RT_USE_BUILTINS_LIBRARY
	# deploy "-D" "FUCHSIA" "ON"
	deploy "-D" "DEFAULT_COMPILER_RT_USE_BUILTINS_LIBRARY" "ON"

	deploy "-D" "COMPILER_RT_USE_BUILTINS_LIBRARY"       "ON"

	deploy "-D" "CMAKE_ASM_FLAGS_DEBUG:STRING"           "-g"

	# deploy "-D" "CMAKE_BUILD_TYPE:STRING" "Debug"
	# deploy "-D" "CMAKE_BUILD_TYPE:STRING" "RelWithDebInfo"
	deploy "-D" "CMAKE_BUILD_TYPE:STRING"  "Release"
	# deploy "-D" "CMAKE_C_COMPILER:FILEPATH"         "clang"
	# deploy "-D" "CMAKE_CXX_COMPILER:FILEPATH"       "clang++"
	#
	deploy "-D" "CMAKE_SYSTEM_NAME:STRING" "Linux"
	# Deprecated
	# deploy "-D" "DEFAULT_SYSROOT" "$SYS_ROOT"
	deploy "-D" "CMAKE_SYSROOT" "$KISS_ROOT"
	deploy "-D" "CMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN" "/$PREFIX_HOST"


	deploy "-D" "LLVM_BUILD_GLOBAL_ISEL:BOOL"                     "OFF"
	deploy "-D" "LLVM_DISABLE_ABI_BREAKING_CHECKS_ENFORCING:BOOL" "OFF"
	deploy "-D" "LLVM_TOOL_LLVM_MC_FUZZER_BUILD:BOOL"             "ON"

	# An advanced variable will not be displayed in any of the cmake GUIs unless the show advanced option is on. In script mode, the advanced/non-advanced state has no effect.
	# deploy can not process "-"
	# deploy "-D" "CMAKE_MAKE_PROGRAM-ADVANCED:INTERNAL"                 "1"
	deploy "-D" "COMPILER_RT_HAS_FFREESTANDING_FLAG:INTERNAL" "1"
	deploy "-D" "COMPILER_RT_HAS_XRAY_COMPILER_FLAG:INTERNAL" "False"
	deploy "-D" "HAS_MAYBE_UNINITIALIZED:INTERNAL"            "1"
	# /working/toolchain/llvm/llvm-project/libc/cmake/modules/LLVMLibCArchitectures.cmake:21
	# elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "(x86_64)|(AMD64|amd64)|(^i.86$)")
	deploy "-D" "CMAKE_SYSTEM_PROCESSOR:STRING" "x86_64"


	deploy "-D" "LLVM_PARALLEL_COMPILE_JOBS" "$jobs"
	deploy "-D" "LLVM_PARALLEL_LINK_JOBS"    "$jobs"


	deploy "-D" "LIBCXX_STANDARD_VERSION:STRING" "$cxx_standard_version"

	# LIBUNWIND_TARGET_TRIPLE is deprecated, please use CMAKE_CXX_COMPILER_TARGET instead
	# LIBUNWIND_SYSROOT, LIBUNWIND_TARGET_TRIPLE and LIBUNWIND_GCC_TOOLCHAIN are
	# not supported anymore, please use the native CMake equivalents instead
	# deploy "-D" "LIBUNWIND_SYSROOT"         "$KISS_ROOT"
	# Hardcoded to OFF
	# deploy "-D" "LIBUNWIND_USE_COMPILER_RT" "ON"
	#
	# /working/toolchain/llvm/official/libunwind/CMakeLists.txt
	# deploy "-D" "LIBUNWIND_COMPILE_FLAGS"   "\$ENV{KISS_LIBUNWIND_FLAGS}"
	#
	# Hardcoded in libunwind/CMakeLists.txt
	deploy "-D" "LIBUNWIND_ENABLE_SHARED"   "ON"
	# deploy "-D" "LIBUNWIND_ENABLE_SHARED"   "OFF"
	#
	# deploy "-D" "CXX_SUPPORTS_FNO_EXCEPTIONS_FLAG"   "ON"
	# deploy "-D" "CXX_SUPPORTS_FUNWIND_TABLES_FLAG"   "ON"
	deploy "-D" "CXX_SUPPORTS_FNO_EXCEPTIONS_FLAG:INTERNAL" "1"
	deploy "-D" "CXX_SUPPORTS_FUNWIND_TABLES_FLAG:INTERNAL" "1"
	deploy "-D" "LIBUNWIND_INSTALL_LIBRARY:BOOL"            "ON"

	deploy "-D" "LLVM_LIBGCC_EXPLICIT_OPT_IN:BOOL"          "Yes"

	deploy "-D" "LIBCXX_HAS_GCC_LIB:BOOL"                   "OFF"
	deploy "-D" "LIBCXX_HAS_GCC_S_LIB:BOOL"                 "OFF"

	deploy "-D" "LIBUNWIND_HAS_GCC_LIB:BOOL"                "OFF"
	deploy "-D" "LIBUNWIND_HAS_GCC_S_LIB:BOOL"              "OFF"

	deploy "-D" "LIBCXXABI_HAS_GCC_LIB:BOOL"                "OFF"
	deploy "-D" "LIBCXXABI_HAS_GCC_S_LIB:BOOL"              "OFF"

	deploy "-D" "COMPILER_RT_HAS_GCC_LIB:BOOL"              "OFF"
	deploy "-D" "COMPILER_RT_HAS_GCC_S_LIB:BOOL"            "OFF"


	deploy "-D" "LLDB_DISABLE_LIBEDIT:BOOL"    "ON"
	deploy "-D" "LLDB_DISABLE_PYTHON:BOOL"     "ON"
	# Cmake runs for ever
	deploy "-D" "LLDB_ENABLE_LZMA"             "OFF"
	deploy "-D" "LLDB_EXPORT_ALL_SYMBOLS:BOOL" "ON"

	deploy "-D" "CMAKE_CXX_IMPLICIT_LINK_LIBRARIES:STRING"  "${LIBCXX_PREFIX}c++;m;c"
	deploy "-D" "CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES:PATHS" "$KISS_ROOT/$PREFIX_HOST/lib"

	# In stage file
	# https://github.com/llvm/llvm-project
	# LLVM_ENABLE_PROJECTS can include any of: clang, clang-tools-extra, cross-project-tests, flang, libc, libclc, lld, lldb, mlir, openmp, polly, or pstl.
	# LLVM_ENABLE_RUNTIMES can include any of libcxx, libcxxabi, libunwind, compiler-rt, libc or openmp.
	# deploy "-D" "LLVM_ENABLE_PROJECTS:STRING" "clang;clang-tools-extra;lld;lldb;polly"
	# deploy "-D" "LLVM_ENABLE_PROJECTS:STRING" "clang;clang-tools-extra;lld;lldb"
	# deploy "-D" "LLVM_ENABLE_PROJECTS:STRING" "clang;clang-tools-extra;lld"
	# deploy "-D" "LLVM_ENABLE_PROJECTS:STRING" "llvm;clang;clang-tools-extra;lld;polly"
	# deploy "-D" "LLVM_ENABLE_PROJECTS:STRING" "all"
	# deploy "-D" "LLVM_ENABLE_PROJECTS:STRING" "llvm;clang;clang-tools-extra;lld"

	# deploy "-D" "CMAKE_CXX_LINK_FLAGS:STRING" "-l${LIBCXX_PREFIX}c++ -lc++abi -latomic -L${TOOL_LIB_ATOMIC_PATH} -L$KISS_ROOT/$PREFIX_HOST/lib -Wl,-rpath=$PREFIX_HOST/lib"
	# deploy "-D" "CMAKE_CXX_LINK_FLAGS:STRING" "-l${LIBCXX_PREFIX}c++ -lc++abi -latomic -L${TOOL_LIB_ATOMIC_PATH} -L$KISS_ROOT/$PREFIX_HOST/lib"
	# deploy "-D" "CMAKE_CXX_LINK_FLAGS:STRING" "-l${LIBCXX_PREFIX}c++ -lc++abi -L$KISS_ROOT/$PREFIX_HOST/lib -Wl,-rpath=/$PREFIX_HOST/lib"

	deploy "-D" "CMAKE_C_LINK_FLAGS:STRING"   "$ldflags"
	deploy "-D" "CMAKE_CXX_LINK_FLAGS:STRING" "$ldflags"

	# deploy "-D" "CMAKE_EXE_LINKER_FLAGS" "-L$KISS_ROOT/$PREFIX_HOST/lib -l${LIBCXX_PREFIX}c++"
	deploy "-D" "CMAKE_EXE_LINKER_FLAGS"      "$ldflags"
	# deploy "-D" "CMAKE_EXE_LINKER_FLAGS" "$ldflags \
	# -nostdlib \
	# -nostartfiles \
	# -nodefaultlibs \
	# Scrt1.o \
	# crti.o \
	# crtn.o \
	# libclang_rt.builtins-x86_64.a \
	# clang_rt.crtbegin-x86_64.o \
	# clang_rt.crtend-x86_64.o \
	# "

	# libc.so \

	# TRUE for glibc?
	deploy "-D" "LIBOMP_USE_QUAD_PRECISION:BOOL"       "FALSE"

	# set(LIBOMPTARGET_BUILD_DEVICERTL_BCLIB TRUE CACHE BOOL
	#   "Can be set to false to disable building this library.")
	# deploy "-D" "LIBOMPTARGET_BUILD_DEVICERTL_BCLIB"   "FALSE"
	deploy "-D" "LIBOMPTARGET_BUILD_DEVICERTL_BCLIB"   "TRUE"
	deploy "-D" "LIBOMP_ARCH"                          "x86_64"
	deploy "-D" "OPENMP_ENABLE_OMPTARGET"              "FALSE"
	deploy "-D" "OPENMP_ENABLE_OMP_TOOLS"              "FALSE"
	deploy "-D" "OPENMP_ENABLE_LIBOMPTARGET_PROFILING" "OFF"
	deploy "-D" "OPENMP_ENABLE_LIBOMP_PROFILING"       "OFF"
	deploy "-D" "OPENMP_USE_LLVM_UNWINDER"             "ON"

	deploy "-D" "LIBOMP_ENABLE_SHARED"                 "ON"
	deploy "-D" "LIBOMP_ENABLE_RTTI"                   "OFF"
	deploy "-D" "LIBOMP_OMPT_SUPPORT"                  "OFF"
	deploy "-D" "LIBOMP_LIBFLAGS"                      "-lm"


	# DOXYGEN_DOT_EXECUTABLE=     #/usr/bin/dot
	! command -v "${DOXYGEN_DOT_EXECUTABLE-}" > /dev/null 2>&1 ||
	deploy "-D" "DOXYGEN_DOT_EXECUTABLE:FILEPATH" "$DOXYGEN_DOT_EXECUTABLE"

	# DOXYGEN_EXECUTABLE=         #/usr/bin/doxygen
	! command -v "${DOXYGEN_EXECUTABLE-}" > /dev/null 2>&1 ||
	deploy "-D" "DOXYGEN_EXECUTABLE:FILEPATH" "$DOXYGEN_EXECUTABLE"
	# deploy "-Wno-dev"
	# echo "-Wno-dev \\"
	# CMAKE_OPTIONS="$CMAKE_OPTIONS    -Wno-dev \\$newline"
	deploy "-W" "no-dev"

}

// common_options_init "/$PREFIX_HOST"

target_flags_updated() {
	local target_resource_prefix="$1"
	# local toolchain_version="$(// delegate target_resource_prefix_to_version "$target_resource_prefix")"

	local resource_dir_host="$DESTDIR/$PREFIX_HOST/lib/clang/$version_target"
	# local resource_dir_host="-resource-dir=$KISS_ROOT/$PREFIX_HOST/lib/clang/$version_xhost"
	# local resource_dir_host="-resource-dir=$KISS_ROOT/$PREFIX_HOST/lib/clang/$toolchain_version"
	# local resource_dir_host="-resource-dir=$target_resource_prefix/lib/clang/$toolchain_version"
	[ ! -z "${target_resource_prefix:+x}" ] &&
		[ -z "${target_resource_prefix##*"$DESTDIR"*}" ] ||
		resource_dir_host="$KISS_ROOT/$PREFIX_HOST/lib/clang/$version_xhost"

	local updated=0

	{
		[ ! -z "${BUILTINS_TARGET_CMAKE_C_FLAGS:+x}" ] &&
		[ -z "${BUILTINS_TARGET_CMAKE_C_FLAGS##*"$resource_dir_host"*}" ]
	} && {
		[ ! -z "${BUILTINS_TARGET_CMAKE_CXX_FLAGS:+x}" ] &&
		[ -z "${BUILTINS_TARGET_CMAKE_CXX_FLAGS##*"$resource_dir_host"*}" ]
	} && {
		[ ! -z "${BUILTINS_TARGET_CMAKE_LDFLAGS:+x}" ] &&
		[ -z "${BUILTINS_TARGET_CMAKE_LDFLAGS##*"$resource_dir_host"*}" ]
	} ||
		updated=1

	return $updated
}

builtins_target_flags() {
	_level_2
	# local toolchain_prefix="$1"
	# local target_resource_prefix="$toolchain_prefix"
	# [ "$toolchain_prefix" != "/$PREFIX_HOST" ] ||
	#   target_resource_prefix="$KISS_ROOT/$PREFIX_HOST"
	local target_resource_prefix="$1"
	local toolchain_version="$(// delegate target_resource_prefix_to_version "$target_resource_prefix")"

	[ ! -z "${cflags:+x}" ] && [ -z "${cflags##*"-fPIC"*}" ] ||
		// die '-fPIC' "should be included in \$cflags"

	[ ! -z "${cflags:+x}" ] && [ -z "${cflags##*"--sysroot=${KISS_ROOT}"*}" ] ||
		// die "--sysroot=${KISS_ROOT}" "should be included in \$cflags"

	local resource_dir_host="$DESTDIR/$PREFIX_HOST/lib/clang/$version_target"
	# [ ! -z "${CC##*"$DESTDIR"*}" ] || toolchain_version="$version_target"
	# [ -z "${CC##*"$DESTDIR"*}" ] && toolchain_version="$version_target"
	# [ -z "${CC##*"$DESTDIR"*}" ] &&
	[ ! -z "${target_resource_prefix:+x}" ] &&
		[ -z "${target_resource_prefix##*"$DESTDIR"*}" ] ||
		resource_dir_host="$KISS_ROOT/$PREFIX_HOST/lib/clang/$version_xhost"

	[ -d "$RESOURCE_DIR_HOST" ] || // die '$RESOURCE_DIR_HOST' "does not exist '$RESOURCE_DIR_HOST'"
	[ -d "$resource_dir_host" ] || // die '$resource_dir_host' "does not exist '$resource_dir_host'"
	[ -z "${resource_dir_host##*"$RESOURCE_DIR_HOST"*}" ] || {

		[ "${RESOURCE_DIR_HOST##*/}" = "$version_xhost" ] &&
		[ "$toolchain_version" = "$version_xhost" ] || {
			// war '$RESOURCE_DIR_HOST' "$RESOURCE_DIR_HOST"
			// war '$resource_dir_host' "$resource_dir_host"
			// war '$toolchain_version' "$toolchain_version"
			// die 'FATAL' "builtins resource version should be equal or later than toolchain"
		}
	}

	# -resource-dir=$RESOURCE_DIR_HOST \
	# -B$BINDIR_HOST \
	BUILTINS_TARGET_CMAKE_C_FLAGS=" \
-isystem $resource_dir_host/include \
-isystem $target_resource_prefix/include \
"
	[ "$target_resource_prefix" != "$DESTDIR/$PREFIX_HOST" ] ||
		BUILTINS_TARGET_CMAKE_C_FLAGS=" \
$BUILTINS_TARGET_CMAKE_C_FLAGS \
-isystem $KISS_ROOT/$PREFIX_HOST/include \
"
	# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/llvm_libc_wrappers \

	# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/openmp_wrappers \
	# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/cuda_wrappers \
	# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/ppc_wrappers \
	# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include \
	# -isystem $OUTPUT_DIR/runtimes/runtimes-bins/pstl/generated_headers \
	# -isystem $MAKE_DIR/pstl/include \
	# -isystem $MAKE_DIR/clang/lib/Headers \
	#
	# -isystem $KISS_ROOT/$PREFIX_HOST/include \
	# -fPIC --sysroot=${KISS_ROOT} \

		BUILTINS_TARGET_CMAKE_C_FLAGS=" \
$BUILTINS_TARGET_CMAKE_C_FLAGS \
$cflags \
-resource-dir=$resource_dir_host \
-B$target_resource_prefix/bin \
"

	export BUILTINS_TARGET_CMAKE_C_FLAGS
	# deploy "-D" "ENV{BUILTINS_TARGET_CMAKE_C_FLAGS}" "$BUILTINS_TARGET_CMAKE_C_FLAGS"
	# deploy "-D" "ENV{RUNTIMES_x86_64-linux-musl_BUILTINS_TARGET_CMAKE_C_FLAGS}" "$BUILTINS_TARGET_CMAKE_C_FLAGS"
	# deploy "-D" "ENV{BUILTINS_x86_64-linux-musl_BUILTINS_TARGET_CMAKE_C_FLAGS}" "$BUILTINS_TARGET_CMAKE_C_FLAGS"
	// log '$BUILTINS_TARGET_CMAKE_C_FLAGS' "$BUILTINS_TARGET_CMAKE_C_FLAGS"

	[ ! -z "${cxxflags:+x}" ] && [ -z "${cxxflags##*"-D _LIBCPP_STD_VER=23"*}" ] ||
		// die '-D _LIBCPP_STD_VER=23' "should be included in \$cxxflags"

	# -resource-dir=$RESOURCE_DIR_HOST \
	# -B$BINDIR_HOST \
	# -isystem $KISS_ROOT/$PREFIX_HOST/include/c++/v1 \
	BUILTINS_TARGET_CMAKE_CXX_FLAGS=" \
-isystem $resource_dir_host/include \
-isystem $target_resource_prefix/include \
"
	[ "$target_resource_prefix" != "$DESTDIR/$PREFIX_HOST" ] ||
		BUILTINS_TARGET_CMAKE_CXX_FLAGS=" \
$BUILTINS_TARGET_CMAKE_CXX_FLAGS \
-isystem $KISS_ROOT/$PREFIX_HOST/include \
"
	BUILTINS_TARGET_CMAKE_CXX_FLAGS=" \
$BUILTINS_TARGET_CMAKE_CXX_FLAGS \
$cxxflags \
-resource-dir=$resource_dir_host \
-B$target_resource_prefix/bin \
"

	# $cflags \
	# -isystem $DESTDIR/$PREFIX_HOST/include/c++/v1 \

	# -isystem $OUTPUT_DIR/include/x86_64-linux-musl/c++/v1 \
	# -isystem $DESTDIR/$PREFIX_HOST/lib/clang/$version_target_major/include/c++/v1 \
	# -isystem $OUTPUT_DIR/include/c++/v1 \
	# -isystem $MAKE_DIR/libcxx/include \
	#
	# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/llvm_libc_wrappers \
	#
	# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/openmp_wrappers \
	# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/cuda_wrappers \
	# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/ppc_wrappers \
	# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include \
	# -isystem $OUTPUT_DIR/runtimes/runtimes-bins/pstl/generated_headers \
	# -isystem $MAKE_DIR/pstl/include \
	# -isystem $MAKE_DIR/clang/lib/Headers \
	#
	# ignoring nonexistent directory "/tmp/root/kiss/proc/make/llvm/objects/include/x86_64-linux-musl/c++/v1"
	# ignoring nonexistent directory "/working/kiss/proc/pkg/llvm/usr/lib/clang/18/include/c++/v1"
	# ignoring nonexistent directory "/tmp/root/kiss/proc/make/llvm/objects/include/c++/v1"
	# ignoring nonexistent directory "/tmp/root/kiss/proc/make/llvm/objects/runtimes/runtimes-bins/pstl/generated_headers"
	# ignoring duplicate directory "/opt/kiss/usr/include"
	# ignoring duplicate directory "/working/kiss/proc/pkg/llvm/usr/include"

	# -isystem $KISS_ROOT/$PREFIX_HOST/include \
	# -D_LIBCPP_STD_VER=23 \
	# -fPIC --sysroot=${KISS_ROOT} \

	export BUILTINS_TARGET_CMAKE_CXX_FLAGS
	# deploy "-D" "ENV{BUILTINS_TARGET_CMAKE_CXX_FLAGS}" "$BUILTINS_TARGET_CMAKE_CXX_FLAGS"
	# deploy "-D" "ENV{RUNTIMES_x86_64-linux-musl_BUILTINS_TARGET_CMAKE_CXX_FLAGS}" "$BUILTINS_TARGET_CMAKE_CXX_FLAGS"
	# deploy "-D" "ENV{BUILTINS_x86_64-linux-musl_BUILTINS_TARGET_CMAKE_CXX_FLAGS}" "$BUILTINS_TARGET_CMAKE_CXX_FLAGS"
	// log '$BUILTINS_TARGET_CMAKE_CXX_FLAGS' "$BUILTINS_TARGET_CMAKE_CXX_FLAGS"

	# -resource-dir=$RESOURCE_DIR_HOST \
	# -Wl,-L $RESOURCE_DIR_HOST/lib/linux \
	# -Wl,-L $LLVM_TOOLCHAIN_LIB_DIR_HOST \
	# -Wl,-rpath-link $LLVM_TOOLCHAIN_LIB_DIR_HOST \
	BUILTINS_TARGET_CMAKE_LDFLAGS=" \
-resource-dir=$resource_dir_host \
-L $resource_dir_host/lib/linux \
-L $target_resource_prefix/lib \
$ldflags \
-Wl,-rpath $target_resource_prefix/lib \
-Wl,-rpath-link $target_resource_prefix/lib \
"

	export BUILTINS_TARGET_CMAKE_LDFLAGS
	# deploy "-D" "ENV{BUILTINS_TARGET_CMAKE_LDFLAGS}" "$BUILTINS_TARGET_CMAKE_LDFLAGS"
	# deploy "-D" "ENV{BUILTINS_x86_64-linux-musl_BUILTINS_TARGET_CMAKE_LDFLAGS}" "$BUILTINS_TARGET_CMAKE_LDFLAGS"
	# deploy "-D" "ENV{RUNTIMES_x86_64-linux-musl_BUILTINS_TARGET_CMAKE_LDFLAGS}" "$BUILTINS_TARGET_CMAKE_LDFLAGS"
	// log '$BUILTINS_TARGET_CMAKE_LDFLAGS' "$BUILTINS_TARGET_CMAKE_LDFLAGS"

}

compiler_rt_library() {
	# /tmp/root/kiss/objects/llvm/tools/clang/stage2-bins/./lib/clang/18/lib/linux/libclang_rt.builtins-x86_64.a
	COMPILER_RT_LIBRARY_builtins_x86_64-linux-musl:INTERNAL=
}

target_flags_updated "$KISS_ROOT/$PREFIX_HOST" ||
	// builtins_target_flags "$KISS_ROOT/$PREFIX_HOST"

# /usr/bin/ash: eval: /usr/bin/cmake: Argument list too long
runtimes_use_intermediate_flags() {
	_level_2
	# local target="$1"
	# shift 1
	# local toolchain_prefix="$1"
	local toolchain_prefix="$1"
	local target_resource_prefix="$(// delegate to_target_resource_prefix "$toolchain_prefix")"
	local toolchain_version="$(// delegate target_resource_prefix_to_version "$target_resource_prefix")"

	deploy "-D" "LLVM_BUILD_RUNTIMES" "ON"

	# Looks weird, just try it
	# deploy "-D" "COMPILER_RT_STANDALONE_BUILD" "ON"
	# # In tree build (bootstrap build)
	# deploy "-D" "LLVM_RUNTIMES_BUILD" "OFF"

	deploy "-D" "BUILTINS_x86_64-linux-musl_LLVM_BUILD_EXTERNAL_COMPILER_RT" "OFF"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_LLVM_BUILD_EXTERNAL_COMPILER_RT" "OFF"

	deploy "-D" "LLVM_RUNTIMES_BUILD"          "ON"
	deploy "-D" "COMPILER_RT_STANDALONE_BUILD" "OFF"

	deploy "-D" "BUILTINS_x86_64-linux-musl_LLVM_BUILD_TESTS"                   "OFF"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_LLVM_BUILD_TESTS"                   "OFF"
	deploy "-D" "BUILTINS_x86_64-linux-musl_LLVM_INCLUDE_TESTS"                 "ON"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_LLVM_INCLUDE_TESTS"                 "ON"

	deploy "-D" "BUILTINS_x86_64-linux-musl_LLVM_CCACHE_BUILD"           "ON"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_LLVM_CCACHE_BUILD"           "ON"
	deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_C_COMPILER_LAUNCHER"   "ccache"
	deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_CXX_COMPILER_LAUNCHER" "ccache"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_C_COMPILER_LAUNCHER"   "ccache"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_CXX_COMPILER_LAUNCHER" "ccache"

	# deploy "-D" "llvm-min-tblgen_x86_64-linux-musl_CMAKE_POLICY_DEFAULT_CMP0114" "NEW"
	deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_POLICY_DEFAULT_CMP0002:STRING" "NEW"
	deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_POLICY_DEFAULT_CMP0003:STRING" "NEW"
	deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_POLICY_DEFAULT_CMP0056:STRING" "NEW"
	deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_POLICY_DEFAULT_CMP0057:STRING" "NEW"
	deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_POLICY_DEFAULT_CMP0058:STRING" "NEW"
	deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_POLICY_DEFAULT_CMP0011:STRING" "NEW"
	deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_POLICY_DEFAULT_CMP0076:STRING" "NEW"

	deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_POLICY_DEFAULT_CMP0002:STRING" "NEW"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_POLICY_DEFAULT_CMP0003:STRING" "NEW"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_POLICY_DEFAULT_CMP0056:STRING" "NEW"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_POLICY_DEFAULT_CMP0057:STRING" "NEW"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_POLICY_DEFAULT_CMP0058:STRING" "NEW"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_POLICY_DEFAULT_CMP0011:STRING" "NEW"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_POLICY_DEFAULT_CMP0076:STRING" "NEW"

	deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_POLICY_DEFAULT_CMP0114" "NEW"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_POLICY_DEFAULT_CMP0114" "NEW"

	deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_CXX_STANDARD"  "$LLVM_REQUIRED_CXX_STANDARD"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_CXX_STANDARD"  "$LLVM_REQUIRED_CXX_STANDARD"

	deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_INSTALL_LIBDIR"      "lib"
	deploy "-D" "BUILTINS_x86_64-linux-musl_CLANG_DEFAULT_LINKER"      "ld.lld"
	deploy "-D" "BUILTINS_x86_64-linux-musl_CLANG_DEFAULT_RTLIB"       "compiler-rt"
	deploy "-D" "BUILTINS_x86_64-linux-musl_CLANG_DEFAULT_UNWINDLIB"   "libunwind"

	deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_INSTALL_LIBDIR"      "lib"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_CLANG_DEFAULT_LINKER"      "ld.lld"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_CLANG_DEFAULT_RTLIB"       "compiler-rt"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_CLANG_DEFAULT_UNWINDLIB"   "libunwind"

	deploy "-D" "RUNTIMES_x86_64-linux-musl_CXX_SUPPORTS_FNO_EXCEPTIONS_FLAG:INTERNAL" "1"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_CXX_SUPPORTS_FUNWIND_TABLES_FLAG:INTERNAL" "1"

	deploy "-D" "RUNTIMES_x86_64-linux-musl_COMPILER_RT_BUILD_GWP_ASAN"       "OFF"
	deploy "-D" "BUILTINS_x86_64-linux-musl_COMPILER_RT_BUILD_GWP_ASAN"       "OFF"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_COMPILER_RT_BUILD_PROFILE"        "OFF"
	deploy "-D" "BUILTINS_x86_64-linux-musl_COMPILER_RT_BUILD_PROFILE"        "OFF"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_COMPILER_RT_BUILD_SANITIZERS"     "OFF"
	deploy "-D" "BUILTINS_x86_64-linux-musl_COMPILER_RT_BUILD_SANITIZERS"     "OFF"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_COMPILER_RT_BUILD_XRAY"           "OFF"
	deploy "-D" "BUILTINS_x86_64-linux-musl_COMPILER_RT_BUILD_XRAY"           "OFF"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_COMPILER_RT_BUILD_LIBFUZZER"      "OFF"
	deploy "-D" "BUILTINS_x86_64-linux-musl_COMPILER_RT_BUILD_LIBFUZZER"      "OFF"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_COMPILER_RT_BUILD_MEMPROF"        "OFF"
	deploy "-D" "BUILTINS_x86_64-linux-musl_COMPILER_RT_BUILD_MEMPROF"        "OFF"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_COMPILER_RT_BUILD_ORC"            "OFF"
	deploy "-D" "BUILTINS_x86_64-linux-musl_COMPILER_RT_BUILD_ORC"            "OFF"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_COMPILER_RT_ENABLE_CET"           "OFF"
	deploy "-D" "BUILTINS_x86_64-linux-musl_COMPILER_RT_ENABLE_CET"           "OFF"

	deploy "-D" "RUNTIMES_x86_64-linux-musl_COMPILER_RT_BUILD_CRT"            "ON"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_COMPILER_RT_BUILD_BUILTINS"       "OFF"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_CXX_COMPILER_WORKS"         "ON"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_C_COMPILER_WORKS"           "ON"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_ASM_COMPILER_WORKS"         "ON"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBCXXABI_USE_LLVM_UNWINDER"      "ON"

	deploy "-D" "BUILTINS_x86_64-linux-musl_LLVM_LIBGCC_EXPLICIT_OPT_IN"      "ON"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_LLVM_LIBGCC_EXPLICIT_OPT_IN"      "ON"

	deploy "-D" "RUNTIMES_x86_64-linux-musl_COMPILER_RT_USE_BUILTINS_LIBRARY" "ON"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_DEFAULT_COMPILER_RT_USE_BUILTINS_LIBRARY" "ON"

	deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_CXX_COMPILER_WORKS"         "ON"
	deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_C_COMPILER_WORKS"           "ON"
	deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_ASM_COMPILER_WORKS"         "ON"
	deploy "-D" "BUILTINS_x86_64-linux-musl_LIBCXXABI_USE_LLVM_UNWINDER"      "ON"
	deploy "-D" "BUILTINS_x86_64-linux-musl_COMPILER_RT_USE_BUILTINS_LIBRARY" "ON"
	deploy "-D" "BUILTINS_x86_64-linux-musl_DEFAULT_COMPILER_RT_USE_BUILTINS_LIBRARY" "ON"

	deploy "-D" "RUNTIMES_x86_64-linux-musl_LLVM_ENABLE_PER_TARGET_RUNTIME_DIR" "${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default}"
	deploy "-D" "BUILTINS_x86_64-linux-musl_LLVM_ENABLE_PER_TARGET_RUNTIME_DIR" "${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default}"

	# deploy "-D" "BUILTINS_x86_64-linux-musl_LLVM_BINARY_DIR"              "/$PREFIX_HOST"

	deploy "-D" "BUILTINS_x86_64-linux-musl_LIBUNWIND_ENABLE_SHARED"   "ON"
	deploy "-D" "BUILTINS_x86_64-linux-musl_CXX_SUPPORTS_FNO_EXCEPTIONS_FLAG:INTERNAL" "1"
	deploy "-D" "BUILTINS_x86_64-linux-musl_CXX_SUPPORTS_FUNWIND_TABLES_FLAG:INTERNAL" "1"

	deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBUNWIND_ENABLE_SHARED"   "ON"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_CXX_SUPPORTS_FNO_EXCEPTIONS_FLAG:INTERNAL" "1"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_CXX_SUPPORTS_FUNWIND_TABLES_FLAG:INTERNAL" "1"

	deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_C_COMPILER_TARGET" "${LLVM_TARGET_TRIPLE}"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_C_COMPILER_TARGET" "${LLVM_TARGET_TRIPLE}"
	deploy "-D" "BUILTINS_x86_64-linux-musl_LLVM_RUNTIME_TARGETS"    "${LLVM_TARGET_TRIPLE}"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_LLVM_RUNTIME_TARGETS"    "${LLVM_TARGET_TRIPLE}"

	# deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_CXX_COMPILER_ID"    "Clang"
	# deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_CXX_COMPILER_ID"    "Clang"

	deploy "-D" "BUILTINS_x86_64-linux-musl_LLVM_TARGET_TRIPLE"      "${LLVM_TARGET_TRIPLE}"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_LLVM_TARGET_TRIPLE"      "${LLVM_TARGET_TRIPLE}"
	# deploy "-D" "BUILTINS_x86_64-linux-musl_LIBUNWIND_TARGET_TRIPLE" "${LLVM_TARGET_TRIPLE}"
	# deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBUNWIND_TARGET_TRIPLE" "${LLVM_TARGET_TRIPLE}"
	# deploy "-D" "BUILTINS_x86_64-linux-musl_LIBCXXABI_TARGET_TRIPLE" "${LLVM_TARGET_TRIPLE}"
	# deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBCXXABI_TARGET_TRIPLE" "${LLVM_TARGET_TRIPLE}"
	deploy "-D" "BUILTINS_x86_64-linux-musl_LLVM_TARGET_TRIPLE_ENV"  "${LLVM_TARGET_TRIPLE}"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_LLVM_TARGET_TRIPLE_ENV"  "${LLVM_TARGET_TRIPLE}"

	deploy "-D" "BUILTINS_x86_64-linux-musl_LLVM_BUILD_RUNTIMES" "ON"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_LLVM_BUILD_RUNTIMES" "ON"

	# Looks weird, just try it
	# deploy "-D" "BUILTINS_x86_64-linux-musl_LLVM_RUNTIMES_BUILD" "OFF"
	deploy "-D" "BUILTINS_x86_64-linux-musl_LLVM_RUNTIMES_BUILD" "ON"
	# deploy "-D" "BUILTINS_x86_64-linux-musl_COMPILER_RT_STANDALONE_BUILD" "ON"
	deploy "-D" "BUILTINS_x86_64-linux-musl_COMPILER_RT_STANDALONE_BUILD" "OFF"

	# deploy "-D" "RUNTIMES_x86_64-linux-musl_LLVM_RUNTIMES_BUILD" "OFF"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_LLVM_RUNTIMES_BUILD" "ON"
	# deploy "-D" "BUILTINS_x86_64-linux-musl_COMPILER_RT_STANDALONE_BUILD" "ON"
	deploy "-D" "BUILTINS_x86_64-linux-musl_COMPILER_RT_STANDALONE_BUILD" "OFF"

	deploy "-D" "BUILTINS_x86_64-linux-musl_RUNTIMES_BUILD_BUILTINS" "ON"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_RUNTIMES_BUILD_BUILTINS" "ON"

	# deploy "-D" "BUILTINS_x86_64-linux-musl_CLANG_RESOURCE_DIR:STRING" "../lib/clang/$toolchain_version"
	# deploy "-D" "RUNTIMES_x86_64-linux-musl_CLANG_RESOURCE_DIR:STRING" "../lib/clang/$toolchain_version"

	deploy "-D" "BUILTINS_x86_64-linux-musl_CLANG_RESOURCE_DIR:STRING" "../lib/clang/$version_target"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_CLANG_RESOURCE_DIR:STRING" "../lib/clang/$version_target"

	# deploy "-D" "BUILTINS_x86_64-linux-musl_COMPILER_RESOURCE_DIR:STRING" "$RESOURCE_DIR_HOST"
	# deploy "-D" "RUNTIMES_x86_64-linux-musl_COMPILER_RESOURCE_DIR:STRING" "$RESOURCE_DIR_HOST"

	# deploy "-D" "BUILTINS_x86_64-linux-musl_COMPILER_RESOURCE_DIR:STRING" "$DESTDIR/$PREFIX_HOST/lib/clang/$toolchain_version"
	# deploy "-D" "RUNTIMES_x86_64-linux-musl_COMPILER_RESOURCE_DIR:STRING" "$DESTDIR/$PREFIX_HOST/lib/clang/$toolchain_version"

	deploy "-D" "BUILTINS_x86_64-linux-musl_COMPILER_RESOURCE_DIR:STRING" "$DESTDIR/$PREFIX_HOST/lib/clang/$version_target"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_COMPILER_RESOURCE_DIR:STRING" "$DESTDIR/$PREFIX_HOST/lib/clang/$version_target"

	# Conflicts with _LIBCPP_HAS_MUSL_LIBC
	# deploy "-D" "BUILTINS_x86_64-linux-musl_LIBCXX_ENABLE_WIDE_CHARACTERS" "OFF"
	# deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBCXX_ENABLE_WIDE_CHARACTERS" "OFF"

	deploy "-D" "BUILTINS_x86_64-linux-musl_COMPILER_RT_BUILD_BUILTINS" "OFF"

	# Disable libgcc_s
	deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBUNWIND_USE_COMPILER_RT" "ON"
	# Disable libgcc_s deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBCXXABI_USE_COMPILER_RT" "ON" # Disable libgcc_s deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBCXX_USE_COMPILER_RT"    "ON" deploy "-D" "BUILTINS_x86_64-linux-musl_LLVM_ENABLE_BACKTRACES"      "ON" deploy "-D" "BUILTINS_x86_64-linux-musl_Backtrace_INCLUDE_DIR"       "$KISS_ROOT/$PREFIX_HOST/include" deploy "-D" "BUILTINS_x86_64-linux-musl_Backtrace_LIBRARY"           "$KISS_ROOT/$PREFIX_HOST/lib/libexecinfo.so" deploy "-D" "BUILTINS_x86_64-linux-musl_ICONV_LIBRARY_PATH"          "$KISS_ROOT/$PREFIX_HOST/lib/libc.so" deploy "-D" "BUILTINS_x86_64-linux-musl_COMPILER_RT_HAS_LIBEXECINFO" "ON"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_LLVM_ENABLE_BACKTRACES"      "ON"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_Backtrace_INCLUDE_DIR"       "$KISS_ROOT/$PREFIX_HOST/include"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_Backtrace_LIBRARY"           "$KISS_ROOT/$PREFIX_HOST/lib/libexecinfo.so"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_ICONV_LIBRARY_PATH"          "$KISS_ROOT/$PREFIX_HOST/lib/libc.so"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_COMPILER_RT_HAS_LIBEXECINFO" "ON"

	# COMPILER_RT_DEFAULT_TARGET_ONLY is deduced somewhare, look into
	# llvm/runtimes/CMakeLists.txt
	# compiler-rt/cmake/Modules/CompilerRTUtils.cmake
	deploy "-D" "RUNTIMES_x86_64-linux-musl_COMPILER_RT_DEFAULT_TARGET_TRIPLE" "\${LLVM_TARGET_TRIPLE}"
	deploy "-D" "BUILTINS_x86_64-linux-musl_COMPILER_RT_DEFAULT_TARGET_TRIPLE" "\${LLVM_TARGET_TRIPLE}"

	deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_BUILD_TYPE" "Release"
	deploy "-D" "BUILTINS_x86_64-linux-musl_LLVM_ENABLE_PER_TARGET_RUNTIME_DIR" \
		"${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default}"

	deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_BUILD_TYPE" "Release"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_LLVM_ENABLE_PER_TARGET_RUNTIME_DIR" \
		"${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default}"


	deploy "-D" "BUILTINS_x86_64-linux-musl_LIBUNWIND_ENABLE_SHARED"   "ON"
	deploy "-D" "BUILTINS_x86_64-linux-musl_CXX_SUPPORTS_FNO_EXCEPTIONS_FLAG:INTERNAL" "1"
	deploy "-D" "BUILTINS_x86_64-linux-musl_CXX_SUPPORTS_FUNWIND_TABLES_FLAG:INTERNAL" "1"

	deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBUNWIND_ENABLE_SHARED"   "ON"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_CXX_SUPPORTS_FNO_EXCEPTIONS_FLAG:INTERNAL" "1"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_CXX_SUPPORTS_FUNWIND_TABLES_FLAG:INTERNAL" "1"


	# local target_resource_prefix="$toolchain_prefix"
	# [ "$toolchain_prefix" != "/$PREFIX_HOST" ] ||
	#   target_resource_prefix="$KISS_ROOT/$PREFIX_HOST"

	target_flags_updated "$target_resource_prefix" ||
		// builtins_target_flags "$target_resource_prefix"

	# deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_CXX_FLAGS" \
	# "-isystem $KISS_ROOT/$PREFIX_HOST/include/c++/v1 \$CMAKE_CXX_FLAGS"


	# deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_C_FLAGS"   "\$ENV{BUILTINS_TARGET_CMAKE_C_FLAGS}"
	deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_C_FLAGS"   "$BUILTINS_TARGET_CMAKE_C_FLAGS"

	deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_CXX_FLAGS" \
		"-isystem $DESTDIR/$PREFIX_HOST/include/c++/v1 $BUILTINS_TARGET_CMAKE_CXX_FLAGS"
		# "-isystem $DESTDIR/$PREFIX_HOST/include/c++/v1 \$ENV{BUILTINS_TARGET_CMAKE_CXX_FLAGS}"


	# deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_EXE_LINKER_FLAGS"    "\$ENV{BUILTINS_TARGET_CMAKE_LDFLAGS}"
	# deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_SHARED_LINKER_FLAGS" "\$ENV{BUILTINS_TARGET_CMAKE_LDFLAGS}"
	# deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_MODULE_LINKER_FLAGS" "\$ENV{BUILTINS_TARGET_CMAKE_LDFLAGS}"

	deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_EXE_LINKER_FLAGS"    "$BUILTINS_TARGET_CMAKE_LDFLAGS"
	deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_SHARED_LINKER_FLAGS" "$BUILTINS_TARGET_CMAKE_LDFLAGS"
	deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_MODULE_LINKER_FLAGS" "$BUILTINS_TARGET_CMAKE_LDFLAGS"

	# deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_C_FLAGS"   "\$ENV{BUILTINS_TARGET_CMAKE_C_FLAGS}"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_C_FLAGS"   "$BUILTINS_TARGET_CMAKE_C_FLAGS"
	# No, no "-isystem $DESTDIR/$PREFIX_HOST/include/c++/v1" here
	# deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_CXX_FLAGS" "\$ENV{BUILTINS_TARGET_CMAKE_CXX_FLAGS}"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_CXX_FLAGS" "$BUILTINS_TARGET_CMAKE_CXX_FLAGS"

	# deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_EXE_LINKER_FLAGS"    "\$ENV{BUILTINS_TARGET_CMAKE_LDFLAGS}"
	# deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_SHARED_LINKER_FLAGS" "\$ENV{BUILTINS_TARGET_CMAKE_LDFLAGS}"
	# deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_MODULE_LINKER_FLAGS" "\$ENV{BUILTINS_TARGET_CMAKE_LDFLAGS}"

	deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_EXE_LINKER_FLAGS"    "$BUILTINS_TARGET_CMAKE_LDFLAGS"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_SHARED_LINKER_FLAGS" "$BUILTINS_TARGET_CMAKE_LDFLAGS"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_MODULE_LINKER_FLAGS" "$BUILTINS_TARGET_CMAKE_LDFLAGS"

	#   deploy "-D" "CMAKE_ARGS" " \
	# -DLLVM_TARGET_TRIPLE=\${LLVM_TARGET_TRIPLE}; \
	# -DCMAKE_C_FLAGS=\${BUILTINS_TARGET_CMAKE_C_FLAGS} -fstack-protector-strong -Wformat \
	# -Werror=format-security -Wno-unused-command-line-argument -Wdate-time -D_FORTIFY_SOURCE=2; \
	# -DCMAKE_CXX_FLAGS=\${BUILTINS_TARGET_CMAKE_CXX_FLAGS} -fstack-protector-strong -Wformat \
	# -Werror=format-security -Wno-unused-command-line-argument -Wdate-time -D_FORTIFY_SOURCE=2; \
	# -DCMAKE_EXE_LINKER_FLAGS=\${LDFLAGS}; \
	# -DCMAKE_SHARED_LINKER_FLAGS=\${LDFLAGS}; \
	# -DCMAKE_MODULE_LINKER_FLAGS=\${LDFLAGS}; \
	# -DCMAKE_BUILD_TYPE=Release; \
	# -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=\${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default} \
	# "

	#   deploy "-D" "CMAKE_ARGS" " \
	# -DLLVM_TARGET_TRIPLE=\${LLVM_TARGET_TRIPLE}; \
	# -DCMAKE_C_FLAGS=\${BUILTINS_TARGET_CMAKE_C_FLAGS}; \
	# -DCMAKE_CXX_FLAGS=\${BUILTINS_TARGET_CMAKE_CXX_FLAGS}; \
	# -DCMAKE_EXE_LINKER_FLAGS=\${LDFLAGS}; \
	# -DCMAKE_SHARED_LINKER_FLAGS=\${LDFLAGS}; \
	# -DCMAKE_MODULE_LINKER_FLAGS=\${LDFLAGS}; \
	# -DCMAKE_BUILD_TYPE=Release; \
	# -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=\${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default} \
	# "

	# // cue '$CMAKE_ARGS' "$CMAKE_ARGS"
	# deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_ARGS" "\${CMAKE_ARGS}"
	# deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_ARGS" "\${CMAKE_ARGS}"

	# # deploy "-D" "LIBUNWIND_LINK_FLAGS" "$LDFLAGS -Wl,-z,relro -Wl,--build-id"
	# deploy "-D" "LIBUNWIND_LINK_FLAGS" "$LDFLAGS"

	# // cue '$BUILTINS_TARGET_CMAKE_C_FLAGS'    "$BUILTINS_TARGET_CMAKE_C_FLAGS"
	# // cue '$BUILTINS_TARGET_CMAKE_CXX_FLAGS'  "$BUILTINS_TARGET_CMAKE_CXX_FLAGS"
	# // cue '$LIBUNWIND_LINK_FLAGS' "$LIBUNWIND_LINK_FLAGS"

	# deploy "-D" "LIBUNWIND_C_FLAGS:STRING"   "\${BUILTINS_TARGET_CMAKE_C_FLAGS}"
	# deploy "-D" "LIBUNWIND_CXX_FLAGS:STRING" "\${BUILTINS_TARGET_CMAKE_CXX_FLAGS}"
	# deploy "-D" "LIBUNWIND_CPP_FLAGS:STRING"         "\${LIBUNWIND_CXX_FLAGS}"
	# deploy "-D" "LIBUNWIND_COMPILE_FLAGS:STRING"     "\${LIBUNWIND_CXX_FLAGS}"
	# # deploy "-D" "LIBUNWIND_ADDITIONAL_COMPILE_FLAGS" "\${LIBUNWIND_CXX_FLAGS}"

	# deploy "-D" "LIBCXXABI_C_FLAGS:STRING"           "\${LIBUNWIND_C_FLAGS}"
	# deploy "-D" "LIBCXXABI_CXX_FLAGS:STRING"         "\${LIBUNWIND_CXX_FLAGS}"
	# deploy "-D" "LIBCXXABI_CPP_FLAGS:STRING"         "\${LIBUNWIND_CXX_FLAGS}"
	# deploy "-D" "LIBCXXABI_COMPILE_FLAGS:STRING"     "\${LIBUNWIND_CXX_FLAGS}"
	# deploy "-D" "LIBCXXABI_LINK_FLAGS"               "\${LIBUNWIND_LINK_FLAGS}"
	# # deploy "-D" "LIBCXXABI_ADDITIONAL_COMPILE_FLAGS" "\${LIBUNWIND_CXX_FLAGS}"

	# deploy "-D" "LIBCXX_C_FLAGS:STRING"              "\${LIBUNWIND_C_FLAGS}"
	# deploy "-D" "LIBCXX_CXX_FLAGS:STRING"            "\${LIBUNWIND_CXX_FLAGS}"
	# deploy "-D" "LIBCXX_CPP_FLAGS:STRING"            "\${LIBUNWIND_CXX_FLAGS}"
	# deploy "-D" "LIBCXX_COMPILE_FLAGS:STRING"        "\${LIBUNWIND_CXX_FLAGS}"
	# deploy "-D" "LIBCXX_LINK_FLAGS"                  "\${LIBUNWIND_LINK_FLAGS}"
	# # deploy "-D" "LIBCXX_ADDITIONAL_COMPILE_FLAGS"    "\${LIBUNWIND_CXX_FLAGS}"
	#
	# /usr/bin/ash: eval: syntax error: bad substitution
	# deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBOMP_CFLAGS" "\${$BUILTINS_TARGET_CMAKE_C_FLAGS}"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBOMP_CFLAGS" "\${BUILTINS_TARGET_CMAKE_C_FLAGS}"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBOMP_CXXFLAGS" \
		"-isystem $DESTDIR/$PREFIX_HOST/include/c++/v1 $BUILTINS_TARGET_CMAKE_CXX_FLAGS"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBOMP_CPPFLAGS" \
		"-isystem $DESTDIR/$PREFIX_HOST/include/c++/v1 $BUILTINS_TARGET_CMAKE_CXX_FLAGS"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBOMP_LDFLAGS" "\${BUILTINS_TARGET_CMAKE_LDFLAGS}"

	# /usr/bin/ash: eval: syntax error: bad substitution
	# deploy "-D" "BUILTINS_x86_64-linux-musl_LIBOMP_CFLAGS" "\${$BUILTINS_TARGET_CMAKE_C_FLAGS}"
	deploy "-D" "BUILTINS_x86_64-linux-musl_LIBOMP_CFLAGS" "\${BUILTINS_TARGET_CMAKE_C_FLAGS}"
	deploy "-D" "BUILTINS_x86_64-linux-musl_LIBOMP_CXXFLAGS" \
		"-isystem $DESTDIR/$PREFIX_HOST/include/c++/v1 $BUILTINS_TARGET_CMAKE_CXX_FLAGS"
	deploy "-D" "BUILTINS_x86_64-linux-musl_LIBOMP_CPPFLAGS" \
		"-isystem $DESTDIR/$PREFIX_HOST/include/c++/v1 $BUILTINS_TARGET_CMAKE_CXX_FLAGS"
	deploy "-D" "BUILTINS_x86_64-linux-musl_LIBOMP_LDFLAGS" "\${BUILTINS_TARGET_CMAKE_LDFLAGS}"


	# # This setting will disable clang from being built
	# # set(CMAKE_TRY_COMPILE_TARGET_TYPE "STATIC_LIBRARY" CACHE STRING "")

	# # deploy "-D" "RUNTIMES_x86_64-linux-musl_LLVM_BINARY_DIR"                 "/$PREFIX_HOST"

	# deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBUNWIND_CFLAGS:STRING"            "\${LIBUNWIND_C_FLAGS}"
	# deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBUNWIND_CPPFLAGS:STRING"          "\${LIBUNWIND_CXX_FLAGS}"
	# deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBUNWIND_CXXFLAGS:STRING"          "\${LIBUNWIND_CXX_FLAGS}"
	# deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBUNWIND_COMPILE_FLAGS:STRING"     "\${LIBUNWIND_CXX_FLAGS}"
	# # deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBUNWIND_ADDITIONAL_COMPILE_FLAGS" "\${LIBUNWIND_CXX_FLAGS}"
	# deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBUNWIND_LINK_FLAGS"               "\${LIBUNWIND_LINK_FLAGS}"

	# deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBCXXABI_CFLAGS:STRING"            "\${LIBUNWIND_C_FLAGS}"
	# deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBCXXABI_CPPFLAGS:STRING"          "\${LIBUNWIND_CXX_FLAGS}"
	# deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBCXXABI_CXXFLAGS:STRING"          "\${LIBUNWIND_CXX_FLAGS}"
	# deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBCXXABI_COMPILE_FLAGS:STRING"     "\${LIBUNWIND_CXX_FLAGS}"
	# # deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBCXXABI_ADDITIONAL_COMPILE_FLAGS" "\${LIBUNWIND_CXX_FLAGS}"
	# deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBCXXABI_LINK_FLAGS"               "\${LIBUNWIND_LINK_FLAGS}"

	# deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBCXX_CFLAGS:STRING"               "\${LIBUNWIND_C_FLAGS}"
	# deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBCXX_CPPFLAGS:STRING"             "\${LIBUNWIND_CXX_FLAGS}"
	# deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBCXX_CXXFLAGS:STRING"             "\${LIBUNWIND_CXX_FLAGS}"
	# deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBCXX_COMPILE_FLAGS:STRING"        "\${LIBUNWIND_CXX_FLAGS}"
	# # deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBCXX_ADDITIONAL_COMPILE_FLAGS"    "\${LIBUNWIND_CXX_FLAGS}"
	# deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBCXX_LINK_FLAGS"                  "\${LIBUNWIND_LINK_FLAGS}"

	# deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBOMP_CFLAGS:STRING"               "\${LIBUNWIND_C_FLAGS}"
	# deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBOMP_CPPFLAGS:STRING"             "\${LIBUNWIND_CXX_FLAGS}"
	# deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBOMP_CXXFLAGS:STRING"             "\${LIBUNWIND_CXX_FLAGS}"
	# deploy "-D" "RUNTIMES_x86_64-linux-musl_LIBOMP_COMPILE_FLAGS:STRING"        "\${LIBUNWIND_CXX_FLAGS}"

}

runtimes_use_intermediate() {
	_level_2
	local toolchain_prefix="$1"

	deploy "-D" "CMAKE_TOOLCHAIN_PREFIX" "$toolchain_prefix"

	# deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_LINKER:FILEPATH"        "$DESTDIR/$PREFIX_HOST/bin/lld"
	# deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_LINK_EXECUTABLE"        "$DESTDIR/$PREFIX_HOST/bin/lld"
	# deploy "-D" "RUNTIMES_x86_64-linux-musl_CLANG_DEFAULT_LINKER"         "ld.lld"
	# For llvm-config
	# runtimes_dir: "$DESTDIR/$PREFIX_HOST/lib/clang/$version_target/lib/x86_64-linux-musl"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_C_COMPILER:FILEPATH"   "$toolchain_prefix/bin/clang"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_CXX_COMPILER:FILEPATH" "$toolchain_prefix/bin/clang++"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_ASM_COMPILER:FILEPATH" "$toolchain_prefix/bin/clang"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_AR"                    "$toolchain_prefix/bin/llvm-ar"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_AS"                    "$toolchain_prefix/bin/llvm-as"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_LINKER"                "$toolchain_prefix/bin/ld.lld"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_LLVM_CONFIG_PATH"            "$toolchain_prefix/bin/llvm-config"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_LLVM_CMAKE_DIR"              "$toolchain_prefix/lib/cmake/llvm"

	deploy "-D" "RUNTIMES_x86_64-linux-musl_CMAKE_TOOLCHAIN_PREFIX" "$toolchain_prefix"
	deploy "-D" "RUNTIMES_x86_64-linux-musl_LLVM_ENABLE_LLD" "ON"

	deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_C_COMPILER:FILEPATH"   "$toolchain_prefix/bin/clang"
	deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_CXX_COMPILER:FILEPATH" "$toolchain_prefix/bin/clang++"
	deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_ASM_COMPILER:FILEPATH" "$toolchain_prefix/bin/clang"
	deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_AR"                    "$toolchain_prefix/bin/llvm-ar"
	deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_AS"                    "$toolchain_prefix/bin/llvm-as"
	deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_LINKER"                "$toolchain_prefix/bin/ld.lld"
	deploy "-D" "BUILTINS_x86_64-linux-musl_LLVM_CONFIG_PATH"            "$toolchain_prefix/bin/llvm-config"
	deploy "-D" "BUILTINS_x86_64-linux-musl_LLVM_CMAKE_DIR"              "$toolchain_prefix/lib/cmake/llvm"

	deploy "-D" "BUILTINS_x86_64-linux-musl_CMAKE_TOOLCHAIN_PREFIX" "$toolchain_prefix"
	deploy "-D" "BUILTINS_x86_64-linux-musl_LLVM_ENABLE_LLD" "ON"

}


# echo "Building for: $TARGET_ARCH"
// log '$TARGET_ARCH' "$TARGET_ARCH"
# echo "Building runtimes: $runtimes"
// log '$runtimes' "$runtimes"

# [ -z "$1" ] || [ -z "$2" ] ||
prepare() {
	_level_2
	# default_prepare

	# \rm -rf "llvm-libgcc"

	cd "$MAKE_DIR/llvm"

	\rm -rf "tools/gold"
	\rm -rf "test/tools/gold"

	# Known broken test on musl
	rm -v test/CodeGen/AArch64/wineh4.mir
	# https://github.com/llvm/llvm-project/issues/47657
	rm -v test/ExecutionEngine/Interpreter/intrinsics.ll

	case "$CARCH" in
	x86)
		rm -v test/Object/macho-invalid.test \
			test/tools/llvm-size/radix.test \
			unittests/Support/JSONTest.cpp
		sed -i "/JSONTest.cpp/d" \
			unittests/Support/CMakeLists.txt
		;;
	arm*)
		rm -v test/tools/llvm-readobj/ELF/dependent-libraries.test \
			test/Object/macho-invalid.test \
			test/tools/llvm-size/radix.test \
			test/tools/gold/X86/split-dwarf.ll \
			test/ExecutionEngine/frem.ll \
			test/tools/llvm-dwarfdump/X86/prettyprint_types.s \
			test/tools/llvm-dwarfdump/X86/simplified-template-names.s \
			unittests/ExecutionEngine/Orc/OrcCAPITest.cpp \
			test/CodeGen/RISCV/rv32zbp.ll \
			test/CodeGen/RISCV/rv64zbp.ll
		sed -i "/OrcCAPITest.cpp/d" \
			unittests/ExecutionEngine/Orc/CMakeLists.txt
		;;
	esac

	# Known broken codegen for Hexagon target, reported upstream.
	# https://github.com/llvm/llvm-project/issues/48936
	rm -v \
		test/CodeGen/Hexagon/csr-stubs-spill-threshold.ll \
		test/CodeGen/Hexagon/long-calls.ll \
		test/CodeGen/Hexagon/mlong-calls.ll \
		test/CodeGen/Hexagon/pic-regusage.ll \
		test/CodeGen/Hexagon/runtime-stkchk.ll \
		test/CodeGen/Hexagon/swp-memrefs-epilog.ll \
		test/CodeGen/Hexagon/vararg-formal.ll \
		test/tools/llvm-objcopy/MachO/universal-object.test \
		test/DebugInfo/X86/vla-multi.ll
	cd "$MAKE_DIR"
}
[ -z "$1" ] || [ -z "$2" ] ||
// prepare 2>&1 || kill 0

source_dir() {
	local source=
	# LLVM_SOURCE_DIR:STATIC=/tmp/$LOGNAME/kiss/proc/make/llvm/llvm
	source="$(grep LLVM_SOURCE_DIR "$OUTPUT_DIR/CMakeCache.txt" 2> /dev/null |
		awk -F = "{print \$2}")" 2> /dev/null || :
	printf '\n%s' "${source##*/}"
}

clean_objects() {
	# [ "$(// delegate -- source_dir)" = "$1" ] &&
	#   find "$OUTPUT_DIR" -type f -name CMakeCache.txt -delete ||
	find "$OUTPUT_DIR" \( -type f -o -type l \) -exec \rm -f "{}" +
	# find "$OUTPUT_DIR" -mindepth 1 -maxdepth 1 -exec \rm -rf {} +
}

fix_builtins() {
	# x86_64
	local libname="$1"

	local source_path="$2"
	# $DESTDIR/$PREFIX_HOST/lib/clang/$version_target_major/lib/$LLVM_DEFAULT_TARGET_TRIPLE
	local lib_dir="${source_path%/${LLVM_DEFAULT_TARGET_TRIPLE}/*}"

	# libclang_rt.builtins.a
	local source_name="${source_path##*/}"
	# libclang_rt.builtins
	local file_name="${source_name%.*}"
	# a
	local file_suffix="${source_name##*.}"
	# libclang_rt.builtins-x86_64
	local file_name_with_arch="$file_name-$libname"
	# libclang_rt.builtins-x86_64.a
	local target_name="$file_name_with_arch.$file_suffix"


	cd "${lib_dir}"
	[ -d "linux" ] || \mkdir "linux"
	cd "linux"

	local real_target=
	[ ! -L "$target_name" ] ||
	real_target="$(readlink -f "$target_name" 2> /dev/nll)" ||
		// die '$real_target' "'$real_target' does not exist"

	local real_source=
	[ ! -f "../$KISS_XHOST_TRIPLE/$source_name" ] ||
	real_source="$(readlink -f "../$KISS_XHOST_TRIPLE/$source_name" 2> /dev/nll)" ||
		// die '$real_source' "'$real_source' does not exist"

	[ ! -f "../$KISS_XHOST_TRIPLE/$source_name" ] || {
		{
			[ -L "$target_name" ] &&
			[ "$real_target" = "$real_source" ]
		} ||
		[ -f "$target_name" ]
	} || {
		[ -L "$target_name" ] && \rm -f "$target_name"
		\ln -sf "../$KISS_XHOST_TRIPLE/$source_name" "$target_name"
	}

	cd "$MAKE_DIR"
}

install_clang_libs() {
	_level_2
	local shared_libs="\
libLLVMAMDGPUCodeGen.so.18git \
libLLVMAMDGPUAsmParser.so.18git \
libLLVMAMDGPUDisassembler.so.18git \
libLLVMX86CodeGen.so.18git \
libLLVMX86AsmParser.so.18git \
libLLVMX86Desc.so.18git \
libLLVMX86Disassembler.so.18git \
libLLVMX86Info.so.18git \
libclangFrontendTool.so.18git \
libLLVMAMDGPUDesc.so.18git \
libLLVMAMDGPUInfo.so.18git \
libLLVMAMDGPUUtils.so.18git \
libclangCodeGen.so.18git \
libLLVMCodeGen.so.18git \
libLLVMObjCARCOpts.so.18git \
libLLVMipo.so.18git \
libLLVMInstrumentation.so.18git \
libLLVMVectorize.so.18git \
libclangFrontend.so.18git \
libclangDriver.so.18git \
libLLVMOption.so.18git \
libclangSerialization.so.18git \
libLLVMScalarOpts.so.18git \
libLLVMAggressiveInstCombine.so.18git \
libLLVMInstCombine.so.18git \
libLLVMTransformUtils.so.18git \
libLLVMAnalysis.so.18git \
libLLVMMCParser.so.18git \
libLLVMMC.so.18git \
libLLVMCore.so.18git \
libclangBasic.so.18git \
libLLVMTargetParser.so.18git \
libLLVMSupport.so.18git \
"
	local lib_name
	local lib_index=0
	# for lib in $(find "$OUTPUT_DIR/lib" -type f -name "*.so.*"); do
	for lib_name in $shared_libs; do
		[ ! -f "$OUTPUT_DIR/lib/$lib_name" ] || {
			: $((lib_index += 1))
			local index_str="$lib_index"
			[ "$lib_index" -ge 10 ] || index_str=0"$lib_index"
			// log '$lib_name' "[ $index_str ] '$OUTPUT_DIR/lib/$lib_name' successfully generated"
			[ -f "$DESTDIR/$PREFIX_HOST/lib/$lib_name" ] || \cp -f "$OUTPUT_DIR/lib/$lib_name" "$DESTDIR/$PREFIX_HOST/lib/"
		}
	done
	local dir_name
	[ -d "$DESTDIR/$PREFIX_HOST/lib" ] || \mkdir -p "$DESTDIR/$PREFIX_HOST/lib"
	[ ! -z "${LLVM_TARGET_TRIPLE:+x}" ] || // die '$LLVM_TARGET_TRIPLE' "$LLVM_TARGET_TRIPLE"
	# for dir_name in clang cmake libear libscanbuild linux x86_64-linux-musl; do
	for dir_name in clang cmake libear libscanbuild linux "$LLVM_TARGET_TRIPLE"; do
		[ ! -d "$OUTPUT_DIR/lib/$dir_name" ] || {
			rsync -aqz "$OUTPUT_DIR/lib/$dir_name" "$DESTDIR/$PREFIX_HOST/lib/"
		}
	done
	find "$OUTPUT_DIR/lib" -maxdepth 1 \( -type f -o -type l \) -exec rsync -aq "{}" "$DESTDIR/$PREFIX_HOST/lib/" +
	sync
}

fix_clang_libs_folder_name() {
	_level_2
	local resource_dir_root="$1"
	# cd "$DESTDIR/$PREFIX_HOST/lib/clang"
	cd "$resource_dir_root"
	[ -L "$version_target" ] &&
		[ "$(readlink -f "$version_target")" = "$(readlink -f "$version_target_major")" ] || {
		[ ! -L "$version_target" ] || \rm -f "$version_target"
		[ -d "$version_target" ] && {
			[ ! -d "$version_target_major" ] || {
				rsync -aqz --remove-source-files "$version_target_major/." \
				"$version_target/"
				\rm -rf "$version_target_major"
			}
		} ||
			\ln -sf "$version_target_major" "$version_target"
	}
}

# Original
# build_llvm_individually() {
#   _level_2
#   // log 'cmake' "clear cache"
#   clean_objects "llvm"
#   // cue 'llvm' "configuration and generation"
#
#   cmake -B "$OUTPUT_DIR" \
#       -DCMAKE_INSTALL_PREFIX=/usr \
#       -DCMAKE_BUILD_TYPE=Release \
#       -DLLVM_BUILD_LLVM_DYLIB=OFF \
#       -DLLVM_LINK_LLVM_DYLIB=OFF \
#       -DLLVM_TARGETS_TO_BUILD="host" \
#       -DLLVM_ENABLE_RTTI=ON \
#       -DLLVM_HOST_TRIPLE="$(cc -dumpmachine)" \
#       -DLLVM_BUILD_EXAMPLES=OFF \
#       -DLLVM_BUILD_DOCS=OFF \
#       -DLLVM_BUILD_TESTS=OFF \
#       -DLLVM_ENABLE_TERMINFO=OFF \
#       -DLLVM_ENABLE_LIBXML2=OFF \
#       -DLLVM_ENABLE_LIBEDIT=OFF \
#       -Wno-dev -S "$MAKE_DIR/llvm"
#
#   cmake --build "$OUTPUT_DIR"
#   cmake --install "$OUTPUT_DIR"
# }

# true ||
build_llvm_individually() {
	_level_2
	// log 'cmake' "clear cache"
	clean_objects "llvm"
	// cue 'llvm' "configuration and generation"

	cmake -G Ninja -B "$OUTPUT_DIR" \
		-D LLVM_CCACHE_BUILD=ON \
		-D CMAKE_INSTALL_PREFIX=/usr \
		-D CMAKE_BUILD_TYPE=Release \
		-D CMAKE_TOOLCHAIN_FILE="$cmake_config" \
		-D LLVM_BUILD_LLVM_DYLIB=OFF \
		-D LLVM_LINK_LLVM_DYLIB=OFF \
		-D LLVM_TARGETS_TO_BUILD="host" \
		-D CMAKE_CXX_STANDARD="$LLVM_REQUIRED_CXX_STANDARD" \
		-D LLVM_ENABLE_RTTI=ON \
		-D LLVM_HAS_ATOMICS=ON \
		-D LLVM_HOST_TRIPLE="$(cc -dumpmachine)" \
		-D LLVM_BUILD_EXAMPLES=OFF \
		-D LLVM_BUILD_DOCS=OFF \
		-D LLVM_BUILD_TESTS=OFF \
		-D LLVM_ENABLE_TERMINFO=ON \
		-D LLVM_ENABLE_LIBXML2=OFF \
		-D LLVM_ENABLE_LIBEDIT=OFF \
		-D LLVM_INCLUDE_TESTS=ON \
		-D LLVM_INCLUDE_BENCHMARKS=OFF \
		-D LLVM_BUILD_BENCHMARKS=OFF \
		-D LLVM_NATIVE_TOOL_DIR=/usr/bin \
		-D HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1 \
		-D HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1 \
		-D CMAKE_CROSSCOMPILING=ON \
		-D CMAKE_POSITION_INDEPENDENT_CODE=ON \
		-D CMAKE_CXX_STANDARD="$LLVM_REQUIRED_CXX_STANDARD" \
		-D CMAKE_CXX_FLAGS="-D _LIBCPP_PSTL_CPU_BACKEND_THREAD \
-isystem $KISS_ROOT/$PREFIX_HOST/include/c++/v1 \
-isystem $KISS_ROOT/$PREFIX_HOST/include $cxxflags" \
		-D CMAKE_C_FLAGS="-isystem $KISS_ROOT/$PREFIX_HOST/include $cflags" \
		-D CMAKE_EXE_LINKER_FLAGS="-resource-dir=$RESOURCE_DIR_HOST \
-L $RESOURCE_DIR_HOST/lib/linux \
-L $LLVM_TOOLCHAIN_LIB_DIR_HOST \
$ldflags \
-Wl,-rpath-link $LLVM_TOOLCHAIN_LIB_DIR_HOST \
" \
		-D CMAKE_SHARED_LINKER_FLAGS="-resource-dir=$RESOURCE_DIR_HOST \
-L $RESOURCE_DIR_HOST/lib/linux \
-L $LLVM_TOOLCHAIN_LIB_DIR_HOST \
$ldflags \
-Wl,-rpath-link $LLVM_TOOLCHAIN_LIB_DIR_HOST \
" \
		-D CMAKE_MODULE_LINKER_FLAGS="-resource-dir=$RESOURCE_DIR_HOST \
-L $RESOURCE_DIR_HOST/lib/linux \
-L $LLVM_TOOLCHAIN_LIB_DIR_HOST \
$ldflags \
-Wl,-rpath-link $LLVM_TOOLCHAIN_LIB_DIR_HOST \
" \
		-D CMAKE_C_COMPILER_WORKS=ON \
		-D CMAKE_CXX_COMPILER_WORKS=ON \
		-D CMAKE_ASM_COMPILER_WORKS=ON \
		-D LLVM_NATIVE_TARGET:STRING=$KISS_XHOST_TRIPLE \
		-D COMPILER_RT_EXCLUDE_ATOMIC_BUILTIN=ON \
		-D HAVE_CXX_ATOMICS_WITH_LIB:INTERNAL=0 \
		-D HAVE_CXX_LIBATOMICS64:INTERNAL=0 \
		-D HAVE_LIBATOMIC:INTERNAL=0 \
		-D LIBCXX_HAS_ATOMIC_LIB:INTERNAL=0 \
		-D _LIBCPP_ATOMIC_ONLY_USE_BUILTINS=ON \
		-D LIBCXX_HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1 \
		-D LIBCXX_HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1 \
		-D LLVM_COMPILER_IS_GCC_COMPATIBLE=OFF \
		-W no-dev -S "$MAKE_DIR/llvm" > /dev/null || kill 0

		# -D _LIBCPP_ATOMIC_ONLY_USE_BUILTINS=ON \
		# -D LIBCXX_HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1 \
		# -D LIBCXX_HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1 \
		# -D LIBCXX_HAS_ATOMIC_LIB:INTERNAL=0 \
	#       -D CMAKE_CXX_FLAGS="-isystem $KISS_ROOT/$PREFIX_HOST/include/c++/v1 \
	# -isystem $MAKE_DIR/libcxx/include \
	# -isystem $KISS_ROOT/$PREFIX_HOST/include" \
	#       -D CMAKE_C_FLAGS="-isystem $KISS_ROOT/$PREFIX_HOST/include" \

	// cue 'llvm' "construction"
	# cmake --build "$OUTPUT_DIR" -j $jobs > /dev/null || kill 0
	cmake --build "$OUTPUT_DIR" -j $jobs || kill 0
	// cue 'llvm' "installation"
	cmake --install "$OUTPUT_DIR" > /dev/null || kill 0
}

build_clang_individually() {
	_level_2
	// log  'cmake' "clear cache"
	# [ "$(// delegate -- source_dir)" = "clang" ] &&
	clean_objects "llvm"
	// cue 'clang' "configuration and generation"

	# Use individual cmake configuration
	cmake -G Ninja -B "$OUTPUT_DIR" \
		-D LLVM_CCACHE_BUILD=ON \
		-D CMAKE_INSTALL_PREFIX=/usr \
		-D CMAKE_BUILD_TYPE=Release \
		-D CMAKE_TOOLCHAIN_FILE="$cmake_config" \
		-D LLVM_BUILD_LLVM_DYLIB=OFF \
		-D LLVM_LINK_LLVM_DYLIB=OFF \
		-D LLVM_TARGETS_TO_BUILD="host" \
		-D CMAKE_CXX_STANDARD="$LLVM_REQUIRED_CXX_STANDARD" \
		-D LLVM_ENABLE_RTTI=ON \
		-D LLVM_HAS_ATOMICS=ON \
		-D LLVM_ENABLE_EH=ON \
		-D LLVM_HOST_TRIPLE="$(cc -dumpmachine)" \
		-D LLVM_BUILD_EXAMPLES=OFF \
		-D LLVM_BUILD_DOCS=OFF \
		-D LLVM_BUILD_TESTS=OFF \
		-D LLVM_ENABLE_TERMINFO=ON \
		-D LLVM_ENABLE_LIBXML2=OFF \
		-D LLVM_ENABLE_LIBEDIT=OFF \
		-D LLVM_INCLUDE_TESTS=ON \
		-D LLVM_INCLUDE_BENCHMARKS=OFF \
		-D LLVM_BUILD_BENCHMARKS=OFF \
		-D LLVM_ENABLE_PROJECTS="clang;clang-tools-extra" \
		-D CLANG_LINK_CLANG_DYLIB=OFF \
		-D HAVE_CXX_ATOMICS_WITH_LIB=OFF \
		-D CLANG_BUILD_EXAMPLES=OFF \
		-D CLANG_INCLUDE_DOCS=OFF \
		-D CLANG_INCLUDE_TESTS=ON \
		-D LIBCLANG_BUILD_STATIC=OFF \
		-D HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1 \
		-D HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1 \
		-D CMAKE_CROSSCOMPILING=ON \
		-D CMAKE_POSITION_INDEPENDENT_CODE=ON \
		-D CMAKE_CXX_FLAGS="-D _LIBCPP_PSTL_CPU_BACKEND_THREAD \
-isystem $KISS_ROOT/$PREFIX_HOST/include/c++/v1 \
-isystem $KISS_ROOT/$PREFIX_HOST/include" \
		-D CMAKE_C_FLAGS="-isystem $KISS_ROOT/$PREFIX_HOST/include" \
		-W no-dev -S "$MAKE_DIR/llvm" > /dev/null

		# -D _LIBCPP_STD_VER=23 \
		# -W no-dev -S "$MAKE_DIR/clang"
	# Unknown CMake command "llvm_add_tool_symlink".

	# Use global cmake configuration
	# deploy "-D" "LLVM_INCLUDE_TESTS"                 "OFF"
	# deploy "-S" "$MAKE_DIR/clang"
	# eval "$CMAKE $CMAKE_OPTIONS" 2>&1 || kill 0

	// cue 'clang' "construction"
	cmake --build   "$OUTPUT_DIR" -j $jobs > /dev/null || kill 0

	// fix_clang_libs_folder_name "$OUTPUT_DIR/lib/clang"

	cd "$MAKE_DIR"

	// cue 'clang' "installation"
	cmake --install "$OUTPUT_DIR" > /dev/null || kill 0

	// fix_clang_libs_folder_name "$DESTDIR/$PREFIX_HOST/lib/clang"

	// install_clang_libs

	cd "$MAKE_DIR"
}

build_compiler_rt_individually() {
	_level_2
	// log  'cmake' "clear cache"
	clean_objects "compiler-rt"
	// cue 'compiler_rt' "configuration and generation"

	[ -d "$OUTPUT_DIR/compiler-rt" ] || \mkdir -p "$OUTPUT_DIR/compiler-rt"
	# Building compiler-rt in GCC always results in segmentation fault.
	# Use clang for now.
	cmake -G Ninja -B "$OUTPUT_DIR/compiler-rt" \
		-C $runtimes_cmake \
		-C $builtins_cmake \
		-D LLVM_CCACHE_BUILD=ON \
		-D CMAKE_C_COMPILER=$CC \
		-D CMAKE_CXX_COMPILER=$CXX \
		-D CMAKE_INSTALL_PREFIX=/usr \
		-D CMAKE_BUILD_TYPE=Release \
		-D COMPILER_RESOURCE_DIR:STRING="$RESOURCE_DIR_HOST" \
		-D CMAKE_TOOLCHAIN_FILE="$cmake_config" \
		-D COMPILER_RT_BUILD_XRAY=OFF \
		-D COMPILER_RT_BUILD_SANITIZERS=OFF \
		-D COMPILER_RT_STANDALONE_BUILD=ON \
		-D CMAKE_CXX_FLAGS="\
-isystem $KISS_ROOT/$PREFIX_HOST/include/tirpc \
-isystem $KISS_ROOT/$PREFIX_HOST/include/c++/v1 \
-isystem $KISS_ROOT/$PREFIX_HOST/include" \
		-D CMAKE_C_FLAGS="-isystem $KISS_ROOT/$PREFIX_HOST/include" \
		-D CMAKE_SYSTEM_NAME:STRING=Linux \
		-D CMAKE_C_COMPILER_TARGET="$KISS_XHOST_TRIPLE" \
		-D LLVM_TARGET_TRIPLE="$KISS_XHOST_TRIPLE" \
		-D COMPILER_RT_DEFAULT_TARGET_TRIPLE="$KISS_XHOST_TRIPLE" \
		-D CMAKE_CXX_STANDARD="$LLVM_REQUIRED_CXX_STANDARD" \
		-D LLVM_TARGETS_TO_BUILD:STRING="host" \
		-D COMPILER_RT_EXCLUDE_ATOMIC_BUILTIN=ON \
		-D COMPILER_RT_BUILD_STANDALONE_LIBATOMIC=OFF \
		-D CMAKE_CROSSCOMPILING=ON \
		-D CMAKE_POSITION_INDEPENDENT_CODE=ON \
		-D LLVM_ENABLE_BACKTRACES=ON \
		-D COMPILER_RT_HAS_LIBEXECINFO=ON \
		-W no-dev -S "$MAKE_DIR/compiler-rt" > /dev/null

		# -D CMAKE_C_COMPILER=clang \
		# -D CMAKE_CXX_COMPILER=clang++ \
		# -D LLVM_REQUIRED_CXX_STANDARD="$LLVM_REQUIRED_CXX_STANDARD" \
		# -D COMPILER_RT_EXCLUDE_ATOMIC_BUILTIN=OFF \
		# -D _LIBCPP_PROVIDES_DEFAULT_RUNE_TABLE=ON \

	// cue 'compiler-rt' "construction"
	cmake --build   "$OUTPUT_DIR/compiler-rt" -j $jobs > /dev/null || kill 0
	// cue 'compiler-rt' "installation"
	cmake --install "$OUTPUT_DIR/compiler-rt" > /dev/null || kill 0

	local dest_dir="$DESTDIR/$PREFIX_HOST/lib/clang/$version_target_major/lib"
	[ -d "$dest_dir" ] ||   \mkdir -p "$dest_dir"
	rsync -aqz "$DESTDIR/$PREFIX_HOST/lib/linux" "$dest_dir/"

	fix_builtins "$libname" "$dest_dir/$LLVM_DEFAULT_TARGET_TRIPLE/libclang_rt.builtins.a"
	fix_builtins "$libname" "$dest_dir/$LLVM_DEFAULT_TARGET_TRIPLE/clang_rt.crtbegin.o"
	fix_builtins "$libname" "$dest_dir/$LLVM_DEFAULT_TARGET_TRIPLE/clang_rt.crtend.o"
}

build_libunwind_individually() {
	_level_2
	// log  'cmake' "clear cache"
	clean_objects "libunwind"
	// cue 'libunwind' "configuration and generation"

	local build_dir="$OUTPUT_DIR/libunwind"
	[ -d "$build_dir" ] || \mkdir -p "$build_dir"
	cmake -G Ninja -B "$build_dir" \
		-C $runtimes_cmake \
		-C $builtins_cmake \
		-D LLVM_CCACHE_BUILD=ON \
		-D CMAKE_C_COMPILER=$CC \
		-D CMAKE_CXX_COMPILER=$CXX \
		-D CMAKE_INSTALL_PREFIX=/usr \
		-D CMAKE_BUILD_TYPE=Release \
		-D COMPILER_RESOURCE_DIR:STRING="$RESOURCE_DIR_HOST" \
		-D CMAKE_TOOLCHAIN_FILE="$cmake_config" \
		-D LLVM_TARGETS_TO_BUILD:STRING="host" \
		-D CMAKE_CXX_STANDARD="$LLVM_REQUIRED_CXX_STANDARD" \
		-D LIBUNWIND_USE_COMPILER_RT=ON \
		-D LIBUNWIND_ENABLE_STATIC=ON \
		-D LIBUNWIND_ENABLE_SHARED=ON \
		-D LIBUNWIND_INSTALL_LIBRARY=ON \
		-D LIBUNWIND_INSTALL_SHARED_LIBRARY=ON \
		-D LIBUNWIND_INSTALL_STATIC_LIBRARY=ON \
		-D CMAKE_CROSSCOMPILING=ON \
		-D CMAKE_POSITION_INDEPENDENT_CODE=ON \
		-W no-dev -S "$MAKE_DIR/libunwind" > /dev/null

	grep -Hn LIBUNWIND_ENABLE_STATIC          "$build_dir/CMakeCache.txt"
	grep -Hn LIBUNWIND_ENABLE_SHARED          "$build_dir/CMakeCache.txt"
	grep -Hn LIBUNWIND_INSTALL_LIBRARY        "$build_dir/CMakeCache.txt"
	grep -Hn LIBUNWIND_INSTALL_STATIC_LIBRARY "$build_dir/CMakeCache.txt"
	grep -Hn LIBUNWIND_INSTALL_SHARED_LIBRARY "$build_dir/CMakeCache.txt"
		# -D CMAKE_C_COMPILER=clang \
		# -D CMAKE_CXX_COMPILER=clang++ \
	# fin LIBUNWIND_ENABLE_STATIC "*.txt" || :
	# fin LIBUNWIND_ENABLE_SHARED "*.txt" || :
	# fin LIBUNWIND_INSTALL_LIBRARY "*.txt" || :

	// cue 'libunwind' "construction"
	cmake --build   "$build_dir" -j $jobs > /dev/null || kill 0
	find "$OUTPUT_DIR" -type f -name "*unwind*" || :
	// cue 'libunwind' "installation"
	cmake --install "$build_dir" > /dev/null || kill 0

	find "$DESTDIR/$PREFIX_HOST/lib" -type f -name "*unwind*" || :

}

# Explicit depends on \$ENV{DESTDIR}
# Just an empty c file
# So, it needs compiler-rt and runtimes all built correctly
build_llvm_libgcc_individually() {
	_level_2
	// log  'cmake' "clear cache"
	clean_objects "llvm-libgcc"
	// cue 'llvm-libgcc' "individual configuration and generation"

	[ -d "$OUTPUT_DIR/llvm-libgcc" ] || \mkdir -p "$OUTPUT_DIR/llvm-libgcc"
	cmake -G Ninja -B "$OUTPUT_DIR/llvm-libgcc" \
		-C $runtimes_cmake \
		-C $builtins_cmake \
		-D LLVM_CCACHE_BUILD=ON \
		-D CMAKE_INSTALL_PREFIX=/usr \
		-D CMAKE_BUILD_TYPE=Release \
		-D CMAKE_TOOLCHAIN_FILE="$cmake_config" \
		-D CMAKE_C_COMPILER_TARGET="$KISS_XHOST_TRIPLE" \
		-D LLVM_TARGET_TRIPLE="$KISS_XHOST_TRIPLE" \
		-D COMPILER_RESOURCE_DIR:STRING="$RESOURCE_DIR_HOST" \
		-D LLVM_LIBGCC_EXPLICIT_OPT_IN=Yes \
		-D LLVM_TARGETS_TO_BUILD="host" \
		-D CMAKE_CXX_STANDARD="$LLVM_REQUIRED_CXX_STANDARD" \
		-D LIBUNWIND_USE_COMPILER_RT=ON \
		-D LIBUNWIND_ENABLE_STATIC=ON \
		-D LIBUNWIND_ENABLE_SHARED=ON \
		-D LIBUNWIND_INSTALL_LIBRARY=ON \
		-D LIBUNWIND_INSTALL_SHARED_LIBRARY=ON \
		-D LIBUNWIND_INSTALL_STATIC_LIBRARY=ON \
		-D LIBCXXABI_LIBCXX_INCLUDES=libcxx/include \
		-D LIBCXXABI_USE_LLVM_UNWINDER=ON \
		-D LIBCXXABI_USE_COMPILER_RT=ON \
		-D LIBCXXABI_ENABLE_STATIC_UNWINDER=ON \
		-D LIBCXXABI_ENABLE_THREADS=ON \
		-D LIBCXXABI_HERMETIC_STATIC_LIBRARY=ON \
		-D LIBCXXABI_INSTALL_LIBRARY=ON \
		-D LIBCXXABI_ENABLE_EXCEPTIONS=ON \
		-D LIBCXXABI_ENABLE_STATIC_UNWINDER=ON \
		-D LIBCXXABI_ENABLE_STATIC=ON \
		-D CMAKE_CROSSCOMPILING=ON \
		-D CMAKE_POSITION_INDEPENDENT_CODE=ON \
		-D CMAKE_MODULE_PATH="${CMAKE_MODULE_PATH};$MAKE_DIR/llvm/cmake/modules" \
		-W no-dev \
		-D LLVM_RUNTIME_TARGETS="$KISS_XHOST_TRIPLE" \
		-DLLVM_ENABLE_RUNTIMES="llvm-libgcc" \
		-S "$MAKE_DIR/llvm-libgcc" > /dev/null

	// cue 'llvm-libgcc' "construction individually"
	cmake --build   "$OUTPUT_DIR/llvm-libgcc" -j $jobs > /dev/null || kill 0
	// cue 'llvm-libgcc' "installation individually"
	cmake --install "$OUTPUT_DIR/llvm-libgcc" > /dev/null || kill 0
}

# Just an empty c file
bootstrap_llvm_libgcc_individually() {
	_level_2
	// log  'cmake' "clear cache"
	clean_objects "llvm"
	// cue 'llvm-libgcc' "bootstrap configuration and generation"

	[ -d "$OUTPUT_DIR/llvm-libgcc" ] || \mkdir -p "$OUTPUT_DIR/llvm-libgcc"
	cmake -G Ninja -B "$OUTPUT_DIR/llvm-libgcc" \
		-C $runtimes_cmake \
		-C $builtins_cmake \
		-D LLVM_CCACHE_BUILD=ON \
		-D CMAKE_INSTALL_PREFIX=/usr \
		-D CMAKE_BUILD_TYPE=Release \
		-D CMAKE_TOOLCHAIN_FILE="$cmake_config" \
		-D CMAKE_C_COMPILER_TARGET="$KISS_XHOST_TRIPLE" \
		-D LLVM_TARGET_TRIPLE="$KISS_XHOST_TRIPLE" \
		-D COMPILER_RT_DEFAULT_TARGET_ONLY=ON \
		-U COMPILER_RT_DEFAULT_TARGET_TRIPLE \
		-D COMPILER_RESOURCE_DIR:STRING="$RESOURCE_DIR_HOST" \
		-D LLVM_LIBGCC_EXPLICIT_OPT_IN=Yes \
		-D LLVM_TARGETS_TO_BUILD="host" \
		-D LLVM_ENABLE_RTTI=ON \
		-D LLVM_BUILD_EXAMPLES=OFF \
		-D LLVM_BUILD_DOCS=OFF \
		-D LLVM_BUILD_TESTS=OFF \
		-D LLVM_ENABLE_TERMINFO=ON \
		-D LLVM_ENABLE_LIBXML2=OFF \
		-D LLVM_ENABLE_LIBEDIT=OFF \
		-D LLVM_INCLUDE_TESTS=ON \
		-D LLVM_INCLUDE_BENCHMARKS=OFF \
		-D LLVM_BUILD_BENCHMARKS=OFF \
		-D LLVM_BUILD_LLVM_DYLIB=OFF \
		-D LLVM_LINK_LLVM_DYLIB=OFF \
		-D LLVM_HAS_ATOMICS=ON \
		-D LLVM_HOST_TRIPLE="$(cc -dumpmachine)" \
		-D LIBCXXABI_ENABLE_STATIC_UNWINDER=ON \
		-D LIBCXXABI_ENABLE_STATIC_UNWINDER=ON \
		-D CMAKE_CXX_STANDARD="$LLVM_REQUIRED_CXX_STANDARD" \
		-D CMAKE_CROSSCOMPILING=ON \
		-D CMAKE_POSITION_INDEPENDENT_CODE=ON \
		-D LLVM_RUNTIME_TARGETS="$KISS_XHOST_TRIPLE" \
		-D LLVM_ENABLE_RUNTIMES="llvm-libgcc" \
		-D HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1 \
		-D HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1 \
		-D CMAKE_CXX_FLAGS="-D _LIBCPP_PSTL_CPU_BACKEND_THREAD $CXXFLAGS" \
		-D CMAKE_C_FLAGS="$CFLAGS" \
		-W no-dev \
		-S "$MAKE_DIR/llvm" > /dev/null

		# -D COMPILER_RT_DEFAULT_TARGET_TRIPLE="$KISS_XHOST_TRIPLE" \
		# -D BOOTSTRAP_COMPILER_RT_DEFAULT_TARGET_TRIPLE="$KISS_XHOST_TRIPLE" \
		# -D RUNTIMES_x86_64-linux-musl_COMPILER_RT_DEFAULT_TARGET_TRIPLE="$KISS_XHOST_TRIPLE" \
		# -D BUILTINS_x86_64-linux-musl_COMPILER_RT_DEFAULT_TARGET_TRIPLE="$KISS_XHOST_TRIPLE" \
		# -D LIBCXXABI_USE_LLVM_UNWINDER=ON \
		# -D LIBCXXABI_USE_COMPILER_RT=ON \
		# -D LIBCXXABI_LIBCXX_INCLUDES=libcxx/include \
		# -D LIBCXXABI_INSTALL_LIBRARY=ON \
		# -D LIBCXXABI_HERMETIC_STATIC_LIBRARY=ON \
		# -D LIBCXXABI_ENABLE_THREADS=ON \
		# -D LIBCXXABI_ENABLE_STATIC=ON \
		# -D LIBCXXABI_ENABLE_EXCEPTIONS=ON \
		# -D CLANG_DEFAULT_LINKER="ld.lld" \
		# -D CLANG_DEFAULT_RTLIB="compiler-rt" \
		# -D CLANG_DEFAULT_UNWINDLIB="libunwind" \
		# -D LIBUNWIND_ENABLE_STATIC=ON \
		# -D LIBUNWIND_ENABLE_SHARED=ON \
		# -D LIBUNWIND_INSTALL_LIBRARY=ON \
		# -D LIBUNWIND_INSTALL_SHARED_LIBRARY=ON \
		# -D LIBUNWIND_INSTALL_STATIC_LIBRARY=ON \
		# -D LIBUNWIND_USE_COMPILER_RT=ON \
		# -D LLVM_ENABLE_PROJECTS="clang;clang-tools-extra" \
		# -D CMAKE_CXX_FLAGS="-isystem $KISS_ROOT/$PREFIX_HOST/include/c++/v1 -isystem $KISS_ROOT/$PREFIX_HOST/include ${CXXFLAGS-}" \

#       -D CMAKE_CXX_FLAGS="-D _LIBCPP_PSTL_CPU_BACKEND_THREAD \
# -isystem $KISS_ROOT/$PREFIX_HOST/include/c++/v1 \
# -isystem $KISS_ROOT/$PREFIX_HOST/include \
# " \
#       -D CMAKE_C_FLAGS="-isystem $KISS_ROOT/$PREFIX_HOST/include" \
#
	#       -D CMAKE_CXX_FLAGS="-isystem $KISS_ROOT/$PREFIX_HOST/include/c++/v1 \
	# -isystem $KISS_ROOT/$PREFIX_HOST/include" \
	#       -D CMAKE_C_FLAGS="-isystem $KISS_ROOT/$PREFIX_HOST/include" \

	# // cue 'runtimes' "bootstrap construction"
	# cmake --build   $OUTPUT_DIR -j $jobs > /dev/null || kill 0
	# // cue 'runtimes' "bootstrap installation"
	# cmake --install $OUTPUT_DIR > /dev/null || kill 0

	# cmake --build . --target help | grep gcc
	# llvm-libgcc-x86_64-linux-musl: phony
	# llvm-libgcc: phony
	# install-llvm-libgcc-x86_64-linux-musl-stripped: phony
	# install-llvm-libgcc-x86_64-linux-musl: phony
	# install-llvm-libgcc-stripped: phony
	# install-llvm-libgcc: phony

	// cue 'llvm-libgcc' "bootstrap construction"
	cmake --build   "$OUTPUT_DIR/llvm-libgcc" -j $jobs > /dev/null || kill 0
	# ninja: unknown target 'llvm-libgcc'
	# ninja -j $jobs -C $OUTPUT_DIR llvm-libgcc-x86_64-linux-musl
	// cue 'llvm-libgcc' "bootstrap installation"
	cmake --install "$OUTPUT_DIR/llvm-libgcc" > /dev/null || kill 0
	# ninja -j $jobs -C $OUTPUT_DIR install-llvm-libgcc-x86_64-linux-musl
}

bootstrap_runtimes_individually() {
	_level_2
	// log  'cmake' "clear cache"
	clean_objects "llvm"
	// cue 'runtimes' "bootstrap configuration and generation"

	cmake -G Ninja -B "$OUTPUT_DIR" \
		-C $runtimes_cmake \
		-C $builtins_cmake \
		-D LLVM_CCACHE_BUILD=ON \
		-D CMAKE_INSTALL_PREFIX=/usr \
		-D CMAKE_BUILD_TYPE=Release \
		-D CMAKE_TOOLCHAIN_FILE="$cmake_config" \
		-D LLVM_TARGETS_TO_BUILD="host" \
		-D CMAKE_TOOLCHAIN_PREFIX="$KISS_ROOT/$PREFIX_HOST" \
		-D COMPILER_RESOURCE_DIR:STRING="$RESOURCE_DIR_HOST" \
		-D LLVM_ENABLE_RTTI=ON \
		-D LLVM_BUILD_EXAMPLES=OFF \
		-D LLVM_BUILD_DOCS=OFF \
		-D LLVM_BUILD_TESTS=OFF \
		-D LLVM_ENABLE_TERMINFO=ON \
		-D LLVM_ENABLE_LIBXML2=OFF \
		-D LLVM_ENABLE_LIBEDIT=OFF \
		-D LLVM_INCLUDE_TESTS=ON \
		-D LLVM_INCLUDE_BENCHMARKS=OFF \
		-D LLVM_BUILD_BENCHMARKS=OFF \
		-D LLVM_BUILD_LLVM_DYLIB=OFF \
		-D LLVM_LINK_LLVM_DYLIB=OFF \
		-D LLVM_HAS_ATOMICS=ON \
		-D LLVM_HOST_TRIPLE="$(cc -dumpmachine)" \
		-D CMAKE_CXX_STANDARD="$LLVM_REQUIRED_CXX_STANDARD" \
		-D CMAKE_CROSSCOMPILING=ON \
		-D CMAKE_POSITION_INDEPENDENT_CODE=ON \
		-D LLVM_RUNTIME_TARGETS="$KISS_XHOST_TRIPLE" \
		-D LLVM_ENABLE_PROJECTS="clang" \
		-D LLVM_ENABLE_RUNTIMES="compiler-rt;libunwind;libcxxabi;libcxx" \
		-D HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1 \
		-D HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1 \
		-D CMAKE_CXX_FLAGS="\
-isystem $KISS_ROOT/$PREFIX_HOST/include/c++/v1 \
-isystem $KISS_ROOT/$PREFIX_HOST/include \
" \
		-D CMAKE_C_FLAGS="-isystem $KISS_ROOT/$PREFIX_HOST/include" \
		-D CLANG_DEFAULT_LINKER="ld.lld" \
		-D CLANG_DEFAULT_RTLIB="compiler-rt" \
		-D CLANG_DEFAULT_UNWINDLIB="libunwind" \
		-D LLVM_ENABLE_BACKTRACES=ON \
		-D COMPILER_RT_HAS_LIBEXECINFO=ON \
		-W no-dev \
		-S "$MAKE_DIR/llvm" > /dev/null

	#       -D CMAKE_CXX_FLAGS="-D _LIBCPP_PSTL_CPU_BACKEND_THREAD \
	# -isystem $KISS_ROOT/$PREFIX_HOST/include/c++/v1 \
	# -isystem $KISS_ROOT/$PREFIX_HOST/include" \
		# -D CMAKE_TOOLCHAIN_PREFIX="$DESTDIR/$PREFIX_HOST" \
		# -D LLVM_ENABLE_PROJECTS="clang;clang-tools-extra" \
		# -D CMAKE_CXX_FLAGS="-isystem $KISS_ROOT/$PREFIX_HOST/include/c++/v1 -isystem $KISS_ROOT/$PREFIX_HOST/include ${CXXFLAGS-}" \

	#       -D CMAKE_CXX_FLAGS="-isystem $KISS_ROOT/$PREFIX_HOST/include/c++/v1 \
	# -isystem $KISS_ROOT/$PREFIX_HOST/include" \
	#       -D CMAKE_C_FLAGS="-isystem $KISS_ROOT/$PREFIX_HOST/include" \


	# [ -d "$OUTPUT_DIR/libunwind" ] &&
	# [ -d "$OUTPUT_DIR/libcxxabi" ] &&
	# [ -d "$OUTPUT_DIR/libcxx" ] ||
	# // die 'runtimes' "dirs do not exist"

	# // cue 'runtimes' "bootstrap construction"
	# cmake --build   $OUTPUT_DIR -j $jobs > /dev/null || kill 0
	# // cue 'runtimes' "bootstrap installation"
	# cmake --install $OUTPUT_DIR > /dev/null || kill 0

	// cue 'runtimes' "bootstrap construction"
	ninja -j $jobs -C "$OUTPUT_DIR" runtimes > /dev/null || kill 0

	# ninja: unknown target 'check-runtimes'
	# ninja -j $jobs -C $OUTPUT_DIR check-runtimes > /dev/null || kill 0
	// cue 'runtimes' "bootstrap installation"
	ninja -j $jobs -C "$OUTPUT_DIR" install-runtimes > /dev/null || kill 0

}

build_runtimes_individually() {
	_level_2
	// log  'cmake' "clear cache"
	clean_objects "runtimes"
	// cue 'runtimes' "individual configuration and generation"

	[ -d "$OUTPUT_DIR/runtimes" ] || \mkdir -p "$OUTPUT_DIR/runtimes"
	cmake -G Ninja -B "$OUTPUT_DIR/runtimes" \
		-C $runtimes_cmake \
		-C $builtins_cmake \
		-D LLVM_CCACHE_BUILD=ON \
		-D CMAKE_INSTALL_PREFIX=/usr \
		-D CMAKE_BUILD_TYPE=Release \
		-D CMAKE_TOOLCHAIN_FILE="$cmake_config" \
		-D CMAKE_C_COMPILER_TARGET="$KISS_XHOST_TRIPLE" \
		-D LLVM_TARGET_TRIPLE="$KISS_XHOST_TRIPLE" \
		-D COMPILER_RESOURCE_DIR:STRING="$RESOURCE_DIR_HOST" \
		-D LLVM_LIBGCC_EXPLICIT_OPT_IN=Yes \
		-D LLVM_TARGETS_TO_BUILD="host" \
		-D CMAKE_TOOLCHAIN_PREFIX="$KISS_ROOT/$PREFIX_HOST" \
		-D CMAKE_CXX_STANDARD="$LLVM_REQUIRED_CXX_STANDARD" \
		-D CMAKE_CROSSCOMPILING=ON \
		-D CMAKE_POSITION_INDEPENDENT_CODE=ON \
		-D CMAKE_MODULE_PATH="${CMAKE_MODULE_PATH};$MAKE_DIR/llvm/cmake/modules" \
		-W no-dev \
		-D LLVM_RUNTIME_TARGETS="$KISS_XHOST_TRIPLE" \
		-DLLVM_ENABLE_RUNTIMES="compiler-rt;libunwind;libcxxabi;libcxx" \
		-D LLVM_ENABLE_BACKTRACES=ON \
		-D COMPILER_RT_HAS_LIBEXECINFO=ON \
		-D CMAKE_CXX_FLAGS="$cxxflags" \
		-D CMAKE_C_FLAGS="$cflags" \
		-D CMAKE_ASM_FLAGS="$cflags" \
		-W no-dev -S "$MAKE_DIR/runtimes" > /dev/null

	// cue 'runtimes' "construction individually"
	cmake --build   "$OUTPUT_DIR/runtimes" -j $jobs > /dev/null || kill 0
	// cue 'runtimes' "installation individually"
	cmake --install "$OUTPUT_DIR/runtimes" > /dev/null || kill 0
}

build_libcxxabi_individually() {
	_level_2
	// log  'cmake' "clear cache"
	clean_objects "libcxxabi"
	// cue 'libcxxabi' "configuration and generation"

	[ -d "$OUTPUT_DIR/libcxxabi" ] || \mkdir -p "$OUTPUT_DIR/libcxxabi"
	cmake -G Ninja -B "$OUTPUT_DIR/libcxxabi" \
		-C $runtimes_cmake \
		-C $builtins_cmake \
		-D LLVM_CCACHE_BUILD=ON \
		-D CMAKE_INSTALL_PREFIX=/usr \
		-D CMAKE_BUILD_TYPE=Release \
		-D COMPILER_RESOURCE_DIR:STRING="$RESOURCE_DIR_HOST" \
		-D CMAKE_TOOLCHAIN_FILE="$cmake_config" \
		-D CMAKE_C_COMPILER=$CC \
		-D CMAKE_CXX_COMPILER=$CXX \
		-D CMAKE_CXX_STANDARD="$LLVM_REQUIRED_CXX_STANDARD" \
		-D LIBCXXABI_LIBCXX_INCLUDES=libcxx/include \
		-D LIBCXXABI_USE_LLVM_UNWINDER=ON \
		-D LIBCXXABI_USE_COMPILER_RT=ON \
		-D LIBCXXABI_ENABLE_STATIC_UNWINDER=ON \
		-D LIBCXXABI_ENABLE_THREADS=ON \
		-D LIBCXXABI_HERMETIC_STATIC_LIBRARY=ON \
		-D LIBCXXABI_INSTALL_LIBRARY=ON \
		-D LIBCXXABI_ENABLE_EXCEPTIONS=ON \
		-D LIBCXXABI_ENABLE_STATIC_UNWINDER=ON \
		-D LIBCXXABI_ENABLE_STATIC=ON \
		-D CMAKE_CROSSCOMPILING=ON \
		-D CMAKE_POSITION_INDEPENDENT_CODE=ON \
		-D CMAKE_CXX_FLAGS="-resource-dir=$RESOURCE_DIR_HOST -D _LIBCPP_PSTL_CPU_BACKEND_THREAD \
-isystem $KISS_ROOT/$PREFIX_HOST/include/c++/v1 \
-isystem $KISS_ROOT/$PREFIX_HOST/include" \
		-D CMAKE_C_FLAGS="-resource-dir=$RESOURCE_DIR_HOST -isystem $KISS_ROOT/$PREFIX_HOST/include" \
		-W no-dev -S "$MAKE_DIR/libcxxabi" > /dev/null

		# -D CMAKE_C_COMPILER=clang \
		# -D CMAKE_CXX_COMPILER=clang++ \
		# -D CMAKE_CXX_FLAGS="-isystem $DESTDIR/$PREFIX_HOST/include/c++/v1 -isystem $MAKE_DIR/libcxx/include -isystem $KISS_ROOT/$PREFIX_HOST/include ${CMAKE_CXX_FLAGS}" \
		# -D CMAKE_CXX_FLAGS="-isystem $KISS_ROOT/$PREFIX_HOST/include -isystem $MAKE_DIR/libcxx/include -isystem $KISS_ROOT/$PREFIX_HOST/include/c++/v1 ${CMAKE_CXX_FLAGS}" \
		# -D LIBCXXABI_STATICALLY_LINK_UNWINDER_IN_STATIC_LIBRARY=ON \
		# -D LLVM_ENABLE_RUNTIMES="libcxx;libcxxabi;libunwind" \

	#       -D CMAKE_CXX_FLAGS="-isystem $KISS_ROOT/$PREFIX_HOST/include/c++/v1 \
	# -isystem $KISS_ROOT/$PREFIX_HOST/include ${CMAKE_CXX_FLAGS}" \

	// cue 'libcxxabi' "construction"
	cmake --build   "$OUTPUT_DIR/libcxxabi" -j $jobs > /dev/null || kill 0
	// cue 'libcxxabi' "installation"
	cmake --install "$OUTPUT_DIR/libcxxabi" > /dev/null || kill 0

	mkdir -p "$DESTDIR/$PREFIX_HOST"
	cp -r libcxxabi/include "$DESTDIR/$PREFIX_HOST"
}

build_libcxx_individually() {
	_level_2
	// log  'cmake' "clear cache"
	clean_objects "libcxx"
	// cue 'libcxx' "configuration and generation"

	[ -d "$OUTPUT_DIR/libcxx" ] || \mkdir -p "$OUTPUT_DIR/libcxx"
	# CMAKE_SOURCE_DIR="$MAKE_DIR/libcxx"
	cmake -G Ninja -B "$OUTPUT_DIR/libcxx" \
		-C $runtimes_cmake \
		-C $builtins_cmake \
		-D LLVM_CCACHE_BUILD=ON \
		-D CMAKE_INSTALL_PREFIX=/usr \
		-D CMAKE_BUILD_TYPE=Release \
		-D COMPILER_RESOURCE_DIR:STRING="$RESOURCE_DIR_HOST" \
		-D CMAKE_TOOLCHAIN_FILE="$cmake_config" \
		-D CMAKE_C_COMPILER=$CC \
		-D CMAKE_CXX_COMPILER=$CXX \
		-D CMAKE_CXX_STANDARD="$LLVM_REQUIRED_CXX_STANDARD" \
		-D LIBCXXABI_USE_LLVM_UNWINDER=ON \
		-D LIBCXX_CXX_ABI=libcxxabi \
		-D LIBCXX_INCLUDE_BENCHMARKS=OFF \
		-D LIBCXX_USE_COMPILER_RT=ON \
		-D LIBCXX_HAS_MUSL_LIBC=ON \
		-D LIBCXX_HAS_ATOMIC_LIB:INTERNAL=0 \
		-D LIBCXX_HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1 \
		-D LIBCXX_HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1 \
		-D CMAKE_CROSSCOMPILING=ON \
		-D CMAKE_POSITION_INDEPENDENT_CODE=ON \
		-W no-dev -S "$MAKE_DIR/libcxx" > /dev/null

		# -D CMAKE_C_COMPILER=clang \
		# -D CMAKE_CXX_COMPILER=clang++ \
		# -D LIBCXX_HAS_ATOMIC_LIB=OFF \
	# ld.lld: error: unable to find library -llibcxx-abi-shared
	# ld.lld: error: unable to find library -lcxxabi-headers

		# -DLLVM_INCLUDE_BENCHMARKS=OFF \
		# -DLLVM_BUILD_BENCHMARKS=OFF \
		# -DLLVM_THIRD_PARTY_DIR="$MAKE_DIR/libcxx" \

	// cue 'libcxx' "construction"
	cmake --build   "$OUTPUT_DIR/libcxx" -j $jobs > /dev/null || kill 0
	// cue 'libcxx' "installation"
	cmake --install "$OUTPUT_DIR/libcxx" > /dev/null || kill 0
}

build_clang_individually_twice() {
	_level_2
	// log  'cmake' "clear cache"
	clean_objects "clang"
	// cue 'clang' "configuration and generation for the second time construction"

	[ -d "$OUTPUT_DIR/clang" ] || \mkdir -p "$OUTPUT_DIR/clang"
	cmake -G Ninja -B "$OUTPUT_DIR/clang" \
		-D LLVM_CCACHE_BUILD=ON \
		-D CMAKE_C_COMPILER=$CC \
		-D CMAKE_CXX_COMPILER=$CXX \
		-D CMAKE_INSTALL_PREFIX=/usr \
		-D CMAKE_BUILD_TYPE=Release \
		-D COMPILER_RESOURCE_DIR:STRING="$RESOURCE_DIR_HOST" \
		-D CMAKE_TOOLCHAIN_FILE="$cmake_config" \
		-D CMAKE_CXX_STANDARD="$LLVM_REQUIRED_CXX_STANDARD" \
		-D LLVM_ENABLE_RTTI=ON \
		-D LLVM_ENABLE_EH=ON \
		-D CLANG_LINK_CLANG_DYLIB=OFF \
		-D CLANG_BUILD_EXAMPLES=OFF \
		-D CLANG_INCLUDE_DOCS=OFF \
		-D CLANG_INCLUDE_TESTS=ON \
		-D LIBCLANG_BUILD_STATIC=OFF \
		-D CMAKE_CROSSCOMPILING=ON \
		-D CMAKE_POSITION_INDEPENDENT_CODE=ON \
		-D CLANG_DEFAULT_CXX_STDLIB=libc++ \
		-D CLANG_DEFAULT_RTLIB=compiler-rt \
		-W no-dev -S "$MAKE_DIR/clang" > /dev/null

		# -D CMAKE_C_COMPILER=cc \
		# -D CMAKE_CXX_COMPILER=c++ \

	// cue 'clang' "construction the second time"
	cmake --build   "$OUTPUT_DIR/clang" -j $jobs > /dev/null || kill 0
	// cue 'clang' "installation the second time"
	cmake --install "$OUTPUT_DIR/clang" > /dev/null || kill 0
}

build_runtimes() {
	_level_2

	// build_compiler_rt_individually
	// build_libunwind_individually

	# // build_libcxxabi_individually
	# // build_libcxx_individually

	// bootstrap_llvm_libgcc_individually
	// build_llvm_libgcc_individually
	// bootstrap_runtimes_individually
	// build_runtimes_individually

}

regenerate_stage_flags() {
	STAGE_C_FLAGS="$CFLAGS"
	export STAGE_C_FLAGS
	// log '$STAGE_C_FLAGS' "$STAGE_C_FLAGS"
	# STAGE_CXX_FLAGS="-isystem $DESTDIR/$PREFIX_HOST/include/c++/v1 $CXXFLAGS"
	STAGE_CXX_FLAGS="$CXXFLAGS"
	export STAGE_CXX_FLAGS
	// log '$STAGE_CXX_FLAGS' "$STAGE_CXX_FLAGS"
}

# if [ "${bootstrap-}" = "1" ]; then


bootstrap_options() {
	_level_2
	local toolchain_prefix="$1"
	local target_resource_prefix="$(// delegate to_target_resource_prefix "$toolchain_prefix")"
	local toolchain_version="$(// delegate target_resource_prefix_to_version "$target_resource_prefix")"

	# echo "Building stage 1 and stage 2..."
	// log '$bootstrap' "$bootstrap"
	// log 'Building stage 1 and stage 2...'

	[ -f "$MAKE_DIR/files/distribution.cmake" ] ||
		// die 'file' "'$MAKE_DIR/files/distribution.cmake' does not exist"
	deploy "-C" "$MAKE_DIR/files/distribution.cmake"
	deploy "-D" "BOOTSTRAP_CMAKE_C_COMPILER_LAUNCHER"   "ccache"
	deploy "-D" "BOOTSTRAP_CMAKE_CXX_COMPILER_LAUNCHER" "ccache"
	deploy "-D" "BOOTSTRAP_LLVM_CCACHE_BUILD"           "ON"
	deploy "-D" "BOOTSTRAP_CMAKE_BUILD_TYPE"            "Release"
	# deploy "-D" "BOOTSTRAP_CLANG_RESOURCE_DIR:STRING" "../lib/clang/$toolchain_version"
	deploy "-D" "BOOTSTRAP_CLANG_RESOURCE_DIR:STRING" "../lib/clang/$version_target" "force"
	# deploy "-D" "BOOTSTRAP_COMPILER_RESOURCE_DIR:STRING" "$RESOURCE_DIR_HOST"
	# deploy "-D" "BOOTSTRAP_COMPILER_RESOURCE_DIR:STRING" "$DESTDIR/$PREFIX_HOST/lib/clang/$toolchain_version"
	deploy "-D" "BOOTSTRAP_COMPILER_RESOURCE_DIR:STRING" "$DESTDIR/$PREFIX_HOST/lib/clang/$version_target" "force"

	# deploy "-D" "BOOTSTRAP_CMAKE_ASM_FLAGS" "$cflags"
	# deploy "-D" "BOOTSTRAP_CMAKE_ASM_FLAGS" "\$ENV{BUILTINS_TARGET_CMAKE_C_FLAGS}"
	deploy "-D" "BOOTSTRAP_CMAKE_ASM_FLAGS" "$BUILTINS_TARGET_CMAKE_C_FLAGS"

	# deploy "-D" "BOOTSTRAP_CMAKE_CXX_FLAGS" "$cxxflags"
	# deploy "-D" "BOOTSTRAP_CMAKE_CXX_FLAGS" "-isystem $DESTDIR/$PREFIX_HOST/include/c++/v1 \$ENV{BUILTINS_TARGET_CMAKE_CXX_FLAGS}"
	deploy "-D" "BOOTSTRAP_CMAKE_CXX_FLAGS" "-isystem $DESTDIR/$PREFIX_HOST/include/c++/v1 $BUILTINS_TARGET_CMAKE_CXX_FLAGS"

	# deploy "-D" "BOOTSTRAP_CMAKE_C_FLAGS" "$cflags"
	# deploy "-D" "BOOTSTRAP_CMAKE_C_FLAGS" "\$ENV{BUILTINS_TARGET_CMAKE_C_FLAGS}"
	deploy "-D" "BOOTSTRAP_CMAKE_C_FLAGS" "$BUILTINS_TARGET_CMAKE_C_FLAGS"
	deploy "-D" "_BOOTSTRAP_DEFAULT_PASSTHROUGH" "CMAKE_C_FLAGS;CMAKE_CXX_FLAGS;CMAKE_ASM_FLAGS;${_BOOTSTRAP_DEFAULT_PASSTHROUGH-}"
	deploy "-D" "BOOTSTRAP_CLANG_BOOTSTRAP_PASSTHROUGH" "CMAKE_C_FLAGS;CMAKE_CXX_FLAGS;CMAKE_ASM_FLAGS;${CLANG_BOOTSTRAP_PASSTHROUGH-}"

	deploy "-D" "BOOTSTRAP_KISS_ROOT:PATH"                    "$KISS_ROOT"
	deploy "-D" "BOOTSTRAP_LLVM_DEFAULT_TARGET_TRIPLE:STRING" "$KISS_XHOST_TRIPLE"
	deploy "-D" "BOOTSTRAP_LLVM_ENABLE_LTO:STRING"            "Thin"
	deploy "-D" "BOOTSTRAP_LLVM_ENABLE_RUNTIMES:STRING"       "$runtimes"
	deploy "-D" "BOOTSTRAP_LLVM_HOST_TRIPLE:STRING"           "$(cc -dumpmachine)"
	deploy "-D" "BOOTSTRAP_LLVM_TARGET_ARCH:STRING"           "$TARGET_ARCH"
	deploy "-D" "BOOTSTRAP_LLVM_BUILD_LLVM_DYLIB"             "ON"
	deploy "-D" "BOOTSTRAP_LLVM_LINK_LLVM_DYLIB"              "ON"
	deploy "-D" "BOOTSTRAP_LLVM_ENABLE_LLD"                   "ON"
	deploy "-D" "BOOTSTRAP_COMPILER_RT_BUILD_SANITIZERS"      "OFF"
	deploy "-D" "BOOTSTRAP_LLVM_BUILD_RUNTIMES"               "ON"

	# deploy "-D" "BOOTSTRAP_LLVM_RUNTIMES_BUILD"               "OFF"
	deploy "-D" "BOOTSTRAP_LLVM_RUNTIMES_BUILD"               "ON"
	# deploy "-D" "BOOTSTRAP_COMPILER_RT_STANDALONE_BUILD"      "ON"
	deploy "-D" "BOOTSTRAP_COMPILER_RT_STANDALONE_BUILD"      "OFF"

	deploy "-D" "BOOTSTRAP_COMPILER_RT_DEFAULT_TARGET_TRIPLE" "$KISS_XHOST_TRIPLE"
	deploy "-D" "BOOTSTRAP_LLVM_LIBGCC_EXPLICIT_OPT_IN:BOOL"  "Yes"
	deploy "-D" "BOOTSTRAP_COMPILER_RT_BUILD_BUILTINS:BOOL"   "OFF"

	deploy "-D" "BOOTSTRAP_LLVM_BUILD_TESTS"                  "OFF"
	deploy "-D" "BOOTSTRAP_LLVM_INCLUDE_TESTS"                "ON"
	deploy "-D" "BOOTSTRAP_ALLOW_DUPLICATE_CUSTOM_TARGETS"    "ON"
	deploy "-D" "BOOTSTRAP_LLVM_TOOL_COMPILER_RT_BUILD"       "OFF"
	deploy "-D" "BOOTSTRAP_LLVM_BUILD_EXTERNAL_COMPILER_RT"   "OFF"

	# https://llvm.org/docs/OpaquePointers.html
	# deploy "-D" "BOOTSTRAP_CLANG_ENABLE_OPAQUE_POINTERS" "OFF"
	# deploy "-D" "CLANG_ENABLE_OPAQUE_POINTERS" "OFF"

	if [ "$POLLY_ENABLE_GPGPU_CODEGEN" = "ON" ]; then
		deploy "-D" "BOOTSTRAP_LLVM_TARGETS_TO_BUILD:STRING" "host;AMDGPU;NVPTX"
	else
		# deploy "-D" "BOOTSTRAP_LLVM_TARGETS_TO_BUILD:STRING"      "host;AMDGPU"
		deploy "-D" "BOOTSTRAP_LLVM_TARGETS_TO_BUILD:STRING" "host"
	fi

	deploy "-D" "BOOTSTRAP_LLVM_EXPERIMENTAL_TARGETS_TO_BUILD:STRING" "$LLVM_TARGETS_TO_BUILD"

	deploy "-D" "CMAKE_CROSSCOMPILING" "ON"
	# deploy "-D" "LLVM_NATIVE_TOOL_DIR" "$DESTDIR/$PREFIX_HOST"
	# deploy "-D" "LLVM_TABLEGEN"        "$DESTDIR/$PREFIX_HOST/bin/llvm-tblgen"
	# deploy "-D" "CLANG_TABLEGEN"       "$DESTDIR/$PREFIX_HOST/bin/clang-tblgen"

	# deploy "$bstoolchain"
	# If this is a cross, use a toolchain file
	[ -z "${KISS_ROOT+x}" ] || {
		# "Argument list too long" might not the exact info
		# /usr/bin/ash: /var/db/kiss/lm/underconstruction/llvm/build: sed: Argument list too long
		# /usr/bin/ash: /var/db/kiss/lm/underconstruction/llvm/build: realpath: Argument list too long
		# /usr/bin/ash: eval: /usr/bin/cmake: Argument list too long

		deploy "-D" "BOOTSTRAP_CMAKE_TOOLCHAIN_FILE" "$cmake_config"
	}

	# deploy "-D" "CMAKE_ASM_FLAGS" "$cflags"
	# deploy "-D" "CMAKE_CXX_FLAGS" "-fPIC -O3 -gline-tables-only -DNDEBUG"
	# deploy "-D" "CMAKE_C_FLAGS"   "-fPIC -O3 -gline-tables-only -DNDEBUG"

	# deploy "-D" "BOOTSTRAP_DEFAULT_SYSROOT:STRING"      "$SYS_ROOT"
	deploy "-D" "BOOTSTRAP_DEFAULT_SYSROOT:STRING"      "$KISS_ROOT"
	deploy "-D" "BOOTSTRAP_LLVM_BUILTIN_TARGETS:STRING" "$KISS_XHOST_TRIPLE"
}

	# bootstrap_options "$toolchain_prefix"

stage_1() {
	_level_2

	STAGE_C_FLAGS="$1"
	export STAGE_C_FLAGS
	// log '$STAGE_C_FLAGS' "$STAGE_C_FLAGS"
	STAGE_CXX_FLAGS="$2"
	export STAGE_CXX_FLAGS
	// log '$STAGE_CXX_FLAGS' "$STAGE_CXX_FLAGS"

	deploy "-D" "LLVM_LIBRARY_OUTPUT_INTDIR"       "$OUTPUT_DIR/lib"

	LDFLAGS="-resource-dir=$RESOURCE_DIR_HOST \
-L $RESOURCE_DIR_HOST/lib/linux \
-L $LLVM_TOOLCHAIN_LIB_DIR_HOST \
$ldflags \
-Wl,-rpath $LLVM_TOOLCHAIN_LIB_DIR_HOST \
-Wl,-rpath-link $LLVM_TOOLCHAIN_LIB_DIR_HOST \
"
	export LDFLAGS

	deploy "-D" "CMAKE_EXE_LINKER_FLAGS:STRING"    "\$LDFLAGS"
	deploy "-D" "CMAKE_MODULE_LINKER_FLAGS:STRING" "\$LDFLAGS"
	deploy "-D" "CMAKE_SHARED_LINKER_FLAGS:STRING" "\$LDFLAGS"
	# BOOTSTRAP
	deploy "-D" "CLANG_ENABLE_BOOTSTRAP" "ON"
	deploy "-D" "CLANG_BOOTSTRAP_PASSTHROUGH" "CMAKE_INSTALL_PREFIX;CMAKE_VERBOSE_MAKEFILE"
	deploy "-D" "CLANG_BOOTSTRAP_PASSTHROUGH" "CMAKE_C_FLAGS;CMAKE_CXX_FLAGS;CMAKE_ASM_FLAGS;BOOTSTRAP_CMAKE_C_FLAGS;BOOTSTRAP_CMAKE_CXX_FLAGS;BOOTSTRAP_CMAKE_ASM_FLAGS;${CLANG_BOOTSTRAP_PASSTHROUGH-}"
	deploy "-D" "CMAKE_CXX_COMPILER"     "$CXX"
	deploy "-D" "CMAKE_C_COMPILER"       "$CC"
	deploy "-D" "CMAKE_ASM_COMPILER"     "$CC"

	# "-w" disable all warnnings
	#       deploy "-D" "CMAKE_ASM_FLAGS"        "$cflags -lz -w \
	# -isystem $RESOURCE_DIR_HOST/include \
	# "
	# deploy "-D" "CMAKE_ASM_FLAGS"        "-lz -w"
	deploy "-D" "CMAKE_ASM_FLAGS"        "$STAGE_C_FLAGS -lz"
	# deploy "-D" "CMAKE_ASM_FLAGS"        "-lz -w \$CFLAGS"

	#       deploy "-D" "CMAKE_CXX_FLAGS"        "$cxxflags -lz -w \
	# -isystem $RESOURCE_DIR_HOST/include \
	# "
	# -isystem $DESTDIR/$PREFIX_HOST/include/c++/v1 \
	# deploy "-D" "CMAKE_CXX_FLAGS"        "-lz -w"
	deploy "-D" "CMAKE_CXX_FLAGS"        "$STAGE_CXX_FLAGS -lz"
	# deploy "-D" "CMAKE_CXX_FLAGS"        "-lz -w -isystem $DESTDIR/$PREFIX_HOST/include/c++/v1 \$CXXFLAGS"

	#       deploy "-D" "CMAKE_C_FLAGS"          "$cflags -lz -w \
	# -isystem $RESOURCE_DIR_HOST/include \
	# "
	# deploy "-D" "CMAKE_C_FLAGS"          "-lz -w"
	deploy "-D" "CMAKE_C_FLAGS"          "$STAGE_C_FLAGS -lz"
	# deploy "-D" "CMAKE_C_FLAGS"          "-lz -w \$CFLAGS"

	deploy "-D" "KISS_ROOT"              "$KISS_ROOT"
	# deploy "-D" "LLVM_TARGET_ARCH"       "host"
	deploy "-D" "LLVM_TARGET_ARCH"       "$TARGET_ARCH"
	deploy "-D" "LLVM_NATIVE_ARCH"       "host"
	deploy "-D" "LLVM_ENABLE_ZSTD"       "OFF"
	# deploy "-D" "LLVM_ENABLE_LTO"        "OFF"
	# deploy "-D" "LLVM_ENABLE_RUNTIMES"   "$runtimes"

	# deploy "-S" "$MAKE_DIR/llvm"
	# eval "$CMAKE $CMAKE_OPTIONS" 2>&1 || kill 0
	# cmake --build   "$OUTPUT_DIR"
	# cmake --install "$OUTPUT_DIR"
	# find $OUTPUT_DIR -mindepth 1 -maxdepth 1 -exec \rm -rf {} +



	# -D CMAKE_STATIC_LINKER_FLAGS:STRING="$ldflags" \

	# Hardcoded in the following file
	# llvm-project/llvm/runtimes/CMakeLists.txt
	# -D LLVM_ENABLE_PER_TARGET_RUNTIME_DIR=ON \
	# When LLVM_DEFAULT_TARGET_TRIPLE is x86_64-linux-musl,
	# lib/clang/15/lib/libclang_rt.builtins-x86_64.a
	# is moved to
	# lib/clang/15/lib/x86_64-linux-musl/libclang_rt.builtins.a
	# Calling command in cmake/Modules/HandleCompilerRT.cmake
	# COMMAND ${clang_command} "${cmd_prefix}--rtlib=compiler-rt" "${cmd_prefix}-print-libgcc-file-name"
	# compiler-rt/lib/builtins/CMakeLists.txt

	# -D LIBCXX_COMPILE_FLAGS="$LIBCXX_COMPILE_FLAGS" \

	# // stage_1 "$STAGE_C_FLAGS" "$STAGE_CXX_FLAGS"
	# build_target="stage2-install-distribution"
	# build_prefix="$OUTPUT_DIR/tools/clang/stage2-bins"


}

# else

stage_2() {
	_level_2

	STAGE_C_FLAGS="$1"
	export STAGE_C_FLAGS
	// log '$STAGE_C_FLAGS' "$STAGE_C_FLAGS"
	STAGE_CXX_FLAGS="$2"
	export STAGE_CXX_FLAGS
	// log '$STAGE_CXX_FLAGS' "$STAGE_CXX_FLAGS"

	# echo "Building stage 2 only..."
	// log '$bootstrap' "$bootstrap"
	// log 'Building stage 2 only...'

	[ -f "$MAKE_DIR/files/distribution-stage2.cmake" ] ||
		// die 'file' "'$MAKE_DIR/files/distribution-stage2.cmake' does not exist"
	deploy "-C" "$MAKE_DIR/files/distribution-stage2.cmake"
	deploy "-D" "CMAKE_C_FLAGS:STRING"    "$cflags"
	deploy "-D" "CMAKE_C_FLAGS_RELEASE"   "$cflags"
	deploy "-D" "CMAKE_CXX_FLAGS:STRING"  "$cxxflags"
	deploy "-D" "CMAKE_CXX_FLAGS_RELEASE" "$cxxflags"
	deploy "-D" "CMAKE_ASM_FLAGS:STRING"  "$cflags"
	deploy "-D" "CMAKE_ASM_FLAGS_RELEASE" "$cflags"

	# deploy "$toolchain"
	# If this is a cross-build, use a toolchain file
	[ -z "${KISS_ROOT+x}" ] || {
		deploy "-D" "CMAKE_TOOLCHAIN_FILE" "$cmake_config"
	}

	if [ "$POLLY_ENABLE_GPGPU_CODEGEN" = "ON" ]; then
		deploy "-D" "LLVM_TARGETS_TO_BUILD:STRING"      "host;AMDGPU;NVPTX"
	else
		deploy "-D" "LLVM_TARGETS_TO_BUILD:STRING"      "host;AMDGPU"
		# deploy "-D" "BOOTSTRAP_LLVM_TARGETS_TO_BUILD:STRING"      "host"
	fi

	deploy "-D" "LLVM_EXPERIMENTAL_TARGETS_TO_BUILD:STRING" "$LLVM_TARGETS_TO_BUILD"

	deploy "-D" "LLVM_ENABLE_ASSERTIONS"          "ON"
	# deploy "-D" "LLVM_ENABLE_LTO"                  "OFF"
	deploy "-D" "LLVM_ENABLE_LTO"                  "Thin"
	deploy "-D" "LLVM_ENABLE_RUNTIMES"             "$runtimes"
	deploy "-D" "LLVM_LINK_LLVM_DYLIB"             "ON"
	# deploy "-D" "CMAKE_EXE_LINKER_FLAGS:STRING"    "$ldflags"
	deploy "-D" "CMAKE_MODULE_LINKER_FLAGS:STRING" "$ldflags"
	deploy "-D" "CMAKE_SHARED_LINKER_FLAGS:STRING" "$ldflags"
	deploy "-D" "KISS_ROOT"                        "$KISS_ROOT"

	# deploy "-D" "CMAKE_ASM_COMPILER:FILEPATH" "$CC"
	# /working/toolchain/llvm/official/llvm/runtimes/CMakeLists.txt
	deploy "-D" "RT_C_FLAGS"   "${CMAKE_C_FLAGS}   --sysroot=${KISS_ROOT}"
	deploy "-D" "RT_CXX_FLAGS" "${CMAKE_CXX_FLAGS} --sysroot=${KISS_ROOT}"
	deploy "-D" "RT_ASM_FLAGS" "${CMAKE_ASM_FLAGS} --sysroot=${KISS_ROOT}"

	# /working/toolchain/llvm/official/runtimes/CMakeLists.txt
	deploy "-D" "CMAKE_REQUIRED_FLAGS" "${CMAKE_REQUIRED_FLAGS} --sysroot=${KISS_ROOT}"


	deploy "-D" "LLVM_TARGET_ARCH"                  "$TARGET_ARCH"
	deploy "-D" "LLVM_ENABLE_ZSTD"                  "ON"
	# deploy "-D" "LLVM_NATIVE_ARCH"                  "$TARGET_ARCH"
	# llvm/cmake/config-ix.cmake
	deploy "-D" "LLVM_NATIVE_ARCH"                  "host"

	# -D CMAKE_STATIC_LINKER_FLAGS:STRING="$ldflags" \
	# -D LLVM_ENABLE_RUNTIMES=all

	# Hardcoded in the following file
	# /working/toolchain/llvm/llvm-project/llvm/runtimes/CMakeLists.txt
	# -D LLVM_ENABLE_PER_TARGET_RUNTIME_DIR=ON \

	# -D LIBCXX_COMPILE_FLAGS="$LIBCXX_COMPILE_FLAGS" \
	# -D LLVM_ENABLE_PROJECTS="clang;clang-tools-extra;libclc;lld;lldb;mlir;polly;pstl" \

	# stage_2 "$STAGE_C_FLAGS" "$STAGE_CXX_FLAGS"
	# build_target="install-distribution"
	# build_prefix="$OUTPUT_DIR"

}

# fi

shell_level_preparation() {
	_level_2
	local toolchain_prefix="$1"
	local target_resource_prefix="$(// delegate to_target_resource_prefix "$toolchain_prefix")"
	shift 1
	local use_intermediate="$2"
	shift 1

	# local use_intermediate="${2-}"

	local STAGE_C_FLAGS="${1-"$STAGE_C_FLAGS"}"
	// log '$STAGE_C_FLAGS' "$STAGE_C_FLAGS"
	local STAGE_CXX_FLAGS="${2-"$STAGE_CXX_FLAGS"}"
	// log '$STAGE_CXX_FLAGS' "$STAGE_CXX_FLAGS"

	# clean_objects "$source"

	# rsync -aq "$runtimes_cmake" "$runtimes_cmake.copy"
	# rsync -aq "$builtins_cmake" "$builtins_cmake.copy"

	# // determine_target &&
		// common_options_init "$toolchain_prefix"

	# deploy "-S" "$MAKE_DIR/llvm"
	# eval "$CMAKE $CMAKE_OPTIONS" 2>&1 || kill 0
	#
	# CMAKE_OPTIONS="$CMAKE \\$newline"

	# CMAKE_OPTIONS="$CMAKE \\$newline"

	# deploy "-G" "\"$GENERATOR_TYPE\""
	# deploy "-B" "\"$OUTPUT_DIR\""

	# deploy "-C" "\"$MAKE_DIR/cache.cmake\""
	# deploy "-D" "CMAKE_INSTALL_PREFIX:PATH" "$RESOURCE_DIR_BUILD"

	# Reference
	# deploy "-C" "clang/cmake/caches/DistributionExample.cmake"

	# eval "$CMAKE $CMAKE_OPTIONS" 2>&1 || kill 0
	# CMAKE_OPTIONS="$CMAKE \\$newline"

	[ -z "${use_intermediate:+x}" ] ||
		// runtimes_use_intermediate "$toolchain_prefix"

	[ "${bootstrap-}" != "1" ] && {
		stage_2 "$STAGE_C_FLAGS" "$STAGE_CXX_FLAGS"
		build_target="install-distribution"
		build_prefix="$OUTPUT_DIR"
	} || {
		// bootstrap_options "$toolchain_prefix"
		// stage_1 "$STAGE_C_FLAGS" "$STAGE_CXX_FLAGS"
		build_target="stage2-install-distribution"
		build_prefix="$OUTPUT_DIR/tools/clang/stage2-bins"

		# deploy "-D" "CMAKE_C_COMPILER:FILEPATH"   "$CC"
		# deploy "-D" "CMAKE_ASM_COMPILER:FILEPATH" "$CC"
		# deploy "-D" "CMAKE_CXX_COMPILER:FILEPATH" "$CXX"

		# deploy "-D" "CMAKE_C_COMPILER"   "$CC"
		# deploy "-D" "CMAKE_ASM_COMPILER" "$CC"
		# deploy "-D" "CMAKE_CXX_COMPILER" "$CXX"

		# deploy "-D" "CMAKE_C_FLAGS:STRING"   "$cflags"
		# deploy "-D" "CMAKE_ASM_FLAGS:STRING" "$cflags"
		# deploy "-D" "CMAKE_CXX_FLAGS:STRING" "$cxxflags"

	}

	// log '$CMAKE_C_COMPILER'   "$CMAKE_C_COMPILER"
	// log '$CMAKE_ASM_COMPILER' "$CMAKE_ASM_COMPILER"
	// log '$CMAKE_CXX_COMPILER' "$CMAKE_CXX_COMPILER"

	# [ -z "${use_intermediate:+x}" ] ||
	// runtimes_use_intermediate_flags "$toolchain_prefix"

	# deploy "-C" "runtimes.cmake"
	# write_to_file "$runtimes_cmake" "$builtins_flags_list"
	deploy "-C" "$runtimes_cmake"
	deploy "-C" "$builtins_cmake"
}

shell_level_preparation "$TOOLCHAIN_PREFIX" "false" "${STAGE_C_FLAGS-}" "${STAGE_CXX_FLAGS-}"

# [ -f "$DESTDIR/$PREFIX_HOST/bin/llvm-ar" ] ||
{
	// build_llvm_individually
	// build_clang_individually
	// build_runtimes
	# // build_clang_individually_twice
}


regenerate() {
	_level_2
	local source="$1"
	[ ! -z "${source:+x}" ] || // die '$source' "is empty"
	shift 1
	clean_objects "$source"

	local toolchain_prefix="$1"
	shift 1

	use_intermediate="false"
	[ "$toolchain_prefix" != "$DESTDIR/$PREFIX_HOST" ] ||
		use_intermediate="use_intermediate"

	[ "$#" -eq "2" ] && {
		STAGE_C_FLAGS="$1"
		STAGE_CXX_FLAGS="$2"
	} ||
		regenerate_stage_flags

	shell_level_preparation "$toolchain_prefix" "$use_intermediate" "$STAGE_C_FLAGS" "$STAGE_CXX_FLAGS"

	# deploy "-S" "$MAKE_DIR/runtimes"
	# eval "$CMAKE $CMAKE_OPTIONS" 2>&1 || kill 0


	# deploy "-S" "$MAKE_DIR/llvm"
	deploy "-S" "$MAKE_DIR/$source"

	#
	# # [ -z "${KISS_DEBUG+x}" ] ||
	# printf "%s\n" "$CMAKE_OPTIONS"
	# [ ! -z "${USER_OUTPUT:+x}" ] || {
	#   : "${KISS_TMPDIR:="/tmp/$(whoami)/kiss"}" && export KISS_TMPDIR
	#   USER_OUTPUT="$KISS_TMPDIR/logs/build.log"
	# }
	# printf "%s\n" "$CMAKE_OPTIONS" >> "$USER_OUTPUT"

	# // log '$CMAKE_OPTIONS' "$CMAKE_OPTIONS"
	// log '$CMAKE $CMAKE_OPTIONS' "performing"
	/ "$CMAKE $CMAKE_OPTIONS" > /dev/null ||
	/ "$CMAKE $CMAKE_OPTIONS" > /dev/null || kill 0

	# case "$CMAKE_OPTIONS" in
	#   *"\\\$ENV{"*"}"*)
	# This is a kiss bug which does not clear ENV=/usr/bin/kiss in the shell environment, and fixed
	#       # sed replace "\\\$ENV" to "\$ENV" on all CMakeCache.txt
	# esac

}

build_globally() {
	_level_2
	local target="$1"
	local source="${2-"llvm"}"
	local use_intermediate="${3-}"
	# local toolchain_prefix="$DESTDIR/$PREFIX_HOST"
	# local target_resource_prefix="$DESTDIR/$PREFIX_HOST"
	local target_resource_prefix="$(// delegate to_target_resource_prefix "$TOOLCHAIN_PREFIX")"

	target_flags_updated "$target_resource_prefix" ||
		// builtins_target_flags "$target_resource_prefix"

	[ "$PWD" = "$MAKE_DIR" ] || cd "$MAKE_DIR"
	local search_target="$(cmake --build . --target help 2> /dev/null | grep "$target")" || :

	# [ -z "${use_intermediate:+x}" ] &&
	# [ "$(// delegate -- source_dir)" = "$source" ] &&
	#   [ ! -z "${search_target:+x}" ] &&
	#   [ -z "${search_target##*"$target"*}" ] || {
		// cue "$target" "configuration and generation [globally]"
		// regenerate "$source" "$TOOLCHAIN_PREFIX"
	# }

	# // cue "$target" "builtins preparation [globally]"
	# [ "$PWD" = "$MAKE_DIR" ] || cd "$MAKE_DIR"
	# ninja -j $jobs -C "$OUTPUT_DIR" builtins > /dev/null || kill 0

	// cue "$target" "construction [globally]"
	[ "$PWD" = "$MAKE_DIR" ] || cd "$MAKE_DIR"
	# cmake --build "$OUTPUT_DIR" --target "$target" -j $jobs > /dev/null || kill 0
	ninja -j $jobs -C "$OUTPUT_DIR" "$target" > /dev/null || kill 0

	// cue "$target" "installation [globally]"
	[ "$PWD" = "$MAKE_DIR" ] || cd "$MAKE_DIR"
	# ninja -j $jobs -C "$OUTPUT_DIR" "install-$target" > /dev/null || {
	ninja -C "$OUTPUT_DIR" "install-$target" > /dev/null || {
		[ "$PWD" = "$MAKE_DIR" ] || cd "$MAKE_DIR"
		// cue "$target" "configuration and generation [globally]"
		// regenerate "$source" "$TOOLCHAIN_PREFIX"
		// cue "$target" "installation [globally again]"
		# ninja -j $jobs -C "$OUTPUT_DIR" "install-$target" > /dev/null || kill 0
		# ninja -C "$OUTPUT_DIR" "install-$target" > /dev/null || kill 0
		#
		# ninja -C "$OUTPUT_DIR" "llvm-tblgen" > /dev/null || kill 0
		# ninja -C "$OUTPUT_DIR" "clang-tblgen" > /dev/null || kill 0
		#
		# file INSTALL cannot find
		# "/tmp/root/kiss/objects/llvm/lib/libLLVMTableGenCommon.so.18git": No such
		# install-LLVMTableGenCommon: phony
		ninja -C "$OUTPUT_DIR" "install-LLVMTableGenCommon" > /dev/null || kill 0
		ninja -C "$OUTPUT_DIR" "libLLVMFuzzerCLI.so" > /dev/null || kill 0

		cmake --install "$OUTPUT_DIR" > /dev/null || kill 0

		clean_objects "$source"
	}
}

# [ -f "$DESTDIR/$PREFIX_HOST/bin/llvm-tblgen" ] ||
	// build_globally "llvm-tblgen"

# [ "$bootstrap" = "1" ] ||
# ninja -C "$OUTPUT_DIR" clang-tblgen 2>&1 || kill 0

# [ -f "$DESTDIR/$PREFIX_HOST/bin/clang-tblgen" ] ||
	// build_globally "clang-tblgen"

build_clang_globally() {
	_level_2
	local toolchain_prefix="$1"
	local target_resource_prefix="$(// delegate to_target_resource_prefix "$toolchain_prefix")"

	target_flags_updated "$target_resource_prefix" ||
		// builtins_target_flags "$target_resource_prefix"

	[ "$PWD" = "$MAKE_DIR" ] || cd "$MAKE_DIR"
	local search_target="$(cmake --build . --target help 2> /dev/null | grep "clang")" || :

	[ "$(// delegate -- source_dir)" = "llvm" ] &&
		[ ! -z "${search_target:+x}" ] &&
		[ -z "${search_target##*"clang"*}" ] || {
		// cue "clang" "configuration and generation [globally]"
		// regenerate "llvm" "$toolchain_prefix"
	}
	# // regenerate "llvm"

	// cue 'clang' "construction"
	cmake --build "$OUTPUT_DIR" --target clang -j $jobs > /dev/null || kill 0
	# ninja -j $jobs -C "$OUTPUT_DIR" check-clang 2>&1 || :

	# ********************
	# Expectedly Failed Tests (24):
	#   Clang :: ARCMT/GC-no-arc-runtime.m
	#   Clang :: ASTMerge/APValue/APValue.cpp
	#   Clang :: ASTMerge/function-cpp/test.cpp
	#   Clang :: Analysis/container-modeling-no-aggressive-binary-operation-simplification-warn.cpp
	#   Clang :: Analysis/iterator-modeling-no-aggressive-binary-operation-simplification-no-crash.cpp
	#   Clang :: Analysis/outofbound-notwork.c
	#   Clang :: Analysis/redecl.c
	#   Clang :: Analysis/string-fail.c
	#   Clang :: CXX/temp/temp.res/temp.dep.res/temp.point/p1.cpp
	#   Clang :: CodeGen/callback_pthread_create.c
	#   Clang :: CodeGen/libcalls-d.c
	#   Clang :: CodeGen/libcalls-ld.c
	#   Clang :: CodeGenCXX/address-space-of-this.cpp
	#   Clang :: CodeGenCXX/conversion-function.cpp
	#   Clang :: CodeGenCXX/cxx20-module-extern-1.cppm
	#   Clang :: CodeGenCXX/sanitize-dtor-trivial.cpp
	#   Clang :: Driver/gfortran.f90
	#   Clang :: FixIt/fixit-pmem.cpp
	#   Clang :: InterfaceStubs/object-double.c
	#   Clang :: PCH/changed-files.c
	#   Clang :: PCH/source-manager-stack.c
	#   Clang :: Parser/cxx-ambig-decl-expr-xfail.cpp
	#   Clang :: SemaCXX/switch-implicit-fallthrough-cxx98.cpp
	#   Clang :: SemaTemplate/instantiate-function-1.mm
	#
	# ********************
	# Failed Tests (11):
	#   Clang :: APINotes/yaml-roundtrip-2.test
	#   Clang :: APINotes/yaml-roundtrip.test
	#   Clang :: Driver/crash-diagnostics-dir-3.c
	#   Clang :: Driver/crash-diagnostics-dir.c
	#   Clang :: Driver/crash-report-clang-cl.cpp
	#   Clang :: Driver/crash-report-header.h
	#   Clang :: Driver/crash-report-spaces.c
	#   Clang :: Driver/crash-report.cpp
	#   Clang :: Driver/emit-reproducer.c
	#   Clang :: Driver/hip-link-bundle-archive.hip
	#   Clang :: Driver/output-file-cleanup.c
	#
	#
	# Testing Time: 293.38s
	#   Skipped          :    35
	#   Unsupported      :  2920
	#   Passed           : 31101
	#   Expectedly Failed:    24
	#   Failed           :    11
	# ninja: job failed: cd /tmp/$LOGNAME/kiss/proc/make/llvm/objects/tools/clang/test && /usr/bin/python3.11 /tmp/$LOGNAME/kiss/proc/make/llvm/objects/./bin/llvm-lit -vv --show-unsupported --show-xfail -j 13 --param USE_Z3_SOLVER=0 /tmp/$LOGNAME/kiss/proc/make/llvm/objects/tools/clang/test

	# runtimes_dir: "$DESTDIR/$PREFIX_HOST/lib/clang/18/lib/x86_64-linux-musl"
	// fix_clang_libs_folder_name "$OUTPUT_DIR/lib/clang"

	cd "$MAKE_DIR"

	// cue 'clang' "installation"
	ninja -j $jobs -C "$OUTPUT_DIR" install-clang > /dev/null || kill 0

	// fix_clang_libs_folder_name "$DESTDIR/$PREFIX_HOST/lib/clang"

	// install_clang_libs

	cd "$MAKE_DIR"
}

# [ -f "$DESTDIR/$PREFIX_HOST/bin/clang" ] ||
// build_clang_globally "$TOOLCHAIN_PREFIX"


[ "$PWD" = "$MAKE_DIR" ] || cd "$MAKE_DIR"

# // cue 'clear' "cmake cache"
# find $OUTPUT_DIR -mindepth 1 -maxdepth 1 -exec \rm -rf {} +
# deploy "-S" "$MAKE_DIR/llvm"
# eval "$CMAKE $CMAKE_OPTIONS" 2>&1 || kill 0

[ -f "$DESTDIR/$PREFIX_HOST/bin/llvm-config" ] ||
	// build_globally "llvm-config"

dest_resource_dir="$DESTDIR/$PREFIX_HOST/lib/clang/$version_target"
[ -d "$dest_resource_dir" ] ||
[ -L "$dest_resource_dir" ] || {
	dest_resource_dir="$DESTDIR/$PREFIX_HOST/lib/clang/$version_target_major"
	[ -d "$dest_resource_dir" ] ||
	[ -L "$dest_resource_dir" ] ||
	// die '$dest_resource_dir' "does not eixist '$dest_resource_dir'"
}

# Hard to build globally with NOT LLVM_RUNTIMES_BUILD
# [ -f "$dest_resource_dir/lib/$KISS_XHOST_TRIPLE/libclang_rt.builtins.a" ] ||
# [ -f "$dest_resource_dir/lib/linux/libclang_rt.builtins-$libname.a" ] ||
	# // build_globally "compiler-rt" "llvm" "use_intermediate"
// build_globally "runtimes" "llvm" "use_intermediate"

# // cue 'compiler-rt' "construction"
# cmake --build "$OUTPUT_DIR" --target compiler-rt -j $jobs > /dev/null || kill 0
# // cue 'compiler-rt' "installation"
# ninja -j $jobs -C "$OUTPUT_DIR" install-compiler-rt > /dev/null || kill 0

# cmake --build "$OUTPUT_DIR" --target compiler-rt -j $jobs 2>&1 || kill 0
# ninja -j $jobs -C "$OUTPUT_DIR" install-compiler-rt 2>&1 || kill 0

# # ninja: unknown target 'libcxx'
# cmake --build "$OUTPUT_DIR" --target cxx cxxabi unwind -j $jobs 2>&1 || kill 0
# ninja -j $jobs -C "$OUTPUT_DIR" install-cxx install-cxxabi install-unwind 2>&1 || kill 0

[ -f "$DESTDIR/$PREFIX_HOST/bin/lld" ] ||
	// build_globally "lld"

# libunwind could not find it ?
[ ! -f "$OUTPUT_DIR/include/x86_64-linux-musl/c++/v1/__config_site" ] || {
	[ -d "$OUTPUT_DIR/include/c++/v1" ] ||
	\mkdir -p "$OUTPUT_DIR/include/c++/v1"
	\cp $OUTPUT_DIR/include/x86_64-linux-musl/c++/v1/__config_site \
		$OUTPUT_DIR/include/c++/v1/

	[ -d "$DESTDIR/$PREFIX_HOST/include/c++/v1" ] ||
	\mkdir -p "$DESTDIR/$PREFIX_HOST/include/c++/v1"
	\cp $OUTPUT_DIR/include/x86_64-linux-musl/c++/v1/__config_site \
		"$DESTDIR/$PREFIX_HOST/include/c++/v1/"
}

fix_builtins "$libname" "$dest_resource_dir/lib/$LLVM_DEFAULT_TARGET_TRIPLE/libclang_rt.builtins.a"
fix_builtins "$libname" "$dest_resource_dir/lib/$LLVM_DEFAULT_TARGET_TRIPLE/clang_rt.crtbegin.o"
fix_builtins "$libname" "$dest_resource_dir/lib/$LLVM_DEFAULT_TARGET_TRIPLE/clang_rt.crtend.o"

# cd "$DESTDIR/$PREFIX_HOST/lib/clang/$version_target_major/lib"
# [ -d "linux" ] || \mkdir "linux"
# cd "linux"
# [ ! -f "../$KISS_XHOST_TRIPLE/libclang_rt.builtins.a" ] ||
# {
#   {
#       [ -L "libclang_rt.builtins-x86_64.a" ] &&
#       [ "$(readlink -f "libclang_rt.builtins-x86_64.a")" = "../$KISS_XHOST_TRIPLE/libclang_rt.builtins.a" ]
#   } ||
#   [ -f "libclang_rt.builtins-x86_64.a" ]
# } || {
#   [ -L "libclang_rt.builtins-x86_64.a" ] && \rm -f "libclang_rt.builtins-x86_64.a"
#   \ln -sf "../$KISS_XHOST_TRIPLE/libclang_rt.builtins.a" "libclang_rt.builtins-x86_64.a"
# }
# \ln -sf "../$KISS_XHOST_TRIPLE/clang_rt.crtbegin.o"    "clang_rt.crtbegin-x86_64.o"
# \ln -sf "../$KISS_XHOST_TRIPLE/clang_rt.crtend.o"      "clang_rt.crtend-x86_64.o"


# // build_globally "compiler-rt"
# Needs cxxflags has c++/v1
# // build_globally "unwind"
# ninja: unknown target 'cxx'
# ninja: unknown target 'libcxx'
# ninja -C "$OUTPUT_DIR" cxx cxxabi unwind                          # Build
# ninja -C "$OUTPUT_DIR" libcxx libcxxabi libunwind                          # Build
# ninja -C "$OUTPUT_DIR" check-libcxx check-libcxxabi check-libunwind        # Test
# ninja -C "$OUTPUT_DIR" install-libcxx install-libcxxabi install-libunwind  # Install

# Does not want cxxflags having c++/v1
# // build_globally "cxxabi" "llvm" "use_intermediate"
# // build_globally "cxx"    "llvm" "use_intermediate"
#
# // build_globally "runtimes" "llvm" "use_intermediate"

# // build_globally "llvm-libgcc" "llvm" "use_intermediate"

[ "$PWD" = "$MAKE_DIR" ] || cd "$MAKE_DIR"

# // build_runtimes

# clean_objects "llvm"

# toolchain_prefix="$(// delegate tool_chain "$DESTDIR/$PREFIX_HOST" "bin/clang" "bin/clang++")"
// tool_chain "$DESTDIR/$PREFIX_HOST" "bin/clang" "bin/clang++"

target_flags_updated "$DESTDIR/$PREFIX_HOST" ||
	// builtins_target_flags "$DESTDIR/$PREFIX_HOST"

STAGE_C_FLAGS="$BUILTINS_TARGET_CMAKE_C_FLAGS"
export STAGE_C_FLAGS
// log '$STAGE_C_FLAGS' "$STAGE_C_FLAGS"
STAGE_CXX_FLAGS="-isystem $DESTDIR/$PREFIX_HOST/include/c++/v1 $BUILTINS_TARGET_CMAKE_CXX_FLAGS"
export STAGE_CXX_FLAGS
// log '$STAGE_CXX_FLAGS' "$STAGE_CXX_FLAGS"
// log '$TOOLCHAIN_PREFIX' "$TOOLCHAIN_PREFIX"

# search_target="$(cmake --build . --target help 2> /dev/null | grep "stage2-distribution")" || :
# [ "$(// delegate -- source_dir)" = "llvm" ] &&
# [ ! -z "${search_target:+x}" ] &&
# [ -z "${search_target##*"stage2-distribution"*}" ] ||
// regenerate "llvm" "$TOOLCHAIN_PREFIX"

# No ccache?
# // build_clang_globally "$TOOLCHAIN_PREFIX"

# ninja stage2-distribution
# ninja stage2-install-distribution

# stage2 build got -resource-dir=/tmp/$LOGNAME/kiss/objects/llvm/tools/clang/stage2-bins/./lib/clang/18
# Usage:
# fake_builtins "/tmp/$LOGNAME/kiss/objects/llvm/tools/clang/stage2-bins/./lib/clang/18"
# Based on LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default=OFF
# LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default=ON doesn't work by default on llvm-18.0.0
fake_builtins() {
	local resource_dir="$1"
	# $source = /working/kiss/proc/pkg/llvm/usr/lib/clang/$version_target/lib/linux
	# $source = /tmp/$LOGNAME/kiss/objects/llvm/lib/clang/$version_target/lib/linux
	local source="$OUTPUT_DIR/lib/clang/$version_target/lib/linux"
	# Installed $source = /working/kiss/proc/pkg/llvm/usr/lib/clang/18/lib/linux/
	# Installed $source = /working/kiss/proc/pkg/llvm/usr/lib/clang/$version_target/lib/linux/
	[ -d "$source" ] || source="$DESTDIR/$PREFIX_HOST/lib/clang/$version_target/lib/linux"
	# $anchor_name = /tmp/$LOGNAME/kiss/proc/make/llvm/objects/tools/clang/stage2-bins/./lib/clang/18.0.0/lib/linux
	local anchor_name="$resource_dir/lib/linux"
	local anchor_dir="${anchor_name%/*}"
	[ -d "$anchor_dir" ] || \mkdir -p "$anchor_dir"
	[ "$(readlink -f "$anchor_name")" = "$source" ] || {
		[ ! -L "$anchor_name" ] || \rm -f "$anchor_name"
		[ ! -d "$anchor_name" ] || \rm -rf "$anchor_name"
		\ln -sf "$source" "$anchor_dir/"
	}
}

[ "$bootstrap" != "1" ] || {
	# // cue 'stage2 [1st run]' "'stage2' construction"
	# fake_builtins "$OUTPUT_DIR/tools/clang/stage2-bins/lib/clang/$version_target"
	# cmake --build "$OUTPUT_DIR" --target "stage2" -j "$jobs" > /dev/null || kill 0
	#
	# [ "$PWD" = "$MAKE_DIR" ] || cd "$MAKE_DIR"
	# // cue 'stage2-distribution [1st run]' "'stage2-distribution' construction"
	# fake_builtins "$OUTPUT_DIR/tools/clang/stage2-distribution-bins/lib/clang/$version_target"
	# cmake --build "$OUTPUT_DIR" --target "stage2-distribution" -j "$jobs" > /dev/null || kill 0

	[ "$PWD" = "$MAKE_DIR" ] || cd "$MAKE_DIR"
	// cue 'stage2 [1st run]' "'stage2' installation"
	fake_builtins "$OUTPUT_DIR/tools/clang/stage2-install-distribution-bins/lib/clang/$version_target"
	cmake --build "$OUTPUT_DIR" --target "stage2-install-distribution" -j "$jobs" > /dev/null || kill 0
}

# [ -f "${build_prefix}/bin/clang-tblgen" ] || build_prefix="$OUTPUT_DIR"
// log '$build_prefix' "$build_prefix"
// log '$CFLAGS   of last stage' "$CFLAGS"
// log '$CXXFLAGS of last stage' "$CXXFLAGS"
# RESOURCE_DIR_FOR_CHECK="$RESOURCE_DIR_HOST"
# BINDIR_HOST_CHECK="$BINDIR_HOST"

# clean_objects "llvm"

# toolchain_prefix="$(// delegate tool_chain "$DESTDIR/$PREFIX_HOST" "bin/clang" "bin/clang++")"
// tool_chain "$DESTDIR/$PREFIX_HOST" "bin/clang" "bin/clang++"

target_flags_updated "$DESTDIR/$PREFIX_HOST" ||
	// builtins_target_flags "$DESTDIR/$PREFIX_HOST"

STAGE_C_FLAGS="$BUILTINS_TARGET_CMAKE_C_FLAGS"
export STAGE_C_FLAGS
// log '$STAGE_C_FLAGS' "$STAGE_C_FLAGS"
STAGE_CXX_FLAGS="-isystem $DESTDIR/$PREFIX_HOST/include/c++/v1 $BUILTINS_TARGET_CMAKE_CXX_FLAGS"
export STAGE_CXX_FLAGS
// log '$STAGE_CXX_FLAGS' "$STAGE_CXX_FLAGS"
// log '$TOOLCHAIN_PREFIX' "$TOOLCHAIN_PREFIX"

// regenerate "llvm" "$TOOLCHAIN_PREFIX"

// build_clang_globally "$TOOLCHAIN_PREFIX"
# // build_globally "clang"
# // build_globally "runtimes"
// build_globally "stage2"

[ "$PWD" = "$MAKE_DIR" ] || cd "$MAKE_DIR"

# clean_objects "llvm"

# [ "$(// delegate -- source_dir)" = "llvm" ] ||
// regenerate "llvm" "$TOOLCHAIN_PREFIX"

# https://github.com/llvm/llvm-project/issues/58219
# When put openmp in projects list
# The dependency target "omptarget.devicertl.amdgpu" of target
# "omptarget.rtl.amdgpu" does not exist.
# Reomved openmp from projects list
# VERBOSE=1 cmake --build "$OUTPUT_DIR" -j 12 --target llvm-extract stage2 2>&1 || kill 0

# These operations only can be done in configure stage
	# -C "$OUTPUT_DIR/NATIVE/CMakeFiles/$CMAKE_VERSION/CMakeCCompiler.cmake" \
	# -C "$OUTPUT_DIR/NATIVE/CMakeFiles/$CMAKE_VERSION/CMakeCXXCompiler.cmake" \

# // cue 'stage2 [2nd run]' "'stage2' construction"
# fake_builtins "$OUTPUT_DIR/tools/clang/stage2-bins/lib/clang/$version_target"
# cmake --build "$OUTPUT_DIR" --target "stage2" -j "$jobs" > /dev/null || kill 0
#
# [ "$PWD" = "$MAKE_DIR" ] || cd "$MAKE_DIR"
# // cue 'stage2-distribution [2nd run]' "'stage2-distribution' construction"
# fake_builtins "$OUTPUT_DIR/tools/clang/stage2-distribution-bins/lib/clang/$version_target"
# cmake --build "$OUTPUT_DIR" --target "stage2-distribution" -j "$jobs" > /dev/null || kill 0

[ "$PWD" = "$MAKE_DIR" ] || cd "$MAKE_DIR"
// cue '$build_target' "'$build_target' construction"
fake_builtins "$OUTPUT_DIR/tools/clang/$build_target-bins/lib/clang/$version_target"
cmake --build "$OUTPUT_DIR" --target "$build_target" -j "$jobs" > /dev/null || kill 0
# ninja -j $jobs -C "$OUTPUT_DIR" $build_target 2>&1 || kill 0

// cue '$build_target' "'$build_target' installation"
cmake --install "$OUTPUT_DIR" -j $jobs 2>&1 || kill 0
# python3 llvm/utils/lit/setup.py "$OUTPUT_DIR" 2>&1 || kill 0

[ -d "$DESTDIR/$PREFIX_HOST/bin" ] || mkdir -p "$DESTDIR/$PREFIX_HOST/bin"
cp -r libcxxabi/include "$DESTDIR/$PREFIX_HOST"
# Clang: clang-tblgen, required for crossbuilding.
[ -f "${build_prefix}/bin/clang-tblgen" ] || build_prefix="$OUTPUT_DIR"
cp "${build_prefix}"/bin/llvm-tblgen   "$DESTDIR"/$PREFIX_HOST/bin/llvm-tblgen
cp "${build_prefix}"/bin/clang-tblgen  "$DESTDIR"/$PREFIX_HOST/bin/clang-tblgen
cp "${build_prefix}"/lib/libPollyISL.a "$DESTDIR"/$PREFIX_HOST/lib/libPollyISL.a
cp "${build_prefix}"/lib/libPolly.a    "$DESTDIR"/$PREFIX_HOST/lib/libPolly.a

cd "$DESTDIR"/$PREFIX_HOST/bin
# LLD: Replace GNU binutils
ln -s -f ld.lld         "$DESTDIR/$PREFIX_HOST/bin/ld"
# Clang: Some legacy    programs may require cc
ln -s -f clang          "$DESTDIR/$PREFIX_HOST/bin/cc"
# Clang: equivalent for c++
ln -s -f clang++        "$DESTDIR/$PREFIX_HOST/bin/c++"
# Clang: equivalent for cpp
ln -s -f clang-cpp      "$DESTDIR/$PREFIX_HOST/bin/cpp"

# Clang: POSIX compliance
cp files/c99 "$DESTDIR"/$PREFIX_HOST/bin
chmod 755 "$DESTDIR/$PREFIX_HOST/bin/c99"

# Clang: Override libexec, the path is hardcoded, unfortunately.
\mv -f \
	"$DESTDIR/$PREFIX_HOST/libexec/"*analyze* \
	"$DESTDIR/$PREFIX_HOST/libexec/"*intercept* \
	"$DESTDIR/$PREFIX_HOST/lib/clang/"

\rmdir "$DESTDIR/$PREFIX_HOST/libexec"

sed -e "s|libexec|lib/clang|" < "$DESTDIR/$PREFIX_HOST/bin/scan-build" > _
\mv -f _ "$DESTDIR/$PREFIX_HOST/bin/scan-build"
chmod +x "$DESTDIR/$PREFIX_HOST/bin/scan-build"

# For GCC compatibility
cd "$DESTDIR"/$PREFIX_HOST/bin
ln -s -f llvm-readobj  readelf
ln -s -f llvm-objcopy  strip
ln -s -f llvm-ar       ar
ln -s -f llvm-nm       nm
ln -s -f llvm-objcopy  objcopy
ln -s -f llvm-objdump  objdump
ln -s -f llvm-strings  strings
ln -s -f llvm-objcopy  otool
ln -s -f llvm-ranlib   ranlib
ln -s -f llvm-as       as

# kiss uses /usr/lib/clang
# This makes things like Rust easier:
cd "$DESTDIR"/$PREFIX_HOST/lib/clang
[ ! -d "$version_target_major" ] || {
	[ -d "$version_target" ] && {
		rsync -aqz --remove-source-files "$version_target_major/." "$version_target/"
		sync
		\rm -rf "$version_target_major"
	} ||
	\mv "$version_target_major" "$version_target"
}

ln -s -f "$version_target" system

cd "$DESTDIR"/$PREFIX_HOST/lib
# ln -s -f "clang/$version_target/lib/x86_64-linux-musl/clang_rt.crtbegin.o"    "crtbegin.o"
builtins_suffix=""
builtins_path="clang/$version_target/lib/${LLVM_DEFAULT_TARGET_TRIPLE}"
[ "$LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default" = "ON" ] || {
	# ln -s -f "clang/$version_target/lib/linux/clang_rt.crtbegin-$libname.o"    "crtbegin.o"
	builtins_suffix="-$libname"
	builtins_path="clang/$version_target/lib/linux"
}

ln -s -f "$builtins_path/clang_rt.crtbegin$builtins_suffix.o"    "crtbegin.o"
ln -s -f "$builtins_path/clang_rt.crtbegin$builtins_suffix.o"    "crtbeginS.o"
ln -s -f "$builtins_path/clang_rt.crtend$builtins_suffix.o"      "crtend.o"
ln -s -f "$builtins_path/clang_rt.crtend$builtins_suffix.o"      "crtendS.o"
ln -s -f "$builtins_path/libclang_rt.builtins$builtins_suffix.a" "libatomic.a"

# [ -d "$DESTDIR/$PREFIX_HOST/lib/llvm" ] || \mkdir -p "$DESTDIR/$PREFIX_HOST/lib/llvm"
# /usr/lib/llvm/17.0.0/lib/clang/17
[ ! -d "$DESTDIR/$PREFIX_HOST/lib/llvm/$version_target/lib/clang/$version_target_major" ] || {
	cd "$DESTDIR/$PREFIX_HOST/lib/llvm"
	[ ! -L "$version_target/lib/clang/$version_target" ] || \rm -f "$version_target/lib/clang/$version_target"
	[ -d "$version_target/lib/clang/$version_target" ] && {
		[ ! -d "$version_target/lib/clang/$version_target_major" ] || {
			rsync -aqz --remove-source-files "$version_target/lib/clang/$version_target_major/." \
			"$version_target/lib/clang/$version_target/"
			\rm -rf "$version_target/lib/clang/$version_target_major"
		}
	} ||
	\mv "$version_target/lib/clang/$version_target_major" \
		"$version_target/lib/clang/$version_target"
	ln -s -f "$version_target" "system"
}

# Use new llvm-config to generate a pkg-config file.
path_prepend PATH "$DESTDIR/$PREFIX_HOST/bin"
# [ ! -z "${PATH:+x}" ] &&
# [ -z "${PATH##"$DESTDIR/$PREFIX_HOST/bin:"*}" ] ||
#   PATH="$DESTDIR/$PREFIX_HOST/bin${PATH:+":$PATH"}"
# export PATH

\mkdir -p "$DESTDIR/$PREFIX_HOST/lib/pkgconfig"

# shellcheck disable=2016
sed -e "s|$DESTDIR||" -e 's|/usr/include|\${includedir}|' \
	> "$DESTDIR/$PREFIX_HOST/lib/pkgconfig/llvm.pc" << EOF
prefix=/usr
exec_prefix=\${prefix}
libdir=\${exec_prefix}/lib
includedir=\${prefix}/include
has_rtti=$(llvm-config --has-rtti)

Name: LLVM
Description: LLVM compiler infrastructure
URL: https://llvm.org
Version: $(llvm-config --version)
Requires:
Requires.private: zlib
Libs: -L\${libdir} $(llvm-config --libs)
Libs.private: -lc++ $(llvm-config --libs --link-static)
Cflags: $(llvm-config --cflags)
EOF

