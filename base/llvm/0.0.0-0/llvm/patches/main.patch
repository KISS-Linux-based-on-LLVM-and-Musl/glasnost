# diff a/llvm/CMakeLists.txt b/llvm/CMakeLists.txt
# --- a/llvm/CMakeLists.txt
# +++ b/llvm/CMakeLists.txt
# @@ -156,7 +156,7 @@
#  # As we migrate runtimes to using the bootstrapping build, the set of default runtimes
#  # should grow as we remove those runtimes from LLVM_ENABLE_PROJECTS above.
#  set(LLVM_DEFAULT_RUNTIMES "libcxx;libcxxabi;libunwind")
# -set(LLVM_SUPPORTED_RUNTIMES "libc;libunwind;libcxxabi;pstl;libcxx;compiler-rt;openmp;llvm-libgcc")
# +set(LLVM_SUPPORTED_RUNTIMES "libc;libunwind;libcxxabi;pstl;libcxx;compiler-rt;openmp")
#  set(LLVM_ENABLE_RUNTIMES "" CACHE STRING
#    "Semicolon-separated list of runtimes to build, or \"all\" (${LLVM_DEFAULT_RUNTIMES}). Supported runtimes are ${LLVM_SUPPORTED_RUNTIMES}.")
#  if(LLVM_ENABLE_RUNTIMES STREQUAL "all")
# @@ -564,9 +564,9 @@
#    option(LLVM_ENABLE_MODULE_DEBUGGING "Compile with -gmodules." OFF)
#  endif()
#  option(LLVM_ENABLE_LOCAL_SUBMODULE_VISIBILITY "Compile with -fmodules-local-submodule-visibility." ON)
# -option(LLVM_ENABLE_LIBCXX "Use libc++ if available." OFF)
# +option(LLVM_ENABLE_LIBCXX "Use libc++ if available." ON)
#  option(LLVM_STATIC_LINK_CXX_STDLIB "Statically link the standard library." OFF)
# -option(LLVM_ENABLE_LLD "Use lld as C and C++ linker." OFF)
# +option(LLVM_ENABLE_LLD "Use lld as C and C++ linker." ON)
#  option(LLVM_ENABLE_PEDANTIC "Compile with pedantic enabled." ON)
#  option(LLVM_ENABLE_WERROR "Fail and stop if a warning is triggered." OFF)
# 
# 
# diff --git a/llvm/CMakeLists.txt b/llvm/CMakeLists.txt
# index 8a02f017cac7..72559b006912 100644
# --- a/llvm/CMakeLists.txt
# +++ b/llvm/CMakeLists.txt
# @@ -819,9 +819,13 @@ mark_as_advanced(LLVM_TARGET_TRIPLE_ENV)
# 
#  # Per target dir not yet supported on Arm 32 bit due to arm vs armhf handling
#  if(CMAKE_SYSTEM_NAME MATCHES "BSD|Linux" AND NOT CMAKE_SYSTEM_PROCESSOR MATCHES "^arm")
# -  set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default ON)
# +  if (LLVM_TARGET_TRIPLE MATCHES "$ENV{KISS_XHOST_TRIPLE}")
# +    set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default OFF)
# +  else()
# +    set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default ON)
# +  endif()
#  else()
# -  set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default OFF)
# +    set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default OFF)
#  endif()
#  set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR ${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default} CACHE BOOL
#    "Enable per-target runtimes directory")

# diff a/llvm/CMakeLists.txt b/llvm/CMakeLists.txt
# --- a/llvm/CMakeLists.txt
# +++ b/llvm/CMakeLists.txt
# @@ -67,7 +67,7 @@
#  include(GNUInstallDirs)
# 
#  # This C++ standard is required to build LLVM.
# -set(LLVM_REQUIRED_CXX_STANDARD 17)
# +set(LLVM_REQUIRED_CXX_STANDARD 20)
# 
#  # If we find that the cache contains CMAKE_CXX_STANDARD it means that it's a old CMakeCache.txt
#  # and we can just inform the user and then reset it.
# @@ -156,7 +156,7 @@
#  # As we migrate runtimes to using the bootstrapping build, the set of default runtimes
#  # should grow as we remove those runtimes from LLVM_ENABLE_PROJECTS above.
#  set(LLVM_DEFAULT_RUNTIMES "libcxx;libcxxabi;libunwind")
# -set(LLVM_SUPPORTED_RUNTIMES "libc;libunwind;libcxxabi;pstl;libcxx;compiler-rt;openmp;llvm-libgcc")
# +set(LLVM_SUPPORTED_RUNTIMES "libc;libunwind;libcxxabi;pstl;libcxx;compiler-rt;openmp")
#  set(LLVM_ENABLE_RUNTIMES "" CACHE STRING
#    "Semicolon-separated list of runtimes to build, or \"all\" (${LLVM_DEFAULT_RUNTIMES}). Supported runtimes are ${LLVM_SUPPORTED_RUNTIMES}.")
#  if(LLVM_ENABLE_RUNTIMES STREQUAL "all")
# @@ -554,9 +554,9 @@
#    option(LLVM_ENABLE_MODULE_DEBUGGING "Compile with -gmodules." OFF)
#  endif()
#  option(LLVM_ENABLE_LOCAL_SUBMODULE_VISIBILITY "Compile with -fmodules-local-submodule-visibility." ON)
# -option(LLVM_ENABLE_LIBCXX "Use libc++ if available." OFF)
# +option(LLVM_ENABLE_LIBCXX "Use libc++ if available." ON)
#  option(LLVM_STATIC_LINK_CXX_STDLIB "Statically link the standard library." OFF)
# -option(LLVM_ENABLE_LLD "Use lld as C and C++ linker." OFF)
# +option(LLVM_ENABLE_LLD "Use lld as C and C++ linker." ON)
#  option(LLVM_ENABLE_PEDANTIC "Compile with pedantic enabled." ON)
#  option(LLVM_ENABLE_WERROR "Fail and stop if a warning is triggered." OFF)
# 
# @@ -819,9 +819,13 @@
# 
#  # Per target dir not yet supported on Arm 32 bit due to arm vs armhf handling
#  if(CMAKE_SYSTEM_NAME MATCHES "BSD|Linux" AND NOT CMAKE_SYSTEM_PROCESSOR MATCHES "^arm")
# -  set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default ON)
# +  if (LLVM_TARGET_TRIPLE MATCHES "$ENV{KISS_XHOST_TRIPLE}")
# +    set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default OFF)
# +  else()
# +    set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default ON)
# +  endif()
#  else()
# -  set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default OFF)
# +    set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default OFF)
#  endif()
#  set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR ${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default} CACHE BOOL
#    "Enable per-target runtimes directory")
# @@ -842,10 +846,18 @@
#  find_package(Python3 ${LLVM_MINIMUM_PYTHON_VERSION} REQUIRED
#      COMPONENTS Interpreter)
# 
# +set(c_cache "${CMAKE_C_FLAGS}")
# +set(CMAKE_C_FLAGS "")
# +set(cxx_cache "${CMAKE_CXX_FLAGS}")
# +set(CMAKE_CXX_FLAGS "")
#  # All options referred to from HandleLLVMOptions have to be specified
#  # BEFORE this include, otherwise options will not be correctly set on
#  # first cmake run
#  include(config-ix)
# +set(CMAKE_C_FLAGS "${c_cache}")
# +unset(c_cache CACHE)
# +set(CMAKE_CXX_FLAGS "${cxx_cache}")
# +unset(cxx_cache CACHE)
# 
#  # By default, we target the host, but this can be overridden at CMake
#  # invocation time. Except on 64-bit AIX, where the system toolchain

# git --diff a/llvm/CMakeLists.txt b/llvm/CMakeLists.txt
# --- a/llvm/CMakeLists.txt
# +++ b/llvm/CMakeLists.txt
# @@ -67,7 +67,7 @@
#  include(GNUInstallDirs)
# 
#  # This C++ standard is required to build LLVM.
# -set(LLVM_REQUIRED_CXX_STANDARD 17)
# +set(LLVM_REQUIRED_CXX_STANDARD 20)
# 
#  # If we find that the cache contains CMAKE_CXX_STANDARD it means that it's a old CMakeCache.txt
#  # and we can just inform the user and then reset it.
# @@ -156,7 +156,7 @@
#  # As we migrate runtimes to using the bootstrapping build, the set of default runtimes
#  # should grow as we remove those runtimes from LLVM_ENABLE_PROJECTS above.
#  set(LLVM_DEFAULT_RUNTIMES "libcxx;libcxxabi;libunwind")
# -set(LLVM_SUPPORTED_RUNTIMES "libc;libunwind;libcxxabi;pstl;libcxx;compiler-rt;openmp;llvm-libgcc")
# +set(LLVM_SUPPORTED_RUNTIMES "libc;libunwind;libcxxabi;pstl;libcxx;compiler-rt;openmp")
#  set(LLVM_ENABLE_RUNTIMES "" CACHE STRING
#    "Semicolon-separated list of runtimes to build, or \"all\" (${LLVM_DEFAULT_RUNTIMES}). Supported runtimes are ${LLVM_SUPPORTED_RUNTIMES}.")
#  if(LLVM_ENABLE_RUNTIMES STREQUAL "all")
# @@ -554,9 +554,9 @@
#    option(LLVM_ENABLE_MODULE_DEBUGGING "Compile with -gmodules." OFF)
#  endif()
#  option(LLVM_ENABLE_LOCAL_SUBMODULE_VISIBILITY "Compile with -fmodules-local-submodule-visibility." ON)
# -option(LLVM_ENABLE_LIBCXX "Use libc++ if available." OFF)
# +option(LLVM_ENABLE_LIBCXX "Use libc++ if available." ON)
#  option(LLVM_STATIC_LINK_CXX_STDLIB "Statically link the standard library." OFF)
# -option(LLVM_ENABLE_LLD "Use lld as C and C++ linker." OFF)
# +option(LLVM_ENABLE_LLD "Use lld as C and C++ linker." ON)
#  option(LLVM_ENABLE_PEDANTIC "Compile with pedantic enabled." ON)
#  option(LLVM_ENABLE_WERROR "Fail and stop if a warning is triggered." OFF)
# 
# @@ -819,9 +819,13 @@
# 
#  # Per target dir not yet supported on Arm 32 bit due to arm vs armhf handling
#  if(CMAKE_SYSTEM_NAME MATCHES "BSD|Linux" AND NOT CMAKE_SYSTEM_PROCESSOR MATCHES "^arm")
# -  set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default ON)
# +  if (LLVM_TARGET_TRIPLE MATCHES "$ENV{KISS_XHOST_TRIPLE}")
# +    set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default OFF)
# +  else()
# +    set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default ON)
# +  endif()
#  else()
# -  set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default OFF)
# +    set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default OFF)
#  endif()
#  set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR ${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default} CACHE BOOL
#    "Enable per-target runtimes directory")


# diff --git a/llvm/CMakeLists.txt b/llvm/CMakeLists.txt
# index f566a2ef43e3..36edf6d473d6 100644
# --- a/llvm/CMakeLists.txt
# +++ b/llvm/CMakeLists.txt
# @@ -60,7 +60,7 @@ set(LLVM_LIBDIR_SUFFIX "" CACHE STRING "Define suffix of library directory name
#  include(GNUInstallDirs)
#  
#  # This C++ standard is required to build LLVM.
# -set(LLVM_REQUIRED_CXX_STANDARD 17)
# +set(LLVM_REQUIRED_CXX_STANDARD 20)
#  
#  # If we find that the cache contains CMAKE_CXX_STANDARD it means that it's a old CMakeCache.txt
#  # and we can just inform the user and then reset it.
# @@ -149,7 +149,7 @@ endif()
#  # As we migrate runtimes to using the bootstrapping build, the set of default runtimes
#  # should grow as we remove those runtimes from LLVM_ENABLE_PROJECTS above.
#  set(LLVM_DEFAULT_RUNTIMES "libcxx;libcxxabi;libunwind")
# -set(LLVM_SUPPORTED_RUNTIMES "libc;libunwind;libcxxabi;pstl;libcxx;compiler-rt;openmp;llvm-libgcc")
# +set(LLVM_SUPPORTED_RUNTIMES "libc;libunwind;libcxxabi;pstl;libcxx;compiler-rt;openmp")
#  set(LLVM_ENABLE_RUNTIMES "" CACHE STRING
#    "Semicolon-separated list of runtimes to build, or \"all\" (${LLVM_DEFAULT_RUNTIMES}). Supported runtimes are ${LLVM_SUPPORTED_RUNTIMES}.")
#  if(LLVM_ENABLE_RUNTIMES STREQUAL "all")
# @@ -570,10 +570,10 @@ else()
#    option(LLVM_ENABLE_MODULE_DEBUGGING "Compile with -gmodules." OFF)
#  endif()
#  option(LLVM_ENABLE_LOCAL_SUBMODULE_VISIBILITY "Compile with -fmodules-local-submodule-visibility." ON)
# -option(LLVM_ENABLE_LIBCXX "Use libc++ if available." OFF)
# +option(LLVM_ENABLE_LIBCXX "Use libc++ if available." ON)
#  option(LLVM_ENABLE_LLVM_LIBC "Set to on to link all LLVM executables against LLVM libc, assuming it is accessible by the host compiler." OFF)
#  option(LLVM_STATIC_LINK_CXX_STDLIB "Statically link the standard library." OFF)
# -option(LLVM_ENABLE_LLD "Use lld as C and C++ linker." OFF)
# +option(LLVM_ENABLE_LLD "Use lld as C and C++ linker." ON)
#  option(LLVM_ENABLE_PEDANTIC "Compile with pedantic enabled." ON)
#  option(LLVM_ENABLE_WERROR "Fail and stop if a warning is triggered." OFF)
 

diff --git a/llvm/CMakeLists.txt b/llvm/CMakeLists.txt
index f566a2ef43e3..a26ba919a07d 100644
--- a/llvm/CMakeLists.txt
+++ b/llvm/CMakeLists.txt
@@ -60,7 +60,7 @@ set(LLVM_LIBDIR_SUFFIX "" CACHE STRING "Define suffix of library directory name
 include(GNUInstallDirs)
 
 # This C++ standard is required to build LLVM.
-set(LLVM_REQUIRED_CXX_STANDARD 17)
+set(LLVM_REQUIRED_CXX_STANDARD 23)
 
 # If we find that the cache contains CMAKE_CXX_STANDARD it means that it's a old CMakeCache.txt
 # and we can just inform the user and then reset it.
@@ -570,10 +570,10 @@ else()
   option(LLVM_ENABLE_MODULE_DEBUGGING "Compile with -gmodules." OFF)
 endif()
 option(LLVM_ENABLE_LOCAL_SUBMODULE_VISIBILITY "Compile with -fmodules-local-submodule-visibility." ON)
-option(LLVM_ENABLE_LIBCXX "Use libc++ if available." OFF)
+option(LLVM_ENABLE_LIBCXX "Use libc++ if available." ON)
 option(LLVM_ENABLE_LLVM_LIBC "Set to on to link all LLVM executables against LLVM libc, assuming it is accessible by the host compiler." OFF)
 option(LLVM_STATIC_LINK_CXX_STDLIB "Statically link the standard library." OFF)
-option(LLVM_ENABLE_LLD "Use lld as C and C++ linker." OFF)
+option(LLVM_ENABLE_LLD "Use lld as C and C++ linker." ON)
 option(LLVM_ENABLE_PEDANTIC "Compile with pedantic enabled." ON)
 option(LLVM_ENABLE_WERROR "Fail and stop if a warning is triggered." OFF)
 
@@ -839,8 +839,8 @@ set(LLVM_TARGET_TRIPLE_ENV CACHE STRING "The name of environment variable to ove
 mark_as_advanced(LLVM_TARGET_TRIPLE_ENV)
 
 if(CMAKE_SYSTEM_NAME MATCHES "BSD|Linux|OS390")
-  set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default ON)
-else()
+#   set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default ON)
+# else()
   set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default OFF)
 endif()
 set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR ${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default} CACHE BOOL
 

diff --git a/llvm/tools/CMakeLists.txt b/llvm/tools/CMakeLists.txt
index c6116ac81d12..1524d43c88f1 100644
--- a/llvm/tools/CMakeLists.txt
+++ b/llvm/tools/CMakeLists.txt
@@ -29,7 +29,7 @@ endif()
 # requires targets specified in DEPENDS to exist before the call to
 # ExternalProject_Add.
 add_llvm_tool_subdirectory(lto)
-add_llvm_tool_subdirectory(gold)
+# add_llvm_tool_subdirectory(gold)
 add_llvm_tool_subdirectory(llvm-ar)
 add_llvm_tool_subdirectory(llvm-config)
 add_llvm_tool_subdirectory(llvm-lto)


diff --git a/bolt/CMakeLists.txt b/bolt/CMakeLists.txt
index 4ff90c1f7b3a..5df62b3c9eda 100644
--- a/bolt/CMakeLists.txt
+++ b/bolt/CMakeLists.txt
@@ -2,7 +2,7 @@ include(ExternalProject)
 
 set(BOLT_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})
 set(BOLT_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR})
-set(CMAKE_CXX_STANDARD 17)
+set(CMAKE_CXX_STANDARD 23)
 
 # Add path for custom modules.
 list(INSERT CMAKE_MODULE_PATH 0 "${BOLT_SOURCE_DIR}/cmake/modules")
diff --git a/bolt/runtime/CMakeLists.txt b/bolt/runtime/CMakeLists.txt
index 8472ce00b413..98d80371abe5 100644
--- a/bolt/runtime/CMakeLists.txt
+++ b/bolt/runtime/CMakeLists.txt
@@ -3,7 +3,7 @@ include(CheckIncludeFiles)
 include(GNUInstallDirs)
 
 set(CMAKE_CXX_EXTENSIONS OFF)
-set(CMAKE_CXX_STANDARD 17)
+set(CMAKE_CXX_STANDARD 23)
 
 project(libbolt_rt_project)
 
diff --git a/flang/CMakeLists.txt b/flang/CMakeLists.txt
index ac30da89995e..b3a2d1e86bdc 100644
--- a/flang/CMakeLists.txt
+++ b/flang/CMakeLists.txt
@@ -9,7 +9,7 @@ include(${LLVM_COMMON_CMAKE_UTILS}/Modules/CMakePolicy.cmake
 set(CMAKE_BUILD_WITH_INSTALL_NAME_DIR ON)
 
 # Flang requires C++17.
-set(CMAKE_CXX_STANDARD 17)
+set(CMAKE_CXX_STANDARD 23)
 set(CMAKE_CXX_STANDARD_REQUIRED TRUE)
 set(CMAKE_CXX_EXTENSIONS OFF)
 
diff --git a/flang/lib/Decimal/CMakeLists.txt b/flang/lib/Decimal/CMakeLists.txt
index 3116ff68ea26..3d49128f50e2 100644
--- a/flang/lib/Decimal/CMakeLists.txt
+++ b/flang/lib/Decimal/CMakeLists.txt
@@ -3,7 +3,7 @@ if (CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
 
   project(FortranDecimal C CXX)
 
-  set(CMAKE_CXX_STANDARD 17)
+  set(CMAKE_CXX_STANDARD 23)
   set(CMAKE_CXX_STANDARD_REQUIRED TRUE)
   set(CMAKE_CXX_EXTENSIONS OFF)
 
diff --git a/flang/runtime/CMakeLists.txt b/flang/runtime/CMakeLists.txt
index 5b23065a32d1..d407a11dfd6c 100644
--- a/flang/runtime/CMakeLists.txt
+++ b/flang/runtime/CMakeLists.txt
@@ -11,7 +11,7 @@ if (CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
 
   project(FlangRuntime C CXX)
 
-  set(CMAKE_CXX_STANDARD 17)
+  set(CMAKE_CXX_STANDARD 23)
   set(CMAKE_CXX_STANDARD_REQUIRED TRUE)
   set(CMAKE_CXX_EXTENSIONS OFF)
 
diff --git a/libc/CMakeLists.txt b/libc/CMakeLists.txt
index 4be92ba1380c..210b1d6eff8c 100644
--- a/libc/CMakeLists.txt
+++ b/libc/CMakeLists.txt
@@ -8,7 +8,7 @@ include(${LLVM_COMMON_CMAKE_UTILS}/Modules/CMakePolicy.cmake
   NO_POLICY_SCOPE)
 
 # Default to C++17
-set(CMAKE_CXX_STANDARD 17)
+set(CMAKE_CXX_STANDARD 23)
 
 list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules")
 
diff --git a/libclc/CMakeLists.txt b/libclc/CMakeLists.txt
index 9daef8265c16..eeb3d69157e6 100644
--- a/libclc/CMakeLists.txt
+++ b/libclc/CMakeLists.txt
@@ -2,7 +2,7 @@ cmake_minimum_required(VERSION 3.20.0)
 
 project( libclc VERSION 0.2.0 LANGUAGES CXX C)
 
-set(CMAKE_CXX_STANDARD 17)
+set(CMAKE_CXX_STANDARD 23)
 
 include( GNUInstallDirs )
 set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS
diff --git a/mlir/CMakeLists.txt b/mlir/CMakeLists.txt
index c91e9cd93dc8..53c3b488d165 100644
--- a/mlir/CMakeLists.txt
+++ b/mlir/CMakeLists.txt
@@ -15,7 +15,7 @@ endif()
 
 # Must go below project(..)
 include(GNUInstallDirs)
-set(CMAKE_CXX_STANDARD 17)
+set(CMAKE_CXX_STANDARD 23)
 
 if(MLIR_STANDALONE_BUILD)
   find_package(LLVM CONFIG REQUIRED)
diff --git a/openmp/CMakeLists.txt b/openmp/CMakeLists.txt
index c1efcaf80b54..78d2f90b6a75 100644
--- a/openmp/CMakeLists.txt
+++ b/openmp/CMakeLists.txt
@@ -56,7 +56,7 @@ else()
 
   # If not standalone, set CMAKE_CXX_STANDARD but don't set the global cache value,
   # only set it locally for OpenMP.
-  set(CMAKE_CXX_STANDARD 17)
+  set(CMAKE_CXX_STANDARD 23)
   set(CMAKE_CXX_STANDARD_REQUIRED NO)
   set(CMAKE_CXX_EXTENSIONS NO)
 endif()






# diff --git a/llvm/cmake/modules/LLVMExternalProjectUtils.cmake b/llvm/cmake/modules/LLVMExternalProjectUtils.cmake
# index d760eee07958..c268d326585f 100644
# --- a/llvm/cmake/modules/LLVMExternalProjectUtils.cmake
# +++ b/llvm/cmake/modules/LLVMExternalProjectUtils.cmake
# @@ -256,7 +256,7 @@ function(llvm_ExternalProject_Add name source_dir)
#      if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
#        string(REGEX MATCH "^[0-9]+" CLANG_VERSION_MAJOR
#               ${PACKAGE_VERSION})
# -      set(resource_dir "${LLVM_LIBRARY_DIR}/clang/${CLANG_VERSION_MAJOR}")
# +      set(resource_dir "${LLVM_LIBRARY_DIR}/clang/${CLANG_VERSION}")
#        set(flag_types ASM C CXX MODULE_LINKER SHARED_LINKER EXE_LINKER)
#        foreach(type ${flag_types})
#          set(${type}_flag -DCMAKE_${type}_FLAGS=-resource-dir=${resource_dir})

# diff --git a/llvm/cmake/modules/LLVMExternalProjectUtils.cmake b/llvm/cmake/modules/LLVMExternalProjectUtils.cmake
# index f99a50df2..08438f03a 100644
# --- a/llvm/cmake/modules/LLVMExternalProjectUtils.cmake
# +++ b/llvm/cmake/modules/LLVMExternalProjectUtils.cmake
# @@ -258,7 +258,7 @@
#      if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
#        string(REGEX MATCH "^[0-9]+" CLANG_VERSION_MAJOR
#               ${PACKAGE_VERSION})
# -      set(resource_dir "${LLVM_LIBRARY_DIR}/clang/${CLANG_VERSION_MAJOR}")
# +      set(resource_dir "${LLVM_LIBRARY_DIR}/clang/${CLANG_VERSION}/${target}")
#        set(flag_types ASM C CXX MODULE_LINKER SHARED_LINKER EXE_LINKER)
#        foreach(type ${flag_types})
#          set(${type}_flag -DCMAKE_${type}_FLAGS=-resource-dir=${resource_dir})
# 


# diff --git a/llvm/cmake/modules/LLVMExternalProjectUtils.cmake b/llvm/cmake/modules/LLVMExternalProjectUtils.cmake
# index 4b5b600307ec..beab5d5933d7 100644
# --- a/llvm/cmake/modules/LLVMExternalProjectUtils.cmake
# +++ b/llvm/cmake/modules/LLVMExternalProjectUtils.cmake
# @@ -278,16 +278,18 @@ function(llvm_ExternalProject_Add name source_dir)
#      set(llvm_config_path ${LLVM_CONFIG_PATH})
#  
#      if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
# -      string(REGEX MATCH "^[0-9]+" CLANG_VERSION_MAJOR
# +      string(REGEX MATCH "^[0-9]+\\.[0-9]+\\.[0-9]+" CLANG_VERSION
#               ${PACKAGE_VERSION})
# -      if(DEFINED CLANG_RESOURCE_DIR AND NOT CLANG_RESOURCE_DIR STREQUAL "")
# +      if(COMPILER_RESOURCE_DIR AND NOT COMPILER_RESOURCE_DIR STREQUAL "")
# +        set(resource_dir ${COMPILER_RESOURCE_DIR})
# +      elseif(DEFINED CLANG_RESOURCE_DIR AND NOT CLANG_RESOURCE_DIR STREQUAL "")
#          set(resource_dir ${LLVM_TOOLS_BINARY_DIR}/${CLANG_RESOURCE_DIR})
#        else()
# -        set(resource_dir "${LLVM_LIBRARY_DIR}/clang/${CLANG_VERSION_MAJOR}")
# +        set(resource_dir "${LLVM_LIBRARY_DIR}/clang/${CLANG_VERSION}")
#        endif()
#        set(flag_types ASM C CXX MODULE_LINKER SHARED_LINKER EXE_LINKER)
#        foreach(type ${flag_types})
# -        set(${type}_flag -DCMAKE_${type}_FLAGS=-resource-dir=${resource_dir})
# +        set(${type}_flag "-DCMAKE_${type}_FLAGS=-resource-dir=${resource_dir} ${CMAKE_${type}_FLAGS}")
#        endforeach()
#        string(REPLACE ";" "|" flag_string "${flag_types}")
#        foreach(arg ${ARG_CMAKE_ARGS})


diff --git a/llvm/cmake/modules/LLVMExternalProjectUtils.cmake b/llvm/cmake/modules/LLVMExternalProjectUtils.cmake
index 4b5b600307ec..fb199edb3bd8 100644
--- a/llvm/cmake/modules/LLVMExternalProjectUtils.cmake
+++ b/llvm/cmake/modules/LLVMExternalProjectUtils.cmake
@@ -278,13 +278,19 @@ function(llvm_ExternalProject_Add name source_dir)
     set(llvm_config_path ${LLVM_CONFIG_PATH})
 
     if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
-      string(REGEX MATCH "^[0-9]+" CLANG_VERSION_MAJOR
+      string(REGEX MATCH "^[0-9]+\\.[0-9]+\\.[0-9]+" CLANG_VERSION
              ${PACKAGE_VERSION})
-      if(DEFINED CLANG_RESOURCE_DIR AND NOT CLANG_RESOURCE_DIR STREQUAL "")
+      if(COMPILER_RESOURCE_DIR AND NOT COMPILER_RESOURCE_DIR STREQUAL "")
+        set(resource_dir ${COMPILER_RESOURCE_DIR})
+        message(WARNING "COMPILER_RESOURCE_DIR=${resource_dir}")
+      elseif(DEFINED CLANG_RESOURCE_DIR AND NOT CLANG_RESOURCE_DIR STREQUAL "")
         set(resource_dir ${LLVM_TOOLS_BINARY_DIR}/${CLANG_RESOURCE_DIR})
+        message(WARNING "\${LLVM_TOOLS_BINARY_DIR}/\${CLANG_RESOURCE_DIR}=${resource_dir}")
       else()
-        set(resource_dir "${LLVM_LIBRARY_DIR}/clang/${CLANG_VERSION_MAJOR}")
+        set(resource_dir "${LLVM_LIBRARY_DIR}/clang/${CLANG_VERSION}")
+        message(WARNING "\${LLVM_LIBRARY_DIR}/clang/\${CLANG_VERSION}=${resource_dir}")
       endif()
+      message(WARNING "-resource-dir=${resource_dir}")
       set(flag_types ASM C CXX MODULE_LINKER SHARED_LINKER EXE_LINKER)
       foreach(type ${flag_types})
         set(${type}_flag -DCMAKE_${type}_FLAGS=-resource-dir=${resource_dir})


diff --git a/clang/lib/Driver/Driver.cpp b/clang/lib/Driver/Driver.cpp
index 488350169efa..6ecdaf9064f7 100644
--- a/clang/lib/Driver/Driver.cpp
+++ b/clang/lib/Driver/Driver.cpp
@@ -187,7 +187,7 @@ std::string Driver::GetResourcesPath(StringRef BinaryPath,
     // This search path is also created in the COFF driver of lld, so any
     // changes here also needs to happen in lld/COFF/Driver.cpp
     llvm::sys::path::append(P, CLANG_INSTALL_LIBDIR_BASENAME, "clang",
-                            CLANG_VERSION_MAJOR_STRING);
+                            CLANG_VERSION_STRING);
   }
 
   return std::string(P.str());
diff --git a/lld/COFF/Driver.cpp b/lld/COFF/Driver.cpp
index d7476e91e03e..db0e5c20cec9 100644
--- a/lld/COFF/Driver.cpp
+++ b/lld/COFF/Driver.cpp
@@ -651,7 +651,11 @@ void LinkerDriver::addClangLibSearchPaths(const std::string &argv0) {
 
   // Add the resource dir library path
   SmallString<128> runtimeLibDir(rootDir);
-  sys::path::append(runtimeLibDir, "lib", "clang", std::to_string(LLVM_VERSION_MAJOR), "lib");
+  sys::path::append(runtimeLibDir, "lib", "clang",
+          std::to_string(LLVM_VERSION_MAJOR) + "."
+          + std::to_string(LLVM_VERSION_MINOR) + "."
+          + std::to_string(LLVM_VERSION_PATCH),
+          "lib");
   searchPaths.insert(searchPaths.begin(), saver().save(runtimeLibDir.str()));
 
   // Resource dir + osname, which is hardcoded to windows since we are in the


diff --git a/clang/CMakeLists.txt b/clang/CMakeLists.txt
index f7936d72e088..08a698609d0d 100644
--- a/clang/CMakeLists.txt
+++ b/clang/CMakeLists.txt
@@ -428,10 +428,10 @@ option(CLANG_FORCE_MATCHING_LIBCLANG_SOVERSION
 
 # Clang version information
 set(CLANG_EXECUTABLE_VERSION
-    "${CLANG_VERSION_MAJOR}" CACHE STRING
+    "${CLANG_VERSION}" CACHE STRING
     "Major version number that will be appended to the clang executable name")
 set(LIBCLANG_LIBRARY_VERSION
-    "${CLANG_VERSION_MAJOR}" CACHE STRING
+    "${CLANG_VERSION}" CACHE STRING
     "Major version number that will be appended to the libclang library")
 mark_as_advanced(CLANG_EXECUTABLE_VERSION LIBCLANG_LIBRARY_VERSION)
 
@@ -646,6 +646,7 @@ if (CLANG_ENABLE_BOOTSTRAP)
     LLVM_VERSION_MAJOR
     LLVM_VERSION_MINOR
     LLVM_VERSION_PATCH
+    CLANG_VERSION
     CLANG_VERSION_MAJOR
     CLANG_VERSION_MINOR
     CLANG_VERSION_PATCHLEVEL
diff --git a/cmake/Modules/GetClangResourceDir.cmake b/cmake/Modules/GetClangResourceDir.cmake
index def5bd60424e..83d28a443d1c 100644
--- a/cmake/Modules/GetClangResourceDir.cmake
+++ b/cmake/Modules/GetClangResourceDir.cmake
@@ -12,10 +12,11 @@ function(get_clang_resource_dir out_var)
   if(DEFINED CLANG_RESOURCE_DIR AND NOT CLANG_RESOURCE_DIR STREQUAL "")
     set(ret_dir bin/${CLANG_RESOURCE_DIR})
   else()
-    if (NOT CLANG_VERSION_MAJOR)
-      string(REGEX MATCH "^[0-9]+" CLANG_VERSION_MAJOR ${PACKAGE_VERSION})
+    if (NOT CLANG_VERSION)
+      string(REGEX MATCH "^[0-9]+\\.[0-9]+\\.[0-9]+" CLANG_VERSION
+             ${PACKAGE_VERSION})
     endif()
-    set(ret_dir lib${LLVM_LIBDIR_SUFFIX}/clang/${CLANG_VERSION_MAJOR})
+    set(ret_dir lib${LLVM_LIBDIR_SUFFIX}/clang/${CLANG_VERSION})
   endif()
 
   if(ARG_PREFIX)














