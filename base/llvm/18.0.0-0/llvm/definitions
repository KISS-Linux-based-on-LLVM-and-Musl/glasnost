#! /bin/sh -e

interrupt_type="$(type "interrupt" > /dev/null && type "interrupt")" || :
[ ! -z "${interrupt_type:+x}" ] || {
  . /usr/include/kiss/share
  # [ -t 0 ] || // die 'fd 0' "does not work"
}

// log '$0' "$0"

# Should comme from kiss dialer
# # FS       : field separator
# # : ${FS:="\x03"} && export FS
# : ${FS:="\003"} && export FS
# # RS       : record separator
# # : ${RS:="\x1f"} && export RS
# : ${RS:="\037"} && export RS

version() {
	_level_2
	# local target="$1"
	# local target="$(// delegate -- target)"
	# // debug '$target' "$target"
	local _local_dir="$1"

	# local  repo_ver= repo_rel=

	version_target_major="$(grep "set(LLVM_VERSION_MAJOR" "$_local_dir/llvm/CMakeLists.txt" |
		awk "{print \$2}" | tr -d ')')"
	# export version_target_major
	version_target_minor="$(grep "set(LLVM_VERSION_MINOR" "$_local_dir/llvm/CMakeLists.txt" |
		awk "{print \$2}" | tr -d ')')"
	# export version_target_minor
	version_target_patch="$(grep "set(LLVM_VERSION_PATCH" "$_local_dir/llvm/CMakeLists.txt" |
		awk "{print \$2}" | tr -d ')')"
	# export version_target_patch
	# git
	version_target_suffix="$(grep "set(LLVM_VERSION_SUFFIX" "$_local_dir/llvm/CMakeLists.txt" |
		awk "{print \$2}" | tr -d ')')"
	# export version_target_suffix

	repo_ver="$version_target_major.$version_target_minor.$version_target_patch"
	repo_rel=0

	printf "$RS%s$FS%s" "$repo_ver" "$repo_rel"
}

target() {
	_level_2
	# local repo_name="perl"

	# local url_line="$(grep "git+" "$REPO_DIR/perl/sources")"
	# local url_and_target="${url_line##*+}"
	# local url="${url_and_target%%@*}"

	# local upstream_name="${url_and_target##*@}"
	local upstream_name="$1"
	local _local_dir="$2"
	local url="$3"
	local repo_name="llvm"

	// log '$@' "$(esceval "$@")"

	[ -n "${UNUSE_LATEST_TAG:+x}" ] || upstream_name=

	local tag_list=
	local query_pid=
	local latest_target=
	local repo_ver= repo_rel=

	[ ! -z "${KISS_FORCE+x}" ] || {
		# refs/tags/vx.x.x-x
		tag_list="$( \
			git -C "$_local_dir" -c 'versionsort.suffix=-' ls-remote --exit-code --refs \
			--sort='version:refname' --tags "$url" 2> /dev/null |
			awk '{print $2}')" # & query_pid="$!"

		// log '$tag_list' "$(esceval "$tag_list")"
		# progress "$repo_name" "$query_pid" "git query"

		[ ! -z "$tag_list" ] || {
			# awk 'BEGIN{ FS = "/" } {print $NF}' 2> /dev/null || {
			git -C "$_local_dir" config --local --unset remote.origin.tagopt > /dev/null 2>&1
			git -C "$_local_dir" config --local --unset remote.origin.fetch > /dev/null 2>&1
			git -C "$_local_dir" config --local remote.origin.fetch \
			"+refs/heads/*:refs/remotes/origin/*" > /dev/null 2>&1
			tag_list="$( \
				git -C "$_local_dir" -c 'versionsort.suffix=-' ls-remote --exit-code --refs \
					--sort='version:refname' --tags "$url" 2> /dev/null |
					awk '{print $2}'
			)" # & query_pid="$!"
			# progress "$repo_name" "$query_pid" "git query"
		}

		[ -z "${upstream_name:+x}" ] ||
			tag_list="$(printf '%s\n' "$tag_list" | grep "$upstream_name")"

		[ -n "${tag_list:+x}" ] || {
			# printf "$RS%s$FS%s$FS%s" "" "$repo_ver" "$repo_rel"
			# return 0

			local latest_target_ref=
			latest_target_ref="$( \
				printf '%s' "$tag_list" | tail -n 1
				# tail -n 1 |
				# awk -F "/" '{print $NF}'
			)"

			latest_target="$(printf '%s' "$latest_target_ref" | awk 'BEGIN{ FS = "/" } {print $NF}' 2> /dev/null)"
		}
	}

	// version "$_local_dir"
	# Lock the target (and version)
	latest_target="llvmorg-18-init"
	# repo_ver="18.0.0" repo_rel="0"

	// log '$latest_target' "$latest_target"
	// log '$repo_ver' "$repo_ver"
	// log '$repo_rel' "$repo_rel"

	printf "$RS%s$FS%s$FS%s" "$latest_target" "$repo_ver" "$repo_rel"

}

main() {
	_level_2
	local action="$1"
	shift 1
	// log '$action' "$action"
	// log '$@' "$(esceval "$@")"
	// "$action" "$@"
}

// main "$@"








