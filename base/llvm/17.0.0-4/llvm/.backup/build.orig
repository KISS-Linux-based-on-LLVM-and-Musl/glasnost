#!/bin/env sh

[ ! -z "${OSTYPE+x}" ] ||
OSTYPE="$(ldd --version 2>&1 | grep musl | awk '{print $1}')"
! expr "$OSTYPE" : "musl" 1>/dev/null ||
CXXFLAGS="-DLIBCXX_HAS_MUSL_LIBC=1 $CXXFLAGS"
CXXFLAGS="-isystem /usr/include/c++/v1 \
--sysroot=/ \
-isystem /usr/include/tirpc $CXXFLAGS"
# wrong one:
# --sysroot=/usr \
export CF="$CFLAGS"
export CXXF="$CXXFLAGS"
unset CFLAGS
unset CXXFLAGS
unset LDFLAGS

[ ! -d "Modules" ] || mv Modules/* cmake/Modules/

# Don't set the compiler here, interferes with 2-stage build
kiss-cmake-config | sed '/CMAKE_C_COMPILER/d;' | sed '/CMAKE_CXX_COMPILER/d;' > cmake.config

patch -p1 < glasnost.patch

# What version of llvm is currently installed?
llvm_ver="$(cat ${KISS_ROOT}/var/db/kiss/installed/llvm/version | cut -d " " -f 1)"

# Bootstrap only if version is different and it's not a crossbuild
{ { [ "$llvm_ver" = "$2" ] || [ ! -z "${KISS_ROOT+x}" ]; } &&
    [ -z "${BOOTSTRAP+x}" ]; } || bootstrap="1"

# If this is a cross, use a toolchain file
[ -z "${KISS_ROOT+x}" ]  || {
    toolchain="-DCMAKE_TOOLCHAIN_FILE=$(realpath cmake.config)"
    bstoolchain="-DBOOTSTRAP_CMAKE_TOOLCHAIN_FILE=$(realpath cmake.config)"
}

# Default set of runtimes
runtimes="compiler-rt;libcxx;libcxxabi;libunwind"
# -- clang project is enabled
# -- clang-tools-extra project is enabled
# -- lld project is enabled
# -- polly project is enabled

# -- bolt project is disabled
# -- compiler-rt project is disabled
# -- cross-project-tests project is disabled
# -- libc project is disabled
# -- libclc project is disabled
# -- libcxx project is disabled
# -- libcxxabi project is disabled
# -- libunwind project is disabled
# -- lldb project is disabled
# -- mlir project is disabled
# -- openmp project is disabled
# -- pstl project is disabled
# -- flang project is disabled

# Determine targets for architecture
case $KISS_XHOST_ARCH in
   aarch64_be)  TARGET_ARCH="AArch64" libname="aarch64_be";;
   aarch64)     TARGET_ARCH="AArch64" libname="aarch64"     runtimes="${runtimes};openmp";;
   armv7)       TARGET_ARCH="ARMv7"   libname="armhf";;
   i686)        TARGET_ARCH="X86"     libname="i386";;
   powerpc64)   TARGET_ARCH="PowerPC" libname="powerpc64"   runtimes="${runtimes};openmp";;
   powerpc64le) TARGET_ARCH="PowerPC" libname="powerpc64le" runtimes="${runtimes};openmp";;
   powerpcle)   TARGET_ARCH="PowerPC" libname="powerpcle";;
   powerpc)     TARGET_ARCH="PowerPC" libname="powerpc";;
   riscv64)     TARGET_ARCH="RISCV64" libname="riscv64";;
   x86_64)      TARGET_ARCH="X86"     libname="x86_64"      runtimes="${runtimes};openmp";;
   *) echo "Unsupported platform: $KISS_XHOST_ARCH"; exit 1;;
esac

echo "Building for: $TARGET_ARCH"
echo "Building runtimes: $runtimes"

if [ "$bootstrap" = "1" ]; then
    echo "Building stage 1 and stage 2..."

    cmake -B build \
    -G Ninja \
    -C Distribution.cmake \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DBOOTSTRAP_CMAKE_ASM_FLAGS="$CF" \
    -DBOOTSTRAP_CMAKE_CXX_FLAGS="$CXXF" \
    -DBOOTSTRAP_CMAKE_C_FLAGS="$CF" \
    -DBOOTSTRAP_KISS_ROOT=$KISS_ROOT \
    -DBOOTSTRAP_LLVM_DEFAULT_TARGET_TRIPLE=$KISS_XHOST_TRIPLE \
    -DBOOTSTRAP_LLVM_ENABLE_LTO=OFF \
    -DBOOTSTRAP_LLVM_ENABLE_RUNTIMES="$runtimes" \
    -DBOOTSTRAP_LLVM_HOST_TRIPLE=$KISS_XHOST_TRIPLE \
    -DBOOTSTRAP_LLVM_TARGET_ARCH=$TARGET_ARCH \
    $bstoolchain \
    -DCLANG_ENABLE_BOOTSTRAP=ON \
    -DCMAKE_ASM_FLAGS="$CF" \
    -DCMAKE_CXX_COMPILER=/usr/bin/clang++ \
    -DCMAKE_CXX_FLAGS="-fPIC -O3 -gline-tables-only -DNDEBUG" \
    -DCMAKE_C_COMPILER=/usr/bin/clang \
    -DCMAKE_C_FLAGS="-fPIC -O3 -gline-tables-only -DNDEBUG" \
    -DKISS_ROOT="/" \
    -DLLVM_HOST_TRIPLE="$KISS_XBUILD_TRIPLE" \
    -DLLVM_TARGET_ARCH="host" \
    -D_LIBCPP_HAS_MUSL_LIBC=ON \
    -DLIBCXX_HAS_MUSL_LIBC=ON \
    -D_LIBCPP_PROVIDES_DEFAULT_RUNE_TABLE=ON \
    llvm

    ninja -C build stage2-install-distribution

    # Clang: clang-tblgen, required for crossbuilding.
    cp build/tools/clang/stage2-bins/bin/clang-tblgen  $1/usr/bin/clang-tblgen
    cp build/tools/clang/stage2-bins/lib/libPollyISL.a $1/usr/lib/libPollyISL.a

else
    echo "Building stage 2 only..."

    cmake -B build \
    -G Ninja \
    -C Distribution-stage2.cmake \
    -DCMAKE_POLICY_DEFAULT_CMP0076="NEW" \
    -DCMAKE_POLICY_DEFAULT_CMP0114="NEW" \
    -DCMAKE_ASM_FLAGS="$CF" \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_CXX_COMPILER=/usr/bin/clang++ \
    -DCMAKE_CXX_FLAGS="$CXXF" \
    -DCMAKE_C_COMPILER=/usr/bin/clang \
    -DCMAKE_C_FLAGS="$CF" \
    $toolchain \
    -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;libclc;lld;lldb;mlir;polly;pstl" \
    -DLLVM_ENABLE_EH=ON \
    -DLLVM_TARGETS_TO_BUILD="host;AMDGPU" \
    -DKISS_ROOT=$KISS_ROOT \
    -DLIBUNWIND_SYSROOT=$KISS_ROOT \
    -DLLVM_ENABLE_LTO=OFF \
    -DLLVM_DEFAULT_TARGET_TRIPLE=$KISS_XHOST_TRIPLE \
    -DLLVM_ENABLE_RUNTIMES="$runtimes" \
    -DLLVM_HOST_TRIPLE=$KISS_XHOST_TRIPLE \
    -DLLVM_BUILD_LLVM_DYLIB=ON \
    -DLLVM_LINK_LLVM_DYLIB=ON \
    -DLLVM_ENABLE_RTTI=ON \
    -DLLVM_ENABLE_LIBCXX=ON \
    -DLLVM_ENABLE_ASSERTIONS=ON \
    -DLLVM_INSTALL_BINUTILS_SYMLINKS=ON \
    -DLIBUNWIND_USE_COMPILER_RT=ON \
    -DLIBCXXABI_USE_LLVM_UNWINDER=ON \
    -DLIBCXXABI_USE_COMPILER_RT=ON \
    -DLIBCXX_CXX_ABI=libcxxabi \
    -DLIBCXX_USE_COMPILER_RT=ON \
    -DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON \
    -DCLANG_DEFAULT_CXX_STDLIB=libc++ \
    -DCLANG_DEFAULT_RTLIB=compiler-rt \
    -DCOMPILER_RT_EXCLUDE_ATOMIC_BUILTIN=OFF \
    -DLIBOMP_ENABLE_SHARED=ON \
    -DLLVM_HOST_TRIPLE=$KISS_XHOST_TRIPLE \
    -DLLVM_TARGET_ARCH=$TARGET_ARCH \
    -D_LIBCPP_HAS_MUSL_LIBC=ON \
    -DLIBCXX_HAS_MUSL_LIBC=ON \
    -D_LIBCPP_PROVIDES_DEFAULT_RUNE_TABLE=ON \
    llvm

    # -DLLVM_ENABLE_EH=ON \
    # -DLLVM_ENABLE_RUNTIMES=all

    ninja -C build install-distribution

    # Clang: clang-tblgen, required for crossbuilding.
    cp build/bin/clang-tblgen  $1/usr/bin/clang-tblgen
    cp build/lib/libPollyISL.a $1/usr/lib/libPollyISL.a

fi


# LLD: Replace GNU binutils
ln -s -f ld.lld "$1/usr/bin/ld"

# Clang: Some legacy programs may require cc
ln -s -f clang "$1/usr/bin/cc"

# Clang: equivalent for c++
ln -s -f clang++ "$1/usr/bin/c++"

# Clang: equivalent for cpp
ln -s -f clang-cpp "$1/usr/bin/cpp"

# Clang: POSIX compliance
cp c99 $1/usr/bin

# For GCC compatibility
cd $1/usr/bin/
ln -s -f llvm-readobj  readelf
ln -s -f llvm-objcopy  strip
ln -s -f llvm-ar       ar
ln -s -f llvm-nm       nm
ln -s -f llvm-objcopy  objcopy
ln -s -f llvm-objdump  objdump
ln -s -f llvm-strings  strings
ln -s -f llvm-objcopy  otool
ln -s -f llvm-ranlib   ranlib
ln -s -f llvm-as       as

# This makes things like Rust easier:
cd $1/usr/lib/clang
ln -s -f $2 system
cd $1/usr/lib
ln -s -f clang/system/lib/linux/clang_rt.crtbegin-$libname.o    crtbegin.o
ln -s -f clang/system/lib/linux/clang_rt.crtbegin-$libname.o    crtbeginS.o
ln -s -f clang/system/lib/linux/clang_rt.crtend-$libname.o      crtend.o
ln -s -f clang/system/lib/linux/clang_rt.crtend-$libname.o      crtendS.o
ln -s -f clang/system/lib/linux/libclang_rt.builtins-$libname.a libatomic.a

