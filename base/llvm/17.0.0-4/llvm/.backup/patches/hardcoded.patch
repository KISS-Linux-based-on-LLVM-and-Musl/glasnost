diff --git a/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp b/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp
index f45a54b5ee9a..c15426274014 100644
--- a/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp
+++ b/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp
@@ -78,7 +78,7 @@ cl::opt<bool> Remove{
     cl::cat(IncludeCleaner),
 };

-std::atomic<unsigned> Errors = ATOMIC_VAR_INIT(0);
+std::atomic<unsigned> Errors = (0);

 format::FormatStyle getStyle(llvm::StringRef Filename) {
   auto S = format::getStyle(format::DefaultFormatStyle, Filename,
diff --git a/clang/lib/Headers/__stddef_max_align_t.h b/clang/lib/Headers/__stddef_max_align_t.h
index e3b439285d0f..f8a377309dce 100644
--- a/clang/lib/Headers/__stddef_max_align_t.h
+++ b/clang/lib/Headers/__stddef_max_align_t.h
@@ -22,6 +22,7 @@ typedef struct {
   long double __clang_max_align_nonce2
       __attribute__((__aligned__(__alignof__(long double))));
 } max_align_t;
+#define __DEFINED_max_align_t
 #endif

 #endif
diff a/compiler-rt/CMakeLists.txt b/compiler-rt/CMakeLists.txt
index 8a13508fcb98..3679f9992298 100644
--- a/compiler-rt/CMakeLists.txt
+++ b/compiler-rt/CMakeLists.txt
@@ -293,7 +293,7 @@
   "Statically link the C++ library." OFF
   "COMPILER_RT_CXX_LIBRARY" OFF)

-set(DEFAULT_COMPILER_RT_USE_BUILTINS_LIBRARY OFF)
+set(DEFAULT_COMPILER_RT_USE_BUILTINS_LIBRARY ON)
 if (FUCHSIA)
   set(DEFAULT_COMPILER_RT_USE_BUILTINS_LIBRARY ON)
 endif()
diff --git a/compiler-rt/cmake/Modules/AddCompilerRT.cmake b/compiler-rt/cmake/Modules/AddCompilerRT.cmake
index 2771a4063c1d..f4079ecdcac1 100644
--- ./compiler-rt/cmake/Modules/AddCompilerRT.cmake
+++ ./compiler-rt/cmake/Modules/AddCompilerRT.cmake
@@ -1,6 +1,7 @@
 include(ExternalProject)
 include(CompilerRTUtils)
 include(HandleCompilerRT)
+include(CompilerRTCompile)

 # CMP0114: ExternalProject step targets fully adopt their steps.
 # New in CMake 3.19: https://cmake.org/cmake/help/latest/policy/CMP0114.html
diff --git a/compiler-rt/lib/builtins/clear_cache.c b/compiler-rt/lib/builtins/clear_cache.c
index 8993761eb3d4..783edf766936 100644
--- a/compiler-rt/lib/builtins/clear_cache.c
+++ b/compiler-rt/lib/builtins/clear_cache.c
@@ -183,7 +183,7 @@ void __clear_cache(void *start, void *end) {
   const register void *end_reg __asm("a1") = end;
   // "0" means that we clear cache for all threads (SYS_RISCV_FLUSH_ICACHE_ALL)
   const register long flags __asm("a2") = 0;
-  const register long syscall_nr __asm("a7") = __NR_riscv_flush_icache;
+  const register long syscall_nr __asm("a7") = 259; // JD
   __asm __volatile("ecall"
                    : "=r"(start_reg)
                    : "r"(start_reg), "r"(end_reg), "r"(flags), "r"(syscall_nr));
diff --git a/libcxx/CMakeLists.txt b/libcxx/CMakeLists.txt
index 1400233b7..0a7b38737 100644
--- a/libcxx/CMakeLists.txt
+++ b/libcxx/CMakeLists.txt
@@ -201,7 +201,7 @@

 set(LIBCXX_ABI_DEFINES "" CACHE STRING "A semicolon separated list of ABI macros to define in the site config header.")
 option(LIBCXX_EXTRA_SITE_DEFINES "Extra defines to add into __config_site")
-option(LIBCXX_USE_COMPILER_RT "Use compiler-rt instead of libgcc" OFF)
+option(LIBCXX_USE_COMPILER_RT "Use compiler-rt instead of libgcc" ON)

 option(LIBCXX_ENABLE_BACKWARDS_COMPATIBILITY_DEBUG_MODE_SYMBOLS
   "Whether to include the old Debug mode symbols in the compiled library. This
@@ -261,7 +261,7 @@
    libc++abi. Doing otherwise is an ODR violation." OFF)
 # Build libc++abi with libunwind. We need this option to determine whether to
 # link with libunwind or libgcc_s while running the test cases.
-option(LIBCXXABI_USE_LLVM_UNWINDER "Build and use the LLVM unwinder." OFF)
+option(LIBCXXABI_USE_LLVM_UNWINDER "Build and use the LLVM unwinder." ON)

 # Target options --------------------------------------------------------------
 option(LIBCXX_BUILD_32_BITS "Build 32 bit multilib libc++. This option is not supported anymore when building the runtimes. Please specify a full triple instead." ${LLVM_BUILD_32_BITS})
@@ -269,6 +269,10 @@
   message(FATAL_ERROR "LIBCXX_BUILD_32_BITS is not supported anymore when building the runtimes, please specify a full triple instead.")
 endif()

+set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -nostdlib++")
+# set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -nostdinc++")
+set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} --sysroot=${KISS_ROOT}")
+
 # Feature options -------------------------------------------------------------
 option(LIBCXX_ENABLE_EXCEPTIONS "Use exceptions." ON)
 option(LIBCXX_ENABLE_RTTI "Use run time type information." ON)
@@ -276,7 +280,7 @@
 option(LIBCXX_ENABLE_MONOTONIC_CLOCK
   "Build libc++ with support for a monotonic clock.
    This option may only be set to OFF when LIBCXX_ENABLE_THREADS=OFF." ON)
-option(LIBCXX_HAS_MUSL_LIBC "Build libc++ with support for the Musl C library" OFF)
+option(LIBCXX_HAS_MUSL_LIBC "Build libc++ with support for the Musl C library" ON)
 option(LIBCXX_HAS_PTHREAD_API "Ignore auto-detection and force use of pthread API" OFF)
 option(LIBCXX_HAS_WIN32_THREAD_API "Ignore auto-detection and force use of win32 thread API" OFF)
 option(LIBCXX_HAS_EXTERNAL_THREAD_API
@@ -448,6 +452,21 @@
 # LIBCXX_LINK_FLAGS: Linker only flags.
 # LIBCXX_LIBRARIES: libraries libc++ is linked to.
 set(LIBCXX_COMPILE_FLAGS "")
+set(CMAKE_C_FLAGS " -D_LIBCPP_STD_VER=23 -fPIC --sysroot=${KISS_ROOT} \
+-isystem $ENV{MAKEDIR}/clang/lib/Headers \
+-isystem $ENV{MAKEDIR}/$ENV{OUTPUT_FOLDER}/runtimes/runtimes-bins/pstl/generated_headers \
+-isystem $ENV{MAKEDIR}/pstl/include -isystem /usr/include \
+-isystem $ENV{MAKEDIR}/libcxx/include -isystem /usr/include/c++/v1 \
+${CMAKE_C_FLAGS}")
+set(CMAKE_CXX_FLAGS " -D_LIBCPP_STD_VER=23 -fPIC --sysroot=${KISS_ROOT} \
+-isystem $ENV{MAKEDIR}/clang/lib/Headers \
+-isystem $ENV{MAKEDIR}/$ENV{OUTPUT_FOLDER}/runtimes/runtimes-bins/pstl/generated_headers \
+-isystem $ENV{MAKEDIR}/pstl/include -isystem /usr/include \
+-isystem $ENV{MAKEDIR}/libcxx/include -isystem /usr/include/c++/v1 \
+${CMAKE_CXX_FLAGS}")
+message(STATUS "libcxx/CMakeLists.txt \${CMAKE_C_FLAGS} = ${CMAKE_C_FLAGS}")
+message(STATUS "libcxx/CMakeLists.txt \${CMAKE_CXX_FLAGS} = ${CMAKE_CXX_FLAGS}")
+message(STATUS "libcxx/CMakeLists.txt \${LIBCXX_COMPILE_FLAGS} = ${LIBCXX_COMPILE_FLAGS}")
 set(LIBCXX_LINK_FLAGS "")
 set(LIBCXX_LIBRARIES "")
 set(LIBCXX_ADDITIONAL_COMPILE_FLAGS "" CACHE STRING
diff --git a/libcxxabi/CMakeLists.txt b/libcxxabi/CMakeLists.txt
index 8f48d402bc22..9c117f4ed12c 100644
--- a/libcxxabi/CMakeLists.txt
+++ b/libcxxabi/CMakeLists.txt
@@ -45,9 +45,9 @@ option(LIBCXXABI_ENABLE_EXCEPTIONS
 option(LIBCXXABI_ENABLE_ASSERTIONS "Enable assertions independent of build mode." ON)
 option(LIBCXXABI_ENABLE_PEDANTIC "Compile with pedantic enabled." ON)
 option(LIBCXXABI_ENABLE_WERROR "Fail and stop if a warning is triggered." OFF)
-option(LIBCXXABI_USE_LLVM_UNWINDER "Build and use the LLVM unwinder." OFF)
+option(LIBCXXABI_USE_LLVM_UNWINDER "Build and use the LLVM unwinder." ON)
-option(LIBCXXABI_ENABLE_STATIC_UNWINDER "Statically link the LLVM unwinder." OFF)
+option(LIBCXXABI_ENABLE_STATIC_UNWINDER "Statically link the LLVM unwinder." ON)
-option(LIBCXXABI_USE_COMPILER_RT "Use compiler-rt instead of libgcc" OFF)
+option(LIBCXXABI_USE_COMPILER_RT "Use compiler-rt instead of libgcc" ON)
 option(LIBCXXABI_ENABLE_THREADS "Build with threads enabled" ON)
 option(LIBCXXABI_HAS_PTHREAD_API "Ignore auto-detection and force use of pthread API" OFF)
 option(LIBCXXABI_HAS_WIN32_THREAD_API "Ignore auto-detection and force use of win32 thread API" OFF)
@@ -229,7 +229,13 @@ endif()
 set(LIBCXXABI_C_FLAGS "")
 set(LIBCXXABI_CXX_FLAGS "")
 set(LIBCXXABI_COMPILE_FLAGS "")
-set(LIBCXXABI_LINK_FLAGS "")
+set(LIBCXXABI_LINK_FLAGS "-nostdlib -lc -lc++ -lexecinfo -lrt -ldl -lz -lm \
+-fuse-ld=lld -stdlib=libc++ -rtlib=compiler-rt --unwindlib=none \
+-rdynamic -lc++experimental -lpthread \
+-Wl,-z,relro \
+-Wl,--build-id \
+-Wl,--undefined-version \
+")
 set(LIBCXXABI_LIBRARIES "")
 set(LIBCXXABI_ADDITIONAL_COMPILE_FLAGS "" CACHE STRING
     "Additional Compile only flags which can be provided in cache")
@@ -464,7 +470,13 @@ if (C_SUPPORTS_COMMENT_LIB_PRAGMA)
 endif()

 string(REPLACE ";" " " LIBCXXABI_CXX_FLAGS "${LIBCXXABI_CXX_FLAGS}")
-set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${LIBCXXABI_CXX_FLAGS}")
+set(CMAKE_CXX_FLAGS "-D_LIBCPP_STD_VER=23 -fPIC --sysroot=${KISS_ROOT} \
+-isystem $ENV{MAKEDIR}/clang/lib/Headers \
+-isystem $ENV{MAKEDIR}/$ENV{OUTPUT_FOLDER}/runtimes/runtimes-bins/pstl/generated_headers \
+-isystem $ENV{MAKEDIR}/pstl/include -isystem /usr/include \
+-isystem $ENV{MAKEDIR}/libcxx/include -isystem /usr/include/c++/v1 \
+${CMAKE_CXX_FLAGS} ${LIBCXXABI_CXX_FLAGS}")
+string(REPLACE "-Wsuggest-override" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
 set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${LIBCXXABI_C_FLAGS}")

 # On AIX, avoid picking up VMX extensions(i.e. vec_malloc) which would change
diff --git a/libunwind/CMakeLists.txt b/libunwind/CMakeLists.txt
index 5c547883f992..72d2d66b7016 100644
--- a/libunwind/CMakeLists.txt
+++ b/libunwind/CMakeLists.txt
@@ -37,13 +37,13 @@ option(LIBUNWIND_ENABLE_CET "Build libunwind with CET enabled." OFF)
 option(LIBUNWIND_ENABLE_ASSERTIONS "Enable assertions independent of build mode." ON)
 option(LIBUNWIND_ENABLE_PEDANTIC "Compile with pedantic enabled." ON)
 option(LIBUNWIND_ENABLE_WERROR "Fail and stop if a warning is triggered." OFF)
-option(LIBUNWIND_ENABLE_SHARED "Build libunwind as a shared library." ON)
+option(LIBUNWIND_ENABLE_SHARED "Build libunwind as a shared library." OFF)
 option(LIBUNWIND_ENABLE_STATIC "Build libunwind as a static library." ON)
 option(LIBUNWIND_ENABLE_CROSS_UNWINDING "Enable cross-platform unwinding support." OFF)
 option(LIBUNWIND_ENABLE_ARM_WMMX "Enable unwinding support for ARM WMMX registers." OFF)
 option(LIBUNWIND_ENABLE_THREADS "Build libunwind with threading support." ON)
 option(LIBUNWIND_WEAK_PTHREAD_LIB "Use weak references to refer to pthread functions." OFF)
-option(LIBUNWIND_USE_COMPILER_RT "Use compiler-rt instead of libgcc" OFF)
+option(LIBUNWIND_USE_COMPILER_RT "Use compiler-rt instead of libgcc" ON)
 option(LIBUNWIND_INCLUDE_DOCS "Build the libunwind documentation." ${LLVM_INCLUDE_DOCS})
 option(LIBUNWIND_INCLUDE_TESTS "Build the libunwind tests." ${LLVM_INCLUDE_TESTS})
 option(LIBUNWIND_IS_BAREMETAL "Build libunwind for baremetal targets." OFF)
diff --git a/llvm/cmake/modules/AddLLVM.cmake b/llvm/cmake/modules/AddLLVM.cmake
index 9eef4eb7e35d..aa4d022fdfb1 100644
--- a/llvm/cmake/modules/AddLLVM.cmake
+++ b/llvm/cmake/modules/AddLLVM.cmake
@@ -1,3 +1,6 @@
+# Set to an arbitrary directory to silence GNUInstallDirs warnings
+# regarding being unable to determine libdir.
+set(CMAKE_INSTALL_LIBDIR "lib")
 include(GNUInstallDirs)
 include(LLVMDistributionSupport)
 include(LLVMProcessSources)
diff --git a/llvm/cmake/modules/HandleLLVMOptions.cmake b/llvm/cmake/modules/HandleLLVMOptions.cmake
index 6119ecdce0f4..af08e50f9a41 100644
--- ./llvm/cmake/modules/HandleLLVMOptions.cmake
+++ ./llvm/cmake/modules/HandleLLVMOptions.cmake
@@ -313,12 +313,51 @@
 endif()

 if( LLVM_USE_LINKER )
-  append("-fuse-ld=${LLVM_USE_LINKER}"
-    CMAKE_EXE_LINKER_FLAGS CMAKE_MODULE_LINKER_FLAGS CMAKE_SHARED_LINKER_FLAGS)
-  check_cxx_source_compiles("int main() { return 0; }" CXX_SUPPORTS_CUSTOM_LINKER)
-  if ( NOT CXX_SUPPORTS_CUSTOM_LINKER )
-    message(FATAL_ERROR "Host compiler does not support '-fuse-ld=${LLVM_USE_LINKER}'")
-  endif()
+    message(STATUS "llvm/cmake/modules/HandleLLVMOptions.cmake \${CMAKE_C_COMPILER} = ${CMAKE_C_COMPILER}")
+    message(STATUS "llvm/cmake/modules/HandleLLVMOptions.cmake \${CMAKE_CXX_COMPILER} = ${CMAKE_CXX_COMPILER}")
+    set(cl_cache "${CMAKE_C_LINKER_FLAGS}")
+    set(cxxl_cache "${CMAKE_CXX_LINKER_FLAGS}")
+    set(el_cache "${CMAKE_EXE_LINKER_FLAGS}")
+    set(ml_cache "${CMAKE_MODULE_LINKER_FLAGS}")
+    set(sl_cache "${CMAKE_SHARED_LINKER_FLAGS}")
+    message(STATUS "llvm/cmake/modules/HandleLLVMOptions.cmake \${CMAKE_EXE_LINKER_FLAGS} = ${CMAKE_EXE_LINKER_FLAGS}")
+    message(STATUS "llvm/cmake/modules/HandleLLVMOptions.cmake \${CMAKE_C_LINKER_FLAGS} = ${CMAKE_C_LINKER_FLAGS}")
+    message(STATUS "llvm/cmake/modules/HandleLLVMOptions.cmake \${CMAKE_CXX_LINKER_FLAGS} = ${CMAKE_CXX_LINKER_FLAGS}")
+    message(STATUS "llvm/cmake/modules/HandleLLVMOptions.cmake \${CMAKE_MODULE_LINKER_FLAGS} = ${CMAKE_MODULE_LINKER_FLAGS}")
+    message(STATUS "llvm/cmake/modules/HandleLLVMOptions.cmake \${CMAKE_SHARED_LINKER_FLAGS} = ${CMAKE_SHARED_LINKER_FLAGS}")
+    set(CMAKE_C_LINKER_FLAGS "")
+    set(CMAKE_CXX_LINKER_FLAGS "")
+    set(CMAKE_EXE_LINKER_FLAGS "")
+    set(CMAKE_MODULE_LINKER_FLAGS "")
+    set(CMAKE_SHARED_LINKER_FLAGS "")
+    append("-fuse-ld=${LLVM_USE_LINKER}"
+        CMAKE_EXE_LINKER_FLAGS CMAKE_MODULE_LINKER_FLAGS CMAKE_SHARED_LINKER_FLAGS)
+
+    set(CMAKE_LINKER "$ENV{ORIGIN}/lld" CACHE FILEPATH "")
+    set(CMAKE_LINK_EXECUTABLE "$ENV{ORIGIN}/lld" CACHE FILEPATH "")
+    message(STATUS "\${CMAKE_CXX_FLAGS} = ${CMAKE_CXX_FLAGS}")
+    message(STATUS "\${CMAKE_C_FLAGS} = ${CMAKE_C_FLAGS}")
+    set(cxx_cache "${CMAKE_CXX_FLAGS}")
+    set(c_cache "${CMAKE_C_FLAGS}")
+    set(CMAKE_CXX_FLAGS "")
+    check_cxx_source_compiles("int main() { return 0; }" CXX_SUPPORTS_CUSTOM_LINKER)
+    set(CMAKE_CXX_FLAGS "${cxx_cache}")
+    unset(cxx_cache CACHE)
+    set(CMAKE_C_FLAGS "${c_cache}")
+    unset(c_cache CACHE)
+    set(CMAKE_C_LINKER_FLAGS "${cl_cache}")
+    unset(cl_cache CACHE)
+    set(CMAKE_CXX_LINKER_FLAGS "${cxxl_cache}")
+    unset(cxxl_cache CACHE)
+    set(CMAKE_EXE_LINKER_FLAGS "${el_cache}")
+    unset(el_cache CACHE)
+    set(CMAKE_MODULE_LINKER_FLAGS "${ml_cache}")
+    unset(ml_cache CACHE)
+    set(CMAKE_SHARED_LINKER_FLAGS "${sl_cache}")
+    unset(sl_cache CACHE)
+    if ( NOT CXX_SUPPORTS_CUSTOM_LINKER )
+        message(FATAL_ERROR "Host compiler does not support '-fuse-ld=${LLVM_USE_LINKER}'")
+    endif()
 endif()

 if( LLVM_ENABLE_PIC )
diff --git a/llvm/lib/Support/CMakeLists.txt b/llvm/lib/Support/CMakeLists.txt
index 4cbc3b79f3bb..126ce4332f7e 100644
--- a/llvm/lib/Support/CMakeLists.txt
+++ b/llvm/lib/Support/CMakeLists.txt
@@ -318,6 +318,20 @@ endif()

 set_property(TARGET LLVMSupport PROPERTY LLVM_SYSTEM_LIBS "${llvm_system_libs}")

+set_property(TARGET LLVMSupport APPEND PROPERTY COMPILE_OPTIONS "-fPIC")
+set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
+add_compile_options (-fPIC)
+remove_definitions( -DHAVE_LSEEK64=1 )
+add_definitions( -UHAVE_LSEEK64 )
+set_property(TARGET LLVMSupport PROPERTY HAVE_LSEEK64 0)
+add_compile_options (-UHAVE_LSEEK64)
+target_compile_options(LLVMSupport PRIVATE -UHAVE_LSEEK64)
+get_target_property(defs LLVMSupport DEFINITIONS)
+list(FILTER defs EXCLUDE REGEX [[^HAVE_LSEEK64=.*$]])
+set_property(TARGET LLVMSupport PROPERTY DEFINITIONS ${defs})
+target_include_directories(LLVMSupport PUBLIC
+$ENV{MAKEDIR}/utils/bazel/llvm-project-overlay/llvm/include
+$ENV{MAKEDIR}/utils/bazel/llvm-project-overlay/clang/include)

 if(LLVM_INTEGRATED_CRT_ALLOC)
   if(LLVM_INTEGRATED_CRT_ALLOC MATCHES "snmalloc$")
diff --git a/llvm/lib/Support/PrettyStackTrace.cpp b/llvm/lib/Support/PrettyStackTrace.cpp
index fa91405fee10..5f853f9d4886 100644
--- a/llvm/lib/Support/PrettyStackTrace.cpp
+++ b/llvm/lib/Support/PrettyStackTrace.cpp
@@ -65,7 +65,7 @@
 // SIGINFO requests, it's possible that some threads will stop responding to it,
 // but the program won't crash.
 static volatile std::atomic<unsigned> GlobalSigInfoGenerationCounter =
-    ATOMIC_VAR_INIT(1);
+    (1);
 static LLVM_THREAD_LOCAL unsigned ThreadLocalSigInfoGenerationCounter = 0;

 namespace llvm {
diff --git a/llvm/lib/Support/Unix/Signals.inc b/llvm/lib/Support/Unix/Signals.inc
index 05a7335216f4..0589a38025bf 100644
--- a/llvm/lib/Support/Unix/Signals.inc
+++ b/llvm/lib/Support/Unix/Signals.inc
@@ -85,12 +85,12 @@ static void InfoSignalHandler(int Sig); // defined below.
 using SignalHandlerFunctionType = void (*)();
 /// The function to call if ctrl-c is pressed.
 static std::atomic<SignalHandlerFunctionType> InterruptFunction =
-    ATOMIC_VAR_INIT(nullptr);
+    (nullptr);
 static std::atomic<SignalHandlerFunctionType> InfoSignalFunction =
-    ATOMIC_VAR_INIT(nullptr);
+    (nullptr);
 /// The function to call on SIGPIPE (one-time use only).
 static std::atomic<SignalHandlerFunctionType> OneShotPipeSignalFunction =
-    ATOMIC_VAR_INIT(nullptr);
+    (nullptr);

 namespace {
 /// Signal-safe removal of files.
@@ -98,8 +98,8 @@ namespace {
 /// themselves is signal-safe. Memory is freed when the head is freed, deletion
 /// is therefore not signal-safe either.
 class FileToRemoveList {
-  std::atomic<char *> Filename = ATOMIC_VAR_INIT(nullptr);
-  std::atomic<FileToRemoveList *> Next = ATOMIC_VAR_INIT(nullptr);
+  std::atomic<char *> Filename = (nullptr);
+  std::atomic<FileToRemoveList *> Next = (nullptr);

   FileToRemoveList() = default;
   // Not signal-safe.
@@ -188,7 +188,7 @@ public:
     Head.exchange(OldHead);
   }
 };
-static std::atomic<FileToRemoveList *> FilesToRemove = ATOMIC_VAR_INIT(nullptr);
+static std::atomic<FileToRemoveList *> FilesToRemove = (nullptr);

 /// Clean up the list in a signal-friendly manner.
 /// Recall that signals can fire during llvm_shutdown. If this occurs we should
@@ -248,7 +248,7 @@ static const int InfoSigs[] = {SIGUSR1
 static const size_t NumSigs = std::size(IntSigs) + std::size(KillSigs) +
                               std::size(InfoSigs) + 1 /* SIGPIPE */;

-static std::atomic<unsigned> NumRegisteredSignals = ATOMIC_VAR_INIT(0);
+static std::atomic<unsigned> NumRegisteredSignals = (0);
 static struct {
   struct sigaction SA;
   int SigNo;
diff --git a/llvm/lib/Support/raw_ostream.cpp b/llvm/lib/Support/raw_ostream.cpp
index 92b15f14c62f..3e76c8a624dd 100644
--- a/llvm/lib/Support/raw_ostream.cpp
+++ b/llvm/lib/Support/raw_ostream.cpp
@@ -59,6 +59,10 @@
 #include "llvm/Support/Windows/WindowsSupport.h"
 #endif

+#if defined HAVE_LSEEK64
+#undef HAVE_LSEEK64
+#endif
+
 using namespace llvm;

 constexpr raw_ostream::Colors raw_ostream::BLACK;
diff --git a/llvm/runtimes/CMakeLists.txt b/llvm/runtimes/CMakeLists.txt
index 694f346ee8e9..f47fc2cebd03 100644
--- a/llvm/runtimes/CMakeLists.txt
+++ b/llvm/runtimes/CMakeLists.txt
@@ -65,7 +65,7 @@ function(builtin_default_target compiler_rt_path)

   set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default ON)
   # AIX should fold 32-bit & 64-bit arch libraries into a single archive.
-  if (LLVM_TARGET_TRIPLE MATCHES "aix")
+  if (LLVM_TARGET_TRIPLE MATCHES "aix" OR LLVM_TARGET_TRIPLE MATCHES "$ENV{KISS_XHOST_TRIPLE}")
     set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default OFF)
   endif()

@@ -78,6 +78,16 @@ function(builtin_default_target compiler_rt_path)
                                       -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default}
                                       -DCMAKE_C_COMPILER_WORKS=ON
                                       -DCMAKE_ASM_COMPILER_WORKS=ON
+                                      -DCOMPILER_RT_BUILD_CRT=ON
+                                      -DCOMPILER_RT_BUILD_BUILTINS=ON
+                                      -DCOMPILER_RT_BUILD_SANITIZERS=OFF
+                                      -DCOMPILER_RT_BUILD_XRAY=OFF
+                                      -DCOMPILER_RT_BUILD_LIBFUZZER=OFF
+                                      -DCOMPILER_RT_BUILD_PROFILE=OFF
+                                      -DCOMPILER_RT_BUILD_MEMPROF=OFF
+                                      -DCOMPILER_RT_BUILD_ORC=OFF
+                                      -DCOMPILER_RT_BUILD_GWP_ASAN=OFF
+                                      -DCOMPILER_RT_ENABLE_CET=OFF
                                       ${COMMON_CMAKE_ARGS}
                                       ${BUILTINS_CMAKE_ARGS}
                            PASSTHROUGH_PREFIXES COMPILER_RT
@@ -105,14 +115,28 @@ function(builtin_register_target compiler_rt_path target)

   llvm_ExternalProject_Add(builtins-${target}
                            ${compiler_rt_path}/lib/builtins
+                           ${compiler_rt_path}
                            DEPENDS ${ARG_DEPENDS}
                            CMAKE_ARGS -DLLVM_LIBRARY_OUTPUT_INTDIR=${LLVM_LIBRARY_DIR}
                                       -DLLVM_RUNTIME_OUTPUT_INTDIR=${LLVM_TOOLS_BINARY_DIR}
                                       -DLLVM_DEFAULT_TARGET_TRIPLE=${target}
-                                      -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=ON
+                                      -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default}
                                       -DCMAKE_C_COMPILER_WORKS=ON
                                       -DCMAKE_ASM_COMPILER_WORKS=ON
                                       -DCOMPILER_RT_DEFAULT_TARGET_ONLY=ON
+                                      -DCMAKE_CXX_COMPILER_WORKS=ON
+                                      -DCMAKE_C_FLAGS=-nostdlib
+                                      -DCMAKE_CXX_FLAGS=-nostdlib
+                                      -DCOMPILER_RT_BUILD_CRT=ON
+                                      -DCOMPILER_RT_BUILD_BUILTINS=ON
+                                      -DCOMPILER_RT_BUILD_SANITIZERS=OFF
+                                      -DCOMPILER_RT_BUILD_XRAY=OFF
+                                      -DCOMPILER_RT_BUILD_LIBFUZZER=OFF
+                                      -DCOMPILER_RT_BUILD_PROFILE=OFF
+                                      -DCOMPILER_RT_BUILD_MEMPROF=OFF
+                                      -DCOMPILER_RT_BUILD_ORC=OFF
+                                      -DCOMPILER_RT_BUILD_GWP_ASAN=OFF
+                                      -DCOMPILER_RT_ENABLE_CET=OFF
                                       ${COMMON_CMAKE_ARGS}
                                       ${${target}_extra_args}
                            USE_TOOLCHAIN
@@ -219,10 +243,14 @@ function(runtime_default_target)

   set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default ON)
   # AIX should fold 32-bit & 64-bit arch libraries into a single archive.
-  if (LLVM_TARGET_TRIPLE MATCHES "aix")
+  if (LLVM_TARGET_TRIPLE MATCHES "aix" OR LLVM_TARGET_TRIPLE MATCHES "$ENV{KISS_XHOST_TRIPLE}")
     set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default OFF)
   endif()

+  set(RT_C_FLAGS "${CMAKE_C_FLAGS} --sysroot=${KISS_ROOT} -resource-dir=$ENV{HOST_RESOURCE_DIR} -B$ENV{BINDIR_HOST} -Os -fPIC")
+  set(RT_CXX_FLAGS "${CMAKE_CXX_FLAGS} --sysroot=${KISS_ROOT} -resource-dir=$ENV{HOST_RESOURCE_DIR} -B$ENV{BINDIR_HOST} -Os -fPIC")
+  set(RT_ASM_FLAGS "${CMAKE_ASM_FLAGS} --sysroot=${KISS_ROOT} -resource-dir=$ENV{HOST_RESOURCE_DIR} -B$ENV{BINDIR_HOST} -Os -fPIC")
+
   llvm_ExternalProject_Add(runtimes
                            ${CMAKE_CURRENT_SOURCE_DIR}/../../runtimes
                            DEPENDS ${ARG_DEPENDS}
@@ -236,6 +264,17 @@ function(runtime_default_target)
                                       -DCMAKE_C_COMPILER_WORKS=ON
                                       -DCMAKE_CXX_COMPILER_WORKS=ON
                                       -DCMAKE_ASM_COMPILER_WORKS=ON
+                                      -DCMAKE_C_FLAGS=${RT_C_FLAGS}
+                                      -DCMAKE_CXX_FLAGS=${RT_CXX_FLAGS}
+                                      -DCMAKE_ASM_FLAGS=${RT_ASM_FLAGS}
+                                      -DCOMPILER_RT_BUILD_SANITIZERS=OFF
+                                      -DCOMPILER_RT_BUILD_XRAY=OFF
+                                      -DCOMPILER_RT_BUILD_LIBFUZZER=OFF
+                                      -DCOMPILER_RT_BUILD_PROFILE=OFF
+                                      -DCOMPILER_RT_BUILD_MEMPROF=OFF
+                                      -DCOMPILER_RT_BUILD_ORC=OFF
+                                      -DCOMPILER_RT_BUILD_GWP_ASAN=OFF
+                                      -DCOMPILER_RT_ENABLE_CET=OFF
                                       ${COMMON_CMAKE_ARGS}
                                       ${RUNTIMES_CMAKE_ARGS}
                            PASSTHROUGH_PREFIXES LLVM_ENABLE_RUNTIMES
@@ -356,11 +395,24 @@ function(runtime_register_target name target)
                                       -DLLVM_INCLUDE_TESTS=${LLVM_INCLUDE_TESTS}
                                       -DLLVM_DEFAULT_TARGET_TRIPLE=${target}
                                       -DLLVM_ENABLE_PROJECTS_USED=${LLVM_ENABLE_PROJECTS_USED}
-                                      -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=ON
+                                      -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default}
                                       -DCMAKE_C_COMPILER_WORKS=ON
                                       -DCMAKE_CXX_COMPILER_WORKS=ON
                                       -DCMAKE_ASM_COMPILER_WORKS=ON
                                       -DCOMPILER_RT_DEFAULT_TARGET_ONLY=ON
+                                      -DCMAKE_C_FLAGS=${RT_C_FLAGS}
+                                      -DCMAKE_CXX_FLAGS=${RT_CXX_FLAGS}
+                                      -DCMAKE_ASM_FLAGS=${RT_ASM_FLAGS}
+                                      -DCOMPILER_RT_BUILD_CRT=ON
+                                      -DCOMPILER_RT_BUILD_BUILTINS=ON
+                                      -DCOMPILER_RT_BUILD_SANITIZERS=OFF
+                                      -DCOMPILER_RT_BUILD_XRAY=OFF
+                                      -DCOMPILER_RT_BUILD_LIBFUZZER=OFF
+                                      -DCOMPILER_RT_BUILD_PROFILE=OFF
+                                      -DCOMPILER_RT_BUILD_MEMPROF=OFF
+                                      -DCOMPILER_RT_BUILD_ORC=OFF
+                                      -DCOMPILER_RT_BUILD_GWP_ASAN=OFF
+                                      -DCOMPILER_RT_ENABLE_CET=OFF
                                       -DLLVM_RUNTIMES_TARGET=${name}
                                       ${COMMON_CMAKE_ARGS}
                                       ${${name}_extra_args}
diff --git a/llvm/test/CodeGen/PowerPC/ppc64-elf-abi.ll b/llvm/test/CodeGen/PowerPC/ppc64-elf-abi.ll
index 8b1cf6b58..296a2afa6 100644
--- a/llvm/test/CodeGen/PowerPC/ppc64-elf-abi.ll
+++ b/llvm/test/CodeGen/PowerPC/ppc64-elf-abi.ll
@@ -1,4 +1,5 @@
-; RUN: llc -verify-machineinstrs -mtriple=powerpc64-unknown-linux-gnu < %s | FileCheck %s -check-prefix=CHECK-ELFv1
+; RUN: llc -verify-machineinstrs -mtriple=powerpc64-unknown-linux-gnu < %s | FileCheck %s -check-prefix=CHECK-ELFv2
+; RUN: llc -verify-machineinstrs -mtriple=powerpc64-unknown-linux-musl < %s | FileCheck %s -check-prefix=CHECK-ELFv2
 ; RUN: llc -verify-machineinstrs -mtriple=powerpc64-unknown-linux-gnu -target-abi elfv1 < %s | FileCheck %s -check-prefix=CHECK-ELFv1
 ; RUN: llc -verify-machineinstrs -mtriple=powerpc64-unknown-linux-gnu -target-abi elfv2 < %s | FileCheck %s -check-prefix=CHECK-ELFv2
 ; RUN: llc -verify-machineinstrs -mtriple=powerpc64le-unknown-linux-gnu < %s | FileCheck %s -check-prefix=CHECK-ELFv2
diff --git a/openmp/CMakeLists.txt b/openmp/CMakeLists.txt
index a87ea2fb57c5..64cd7c085609 100644
--- a/openmp/CMakeLists.txt
+++ b/openmp/CMakeLists.txt
@@ -21,6 +21,25 @@ if (OPENMP_STANDALONE_BUILD OR "${CMAKE_SOURCE_DIR}" STREQUAL "${CMAKE_CURRENT_S
   endif()
 endif()

+set(CMAKE_C_FLAGS " -D_LIBCPP_STD_VER=23 -fPIC --sysroot=${KISS_ROOT} \
+-isystem $ENV{MAKEDIR}/clang/lib/Headers \
+-isystem $ENV{MAKEDIR}/$ENV{OUTPUT_FOLDER}/runtimes/runtimes-bins/pstl/generated_headers \
+-isystem $ENV{MAKEDIR}/pstl/include -isystem /usr/include \
+-isystem $ENV{MAKEDIR}/libcxx/include -isystem /usr/include/c++/v1 \
+${CMAKE_C_FLAGS}")
+set(CMAKE_CXX_FLAGS " -D_LIBCPP_STD_VER=23 -fPIC --sysroot=${KISS_ROOT} \
+-isystem $ENV{MAKEDIR}/clang/lib/Headers \
+-isystem $ENV{MAKEDIR}/$ENV{OUTPUT_FOLDER}/runtimes/runtimes-bins/pstl/generated_headers \
+-isystem $ENV{MAKEDIR}/pstl/include -isystem /usr/include \
+-isystem $ENV{MAKEDIR}/libcxx/include -isystem /usr/include/c++/v1 \
+${CMAKE_CXX_FLAGS}")
+message(STATUS "openmp/CMakeLists.txt \${CMAKE_C_COMPILER} = ${CMAKE_C_COMPILER}")
+message(STATUS "openmp/CMakeLists.txt \${CMAKE_CXX_COMPILER} = ${CMAKE_CXX_COMPILER}")
+message(STATUS "openmp/CMakeLists.txt \${CMAKE_C_FLAGS} = ${CMAKE_C_FLAGS}")
+message(STATUS "openmp/CMakeLists.txt \${CMAKE_CXX_FLAGS} = ${CMAKE_CXX_FLAGS}")
+
+add_compile_options (-fPIC)
+
 # Must go below project(..)
 include(GNUInstallDirs)

@@ -58,6 +77,9 @@ else()
   endif()
 endif()

+set (LLVM_CXX_STD "c++20")
+set (LLVM_REQUIRED_CXX_STANDARD 20)
+set (CMAKE_SIZEOF_VOID_P "8")
 # Check and set up common compiler flags.
 include(config-ix)
 include(HandleOpenMPOptions)
@@ -75,7 +97,7 @@ set(ENABLE_LIBOMPTARGET ON)
 # Since the device plugins are only supported on Linux anyway,
 # there is no point in trying to compile libomptarget on other OSes.
 # 32-bit systems are not supported either.
-if (APPLE OR WIN32 OR NOT OPENMP_HAVE_STD_CPP17_FLAG OR NOT CMAKE_SIZEOF_VOID_P EQUAL 8)
+if (APPLE OR WIN32 OR NOT OPENMP_HAS_STD_CPP_FLAG OR NOT CMAKE_SIZEOF_VOID_P EQUAL 8)
   set(ENABLE_LIBOMPTARGET OFF)
 endif()

@@ -99,7 +121,7 @@ if (OPENMP_ENABLE_LIBOMPTARGET)
   # Check that the library can actually be built.
   if (APPLE OR WIN32)
     message(FATAL_ERROR "libomptarget cannot be built on Windows and MacOS X!")
-  elseif (NOT OPENMP_HAVE_STD_CPP17_FLAG)
+  elseif (NOT OPENMP_HAS_STD_CPP_FLAG)
     message(FATAL_ERROR "Host compiler must support C++17 to build libomptarget!")
   elseif (NOT CMAKE_SIZEOF_VOID_P EQUAL 8)
     message(FATAL_ERROR "libomptarget on 32-bit systems are not supported!")
diff --git a/openmp/cmake/HandleOpenMPOptions.cmake b/openmp/cmake/HandleOpenMPOptions.cmake
index 53a2d053e424..43afc180fc51 100644
--- a/openmp/cmake/HandleOpenMPOptions.cmake
+++ b/openmp/cmake/HandleOpenMPOptions.cmake
@@ -36,4 +36,4 @@ append_if(OPENMP_HAVE_WEXTRA_FLAG "-Wno-extra" CMAKE_C_FLAGS CMAKE_CXX_FLAGS)
 append_if(OPENMP_HAVE_WPEDANTIC_FLAG "-Wno-pedantic" CMAKE_C_FLAGS CMAKE_CXX_FLAGS)
 append_if(OPENMP_HAVE_WMAYBE_UNINITIALIZED_FLAG "-Wno-maybe-uninitialized" CMAKE_C_FLAGS CMAKE_CXX_FLAGS)

-append_if(OPENMP_HAVE_STD_CPP17_FLAG "-std=c++17" CMAKE_CXX_FLAGS)
+append_if(OPENMP_HAS_STD_CPP_FLAG "-std=c++20" CMAKE_CXX_FLAGS)
diff --git a/openmp/cmake/config-ix.cmake b/openmp/cmake/config-ix.cmake
index 857cfe5da8d6..a2fd13b7e2f4 100644
--- a/openmp/cmake/config-ix.cmake
+++ b/openmp/cmake/config-ix.cmake
@@ -37,4 +37,5 @@ check_cxx_compiler_flag(-Wextra OPENMP_HAVE_WEXTRA_FLAG)
 check_cxx_compiler_flag(-Wpedantic OPENMP_HAVE_WPEDANTIC_FLAG)
 check_cxx_compiler_flag(-Wmaybe-uninitialized OPENMP_HAVE_WMAYBE_UNINITIALIZED_FLAG)

-check_cxx_compiler_flag(-std=c++17 OPENMP_HAVE_STD_CPP17_FLAG)
+check_cxx_compiler_flag(-std=c++20 OPENMP_HAS_STD_CPP_FLAG)
+set (OPENMP_HAS_STD_CPP_FLAG "ON")
diff --git a/openmp/libomptarget/CMakeLists.txt b/openmp/libomptarget/CMakeLists.txt
index bc6e615cd584..c4a299e88e75 100644
--- a/openmp/libomptarget/CMakeLists.txt
+++ b/openmp/libomptarget/CMakeLists.txt
@@ -48,6 +48,8 @@ set (LIBOMPTARGET_ALL_TARGETS "${LIBOMPTARGET_ALL_TARGETS} powerpc64-ibm-linux-g
 set (LIBOMPTARGET_ALL_TARGETS "${LIBOMPTARGET_ALL_TARGETS} powerpc64-ibm-linux-gnu-LTO")
 set (LIBOMPTARGET_ALL_TARGETS "${LIBOMPTARGET_ALL_TARGETS} x86_64-pc-linux-gnu")
 set (LIBOMPTARGET_ALL_TARGETS "${LIBOMPTARGET_ALL_TARGETS} x86_64-pc-linux-gnu-LTO")
+set (LIBOMPTARGET_ALL_TARGETS "${LIBOMPTARGET_ALL_TARGETS} x86_64-linux-musl")
+set (LIBOMPTARGET_ALL_TARGETS "${LIBOMPTARGET_ALL_TARGETS} x86_64-linux-musl-LTO")
 set (LIBOMPTARGET_ALL_TARGETS "${LIBOMPTARGET_ALL_TARGETS} nvptx64-nvidia-cuda")
 set (LIBOMPTARGET_ALL_TARGETS "${LIBOMPTARGET_ALL_TARGETS} nvptx64-nvidia-cuda-LTO")
 set (LIBOMPTARGET_ALL_TARGETS "${LIBOMPTARGET_ALL_TARGETS} nvptx64-nvidia-cuda-JIT-LTO")
diff --git a/openmp/runtime/cmake/config-ix.cmake b/openmp/runtime/cmake/config-ix.cmake
index 8e76e66066a9..ccb6f1a652bc 100644
--- a/openmp/runtime/cmake/config-ix.cmake
+++ b/openmp/runtime/cmake/config-ix.cmake
@@ -155,6 +155,11 @@ if(CMAKE_C_COMPILER_ID STREQUAL "Intel" OR CMAKE_C_COMPILER_ID STREQUAL "IntelLL
   check_library_exists(irc_pic _intel_fast_memcpy "" LIBOMP_HAVE_IRC_PIC_LIBRARY)
 endif()

+set (CMAKE_THREAD_LIBS_INIT         "-lpthread")
+set (CMAKE_HAVE_THREADS_LIBRARY     1)
+set (CMAKE_USE_WIN32_THREADS_INIT   0)
+set (CMAKE_USE_PTHREADS_INIT        1)
+set (THREADS_PREFER_PTHREAD_FLAG    ON) # set(THREADS_PREFER_PTHREAD_FLAG TRUE)
 # Checking Threading requirements
 find_package(Threads REQUIRED)
 if(WIN32)
diff --git a/polly/lib/External/CMakeLists.txt b/polly/lib/External/CMakeLists.txt
index c0a5b32e283f..26bd1befdd8e 100644
--- a/polly/lib/External/CMakeLists.txt
+++ b/polly/lib/External/CMakeLists.txt
@@ -12,6 +12,22 @@ else ()
   set(DISABLE_WARNING_FLAGS "-w")
 endif ()

+set(CMAKE_C_FLAGS " -D_LIBCPP_STD_VER=23 -fPIC --sysroot=${KISS_ROOT} \
+-isystem $ENV{MAKEDIR}/clang/lib/Headers \
+-isystem $ENV{MAKEDIR}/$ENV{OUTPUT_FOLDER}/runtimes/runtimes-bins/pstl/generated_headers \
+-isystem $ENV{MAKEDIR}/pstl/include -isystem /usr/include \
+-isystem $ENV{MAKEDIR}/libcxx/include -isystem /usr/include/c++/v1 \
+${CMAKE_C_FLAGS}")
+set(CMAKE_CXX_FLAGS " -D_LIBCPP_STD_VER=23 -fPIC --sysroot=${KISS_ROOT} \
+-isystem $ENV{MAKEDIR}/clang/lib/Headers \
+-isystem $ENV{MAKEDIR}/$ENV{OUTPUT_FOLDER}/runtimes/runtimes-bins/pstl/generated_headers \
+-isystem $ENV{MAKEDIR}/pstl/include -isystem /usr/include \
+-isystem $ENV{MAKEDIR}/libcxx/include -isystem /usr/include/c++/v1 \
+${CMAKE_CXX_FLAGS}")
+message(STATUS "polly/lib/External/CMakeLists.txt \${CMAKE_C_COMPILER} = ${CMAKE_C_COMPILER}")
+message(STATUS "polly/lib/External/CMakeLists.txt \${CMAKE_CXX_COMPILER} = ${CMAKE_CXX_COMPILER}")
+message(STATUS "polly/lib/External/CMakeLists.txt \${CMAKE_C_FLAGS} = ${CMAKE_C_FLAGS}")
+message(STATUS "polly/lib/External/CMakeLists.txt \${CMAKE_CXX_FLAGS} = ${CMAKE_CXX_FLAGS}")

 # External: Integer Set Library
 if (POLLY_BUNDLED_ISL)
@@ -308,6 +324,8 @@ if (POLLY_BUNDLED_ISL)

   # ISL requires at least C99 to compile. gcc < 5.0 use -std=gnu89 as default.
   set_property(TARGET PollyISL polly-isl-test PROPERTY C_STANDARD 99)
+  set_property(TARGET PollyISL APPEND PROPERTY COMPILE_OPTIONS "-fPIC")
+  add_compile_options (-fPIC)

   target_compile_options(PollyISL PRIVATE ${DISABLE_WARNING_FLAGS})
   target_compile_options(polly-isl-test PRIVATE ${DISABLE_WARNING_FLAGS})
diff --git a/utils/bazel/llvm-project-overlay/llvm/config.bzl b/utils/bazel/llvm-project-overlay/llvm/config.bzl
index 5507f80efa0b..b15ec9e1bb39 100644
--- a/utils/bazel/llvm-project-overlay/llvm/config.bzl
+++ b/utils/bazel/llvm-project-overlay/llvm/config.bzl
@@ -48,7 +48,7 @@ posix_defines = [
 linux_defines = posix_defines + [
     "_GNU_SOURCE",
     "HAVE_LINK_H=1",
-    "HAVE_LSEEK64=1",
+    "HAVE_LSEEK64=0",
     "HAVE_MALLINFO=1",
     "HAVE_SBRK=1",
     "HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC=1",
diff --git a/utils/bazel/llvm-project-overlay/llvm/include/llvm/Config/config.h b/utils/bazel/llvm-project-overlay/llvm/include/llvm/Config/config.h
index 8a30957b6120..43698cb46974 100644
--- a/utils/bazel/llvm-project-overlay/llvm/include/llvm/Config/config.h
+++ b/utils/bazel/llvm-project-overlay/llvm/include/llvm/Config/config.h
@@ -146,6 +146,9 @@

 /* Define to 1 if you have the `lseek64' function. */
 /* HAVE_LSEEK64 defined in Bazel */
+#if defined HAVE_LSEEK64
+#undef HAVE_LSEEK64
+#endif

 /* Define to 1 if you have the <mach/mach.h> header file. */
 /* HAVE_MACH_MACH_H defined in Bazel */
