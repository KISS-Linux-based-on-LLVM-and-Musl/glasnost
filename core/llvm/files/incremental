#!/bin/sh -e

[ ! -z "${OSTYPE+x}" ] ||
OSTYPE="$(ldd --version 2>&1 | grep musl | awk '{print $1}')"
! expr "$OSTYPE" : "musl" 1>/dev/null ||
CXXFLAGS="-DLIBCXX_HAS_MUSL_LIBC=1 $CXXFLAGS"
# cat /usr/include/c++/v1/__config_site | grep _LIBCPP_HAS_MUSL_LIBC
# CXXFLAGS="-DLIBCXX_HAS_MUSL_LIBC=1 -D_LIBCPP_HAS_MUSL_LIBC=1 $CXXFLAGS"

# CFLAGS="--target=$KISS_XHOST_TRIPLE -O3 -pipe -fPIC -march=x86-64 -mtune=native -mcpu=x86-64"
# CXXFLAGS="--target=$KISS_XHOST_TRIPLE -O3 -pipe -fPIC -march=x86-64 -mtune=native -mcpu=x86-64"
CF="$CFLAGS"
# CXXF="$CXXFLAGS"
CXXF=""
# LDF="$LDFLAGS"
LDF=""
unset CFLAGS
unset CXXFLAGS
unset LDFLAGS

[ ! -z "${SYS_ROOT+x}" ] || SYS_ROOT=
export COMPILER_RESOURCE_DIR=$("$CC" --print-resource-dir)
echo "\$COMPILER_RESOURCE_DIR = $COMPILER_RESOURCE_DIR"
export usr_root="$SYS_ROOT/usr"
export HOST_LLVM_VERSION=$(llvm-config --version)
[ ! -z "${CXX_STANDARD_VER+x}" ] ||
export CXX_STANDARD_VER="c++20"
export LLVM_BIN_DIR="${LLVM_BIN_DIR:=$(${usr_root}/bin/llvm-config --bindir)}"

export LLVM_TOOLCHAIN_LIB_DIR=$(llvm-config --libdir)
[ -d "${PWD}/build/lib" ] || \mkdir -p "${PWD}/build/lib"
[ -d "${PWD}/build/include/c++/v1" ] || \mkdir -p "${PWD}/build/include/c++/v1"
[ -d "${PWD}/build/bin" ] || \mkdir -p "${PWD}/build/bin"
export ORIGIN="${PWD}/build/bin"

CF="$CF -resource-dir=${COMPILER_RESOURCE_DIR} -B${LLVM_BIN_DIR} -Os -fPIC -mtune=native"
# CF="$CF -O3 -fPIC -mtune=native"
# CXXF="$CXXF -resource-dir=${COMPILER_RESOURCE_DIR} -B${LLVM_BIN_DIR} -Os -fPIC -mtune=native"
# CXXF="$CXXF -O3 -fPIC -mtune=native"

[ -z "${_LIBCPP_VERSION+x}" ] ||
CXXF="-D_LIBCPP_PROVIDES_DEFAULT_RUNE_TABLE=1 $CXXF"

# CF="$CF -UHAVE_LSEEK64"
# CF="$CF -D_LARGEFILE64_SOURCE=1"

CF="$CF \
-pthread \
-Os \
-pipe \
-fno-pie \
-isystem ${usr_root}/include \
-isystem $COMPILER_RESOURCE_DIR/include \
-isystem ${usr_root}/include/tirpc \
--sysroot=${SYS_ROOT} \
--target=x86_64-linux-musl \
"
# These two are the same
# -isystem /usr/lib/clang/$HOST_LLVM_VERSION/include \
# -isystem $COMPILER_RESOURCE_DIR/include \

# https://www.baeldung.com/linux/sysroot
# -isysroot ${SYS_ROOT} \ # For include directories
# -flto=thin \
# ld.lld: error: undefined symbol: vtable for llvm::cl::parser<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >
# ld.lld: error: undefined symbol: llvm::raw_ostream::write(char const*, unsigned long)
# ld.lld: error: undefined symbol: vtable for llvm::cl::Option
# -fvisibility=hidden makes all your symbols hidden by default
# -fvisibility=hidden \

# https://stackoverflow.com/questions/1512933/when-should-i-use-gccs-pipe-option
# Use pipes rather than temporary files for communication between the various stages of compilation.
# Do we have to use -pipe? yes, it is better to use.
# -pipe \

# ld.lld: warning: cannot find entry symbol _start; not setting start address
# -nostartfiles \
CXXF="$CXXF -UHAVE_CXX_ATOMICS_WITH_LIB"
CXXF="$CXXF -D_LARGEFILE64_SOURCE=1"

export LIBCXXABI_CXX_FLAGS=" \
$CXXF \
-fno-sanitize-thread-atomics \
-isystem ${usr_root}/include \
-isystem $ORIGIN/../include/c++/v1 \
-std=$CXX_STANDARD_VER \
-stdlib=libc++ \
$CF \
"
# -isystem ${usr_root}/include/c++/v1 \

CXXF=" \
$CXXF \
-fno-sanitize-thread-atomics \
-isystem $ORIGIN/../include/c++/v1 \
-std=$CXX_STANDARD_VER \
-stdlib=libc++ \
$CF \
"

# -isystem ${usr_root}/include/c++/v1 \
# -nostdinc++ \

# ld.lld: warning: cannot find entry symbol _start; not setting start address
# -nostdlib \
# -nodefaultlibs \
# -nostartfiles \

LDF="$LDF \
-fuse-ld=lld \
-no-pie \
-Wl,-lunwind \
-rtlib=compiler-rt \
-unwindlib=libunwind \
-Wl,-rpath ${ORIGIN}/../lib \
-Wl,-rpath ${PWD}/build/lib \
-Wl,-rpath ${LLVM_TOOLCHAIN_LIB_DIR} \
-Wl,-rpath-link ${LLVM_TOOLCHAIN_LIB_DIR} \
-Wl,-rpath=${usr_root}/lib \
-L${PWD}/build/lib \
-Wl,-L ${LLVM_TOOLCHAIN_LIB_DIR} \
-L$COMPILER_RESOURCE_DIR/lib/linux \
-L${usr_root}/lib \
-lc \
-lc++ \
-lc++abi \
-mllvm --polly \
-lexecinfo \
-stdlib=libc++ \
-lrt -ldl -lz -lm \
-rdynamic -lc++experimental -lpthread -lunwind -v \
"
# http://blog.tremily.us/posts/rpath/
# LDFLAGS=-Wl,-rpath=/usr/lib/binutils/avr/git,--enable-new-dtags ./configure

# ninja: job failed: cd /tmp/root/kiss/proc/llvm/build/build/tools/clang/lib/Tooling && /tmp/root/kiss/proc/llvm/build/build/bin/clang-ast-dump --skip-processing=0 -I /tmp/root/kiss/proc/llvm/build/build/lib/clang/14.0.3/include -I /tmp/root/kiss/proc/llvm/build/clang/include -I /tmp/root/kiss/proc/llvm/build/build/tools/clang/include -I /tmp/root/kiss/proc/llvm/build/build/include -I /tmp/root/kiss/proc/llvm/build/llvm/include -I /usr/include/c++/v1 -I /usr/include -I /usr/lib/clang/14.0.3/include -I /usr/include/tirpc --json-output-path /tmp/root/kiss/proc/llvm/build/build/tools/clang/lib/Tooling/ASTNodeAPI.json
# Error relocating /tmp/root/kiss/proc/llvm/build/build/bin/clang-ast-dump: _ZNK4llvm5Error19fatalUncheckedErrorEv: symbol not found
# ninja: subcommand failed
# Because ldd /tmp/root/kiss/proc/llvm/build/build/bin/clang-ast-dump shows it use /usr/lib/libLLVM-14.so
# Actually it should use /tmp/root/kiss/proc/llvm/build/build/lib/libLLVM-14.so
# \cp -f /tmp/root/kiss/proc/llvm/build/build/lib/libLLVM-14.so /usr/lib/ (will demage the system clang toolchain)
# Error relocating /usr/bin/../lib/libclang-cpp.so.14: _ZN4llvm21SymbolTableListTraitsINS_11InstructionEE21transferNodesFromListERS2_NS_14ilist_iteratorINS_12ilist_detail12node_optionsIS1_Lb0ELb0EvEELb0ELb0EEES8_: symbol not found
# Error relocating /usr/bin/../lib/libclang-cpp.so.14: LLVMInitializeARMTargetInfo: symbol not found
# Error relocating /usr/bin/../lib/libclang-cpp.so.14: _ZN4llvm24DisableABIBreakingChecksE: symbol not found
# Error relocating /usr/bin/clang: LLVMInitializeARMTargetInfo: symbol not found
# Error relocating /usr/bin/clang: _ZN4llvm24DisableABIBreakingChecksE: symbol not found
# Added
# [ -d "${PWD}/build/lib" ] || \mkdir -p "${PWD}/build/lib"
# [ -d "${PWD}/build/bin" ] || \mkdir -p "${PWD}/build/bin"
# ORIGIN="${PWD}/build/bin"
# -Wl,-rpath ${ORIGIN}/../lib \
# -Wl,-rpath ${PWD}/build/lib \
# to LDFLAGS
# solved it.

# ld.lld: error: undefined symbol: llvm::raw_ostream::write(char const*, unsigned long)
# ld.lld: error: undefined symbol: vtable for llvm::cl::Option
# https://stackoverflow.com/questions/1693634/undefined-symbols-vtable-for-and-typeinfo-for
# vtable and typeinfo are internal structures generated by the C++ compiler.
# vtable is used for calling virtuable functions and typeinfo is used for RTTI
# -fvisibility=hidden \
# -fno-rtti \
# -flto=thin \
# LLVM_ENABLE_LTO
# ABI

# https://gcc.gnu.org/onlinedocs/gcc/Code-Gen-Options.html
# https://stackoverflow.com/questions/43367427/32-bit-absolute-addresses-no-longer-allowed-in-x86-64-linux
# position-independent code (PIC)
# position-independent executable
# -fno-pie \ # It is the code-gen option
# -no-pie \  # -nopie in clang only version. It is the linker option

# ld.lld: warning: cannot find entry symbol _start; not setting start address
# -nostdlib \
# -nodefaultlibs \
# -nostartfiles \
# -e main \

export LLVM_IAS=1
export LLVM=1
export CF="$CF -Wno-shift-op-parentheses -Wno-unknown-warning-option"
export CXXF="$CXXF -Wno-unused-variable -Wno-ignored-attributes -Wno-unused-command-line-argument -Wno-unknown-warning-option"
export LDF="$LDF -Wno-unknown-warning-option"
export CFLAGS="$CF"
export CXXFLAGS="$CXXF"
export LDFLAGS="$LDF"
# Don't set the compiler here, interferes with 2-stage build
kiss-cmake-config | sed '/CMAKE_C_COMPILER/d;' | sed '/CMAKE_CXX_COMPILER/d;' > cmake.config

# patch -p1 < glasnost.patch

# What version of llvm is currently installed?
llvm_ver="$(cat ${KISS_ROOT}/var/db/kiss/installed/llvm/version | cut -d " " -f 1)"

# Bootstrap only if version is different and it's not a crossbuild
{ { [ "$llvm_ver" = "$2" ] || [ ! -z "${KISS_ROOT+x}" ]; } &&
    [ -z "${BOOTSTRAP+x}" ]; } || bootstrap="1"

# If this is a cross, use a toolchain file
[ -z "${KISS_ROOT+x}" ]  || {
    toolchain="-DCMAKE_TOOLCHAIN_FILE=$(realpath cmake.config)"
    bstoolchain="-DBOOTSTRAP_CMAKE_TOOLCHAIN_FILE=$(realpath cmake.config)"
}

# Default set of runtimes
runtimes="compiler-rt;libcxx;libcxxabi;libunwind"

# Determine targets for architecture
case $KISS_XHOST_ARCH in
   aarch64_be)  TARGET_ARCH="AArch64" libname="aarch64_be";;
   aarch64)     TARGET_ARCH="AArch64" libname="aarch64"     runtimes="${runtimes};openmp";;
   armv7)       TARGET_ARCH="ARMv7"   libname="armhf";;
   i686)        TARGET_ARCH="X86"     libname="i386";;
   powerpc64)   TARGET_ARCH="PowerPC" libname="powerpc64"   runtimes="${runtimes};openmp";;
   powerpc64le) TARGET_ARCH="PowerPC" libname="powerpc64le" runtimes="${runtimes};openmp";;
   powerpcle)   TARGET_ARCH="PowerPC" libname="powerpcle";;
   powerpc)     TARGET_ARCH="PowerPC" libname="powerpc";;
   riscv64)     TARGET_ARCH="RISCV64" libname="riscv64";;
   x86_64)      TARGET_ARCH="X86"     libname="x86_64"      runtimes="${runtimes};openmp";;
   *) echo "Unsupported platform: $KISS_XHOST_ARCH"; exit 1;;
esac

# https://www.llvm.org/docs/AdvancedBuilds.html
# https://llvm.org/docs/BuildingADistribution.html
echo "Building for: $TARGET_ARCH"
echo "Building runtimes: $runtimes"

if [ "$bootstrap" = "1" ]; then
    echo "Building stage 1 and stage 2..."

    cmake -B build \
    -G Ninja \
    -C Distribution.cmake \
    -DCMAKE_POLICY_DEFAULT_CMP0002="NEW" \
    -DCMAKE_POLICY_DEFAULT_CMP0003="NEW" \
    -DCMAKE_POLICY_DEFAULT_CMP0056="NEW" \
    -DCMAKE_POLICY_DEFAULT_CMP0057="NEW" \
    -DCMAKE_POLICY_DEFAULT_CMP0058="NEW" \
    -DCMAKE_POLICY_DEFAULT_CMP0011="NEW" \
    -DCMAKE_POLICY_DEFAULT_CMP0076="NEW" \
    -DCMAKE_POLICY_DEFAULT_CMP0114="NEW" \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DBOOTSTRAP_CMAKE_ASM_FLAGS:STRING="$CF" \
    -DBOOTSTRAP_CMAKE_C_FLAGS:STRING="$CF" \
    -DBOOTSTRAP_CMAKE_CXX_FLAGS:STRING="$CXXF" \
    -DBOOTSTRAP_KISS_ROOT:PATH=$KISS_ROOT \
    -DBOOTSTRAP_LLVM_DEFAULT_TARGET_TRIPLE:STRING=$KISS_XHOST_TRIPLE \
    -DBOOTSTRAP_LLVM_ENABLE_LTO:STRING=OFF \
    -DBOOTSTRAP_LLVM_BUILTIN_TARGETS:STRING=$KISS_XHOST_TRIPLE \
    -DBOOTSTRAP_LLVM_ENABLE_RUNTIMES:STRING="$runtimes" \
    -DBOOTSTRAP_LLVM_HOST_TRIPLE:STRING=$KISS_XHOST_TRIPLE \
    -DBOOTSTRAP_LLVM_TARGET_ARCH:STRING=$TARGET_ARCH \
    $bstoolchain \
    -DLLVM_TARGETS_TO_BUILD="host;AMDGPU" \
    -DLLVM_BUILTIN_TARGETS=$KISS_XHOST_TRIPLE \
    -DCLANG_ENABLE_BOOTSTRAP=ON \
    -DCMAKE_ASM_FLAGS="$CF" \
    -DCMAKE_CXX_COMPILER=$LLVM_BIN_DIR/clang++ \
    -DCMAKE_C_FLAGS="$CF -fPIC -O3 -gline-tables-only -DNDEBUG" \
    -DCMAKE_CXX_FLAGS="$CXXF -fPIC -O3 -gline-tables-only -DNDEBUG" \
    -DLIBCXXABI_CXX_FLAGS:STRING="$LIBCXXABI_CXX_FLAGS" \
    -DCMAKE_C_COMPILER=$LLVM_BIN_DIR/clang \
    -DCMAKE_ASM_COMPILER=$LLVM_BIN_DIR/clang \
    -DKISS_ROOT="/" \
    -DLLVM_HOST_TRIPLE="$KISS_XBUILD_TRIPLE" \
    -DLLVM_TARGET_ARCH="host" \
    -DLLVM_HAS_ATOMICS=ON \
    -DCOMPILER_RT_EXCLUDE_ATOMIC_BUILTIN=OFF \
    -DHAVE_CXX_ATOMICS_WITH_LIB=OFF \
    -DHAVE_CXX_ATOMICS_WITHOUT_LIB=1 \
    -DHAVE_CXX_ATOMICS64_WITHOUT_LIB=1 \
    -DLIBCXX_HAVE_CXX_ATOMICS_WITHOUT_LIB="1" \
    -DLIBCXX_HAVE_CXX_ATOMICS64_WITHOUT_LIB="1" \
    -DLLVM_ENABLE_RTTI=ON \
    -DLIBCXX_ENABLE_RTTI=ON \
    -DLLVM_DEFAULT_TARGET_TRIPLE=$KISS_XHOST_TRIPLE \
    -DLLVM_HOST_TRIPLE=$KISS_XHOST_TRIPLE \
    -DLLVM_BUILD_LLVM_DYLIB=ON \
    -DLLVM_LINK_LLVM_DYLIB=ON \
    -DLLVM_ENABLE_LIBCXX=ON \
    -DLLVM_ENABLE_ASSERTIONS=ON \
    -DLLVM_INSTALL_BINUTILS_SYMLINKS=ON \
    -DLIBUNWIND_USE_COMPILER_RT=ON \
    -DLIBCXXABI_USE_LLVM_UNWINDER=ON \
    -DLIBCXXABI_USE_COMPILER_RT=ON \
    -DLIBCXX_CXX_ABI=libcxxabi \
    -DCLANG_DEFAULT_UNWINDLIB=libunwind \
    -DCMAKE_SIZEOF_VOID_P=8 \
    -DLIBCXX_USE_COMPILER_RT=ON \
    -DCMAKE_INSTALL_LIBDIR=lib \
    -DLLVM_ENABLE_EH=ON \
    -DLLVM_ENABLE_TERMINFO=OFF \
    -DLIBCXXABI_ENABLE_STATIC_UNWINDER=ON \
    -DLIBCXXABI_ENABLE_SHARED=OFF \
    -DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=ON \
    -DLIBCXX_STATICALLY_LINK_ABI_IN_SHARED_LIBRARY=ON \
    -DLIBCXX_STATICALLY_LINK_ABI_IN_STATIC_LIBRARY=ON \
    -DLIBCXX_HAS_MUSL_LIBC=ON \
    -DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON \
    -DCLANG_DEFAULT_CXX_STDLIB=libc++ \
    -DCLANG_DEFAULT_RTLIB=compiler-rt \
    -DLIBOMP_ENABLE_SHARED=ON \
    llvm

    # -DBOOTSTRAP_LLVM_ENABLE_LTO=Thin \
    ninja -C build stage2-install-distribution

    # Clang: clang-tblgen, required for crossbuilding.
    cp build/tools/clang/stage2-bins/bin/clang-tblgen  $1/usr/bin/clang-tblgen
    cp build/tools/clang/stage2-bins/lib/libPollyISL.a $1/usr/lib/libPollyISL.a

else
    echo "Building stage 2 only..."

    cmake -B build \
    -G Ninja \
    -C Distribution-stage2.cmake \
    -DCMAKE_POLICY_DEFAULT_CMP0002="NEW" \
    -DCMAKE_POLICY_DEFAULT_CMP0003="NEW" \
    -DCMAKE_POLICY_DEFAULT_CMP0056="NEW" \
    -DCMAKE_POLICY_DEFAULT_CMP0057="NEW" \
    -DCMAKE_POLICY_DEFAULT_CMP0058="NEW" \
    -DCMAKE_POLICY_DEFAULT_CMP0011="NEW" \
    -DCMAKE_POLICY_DEFAULT_CMP0076="NEW" \
    -DCMAKE_POLICY_DEFAULT_CMP0114="NEW" \
    -DCMAKE_ASM_FLAGS="$CF" \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_CXX_COMPILER=$LLVM_BIN_DIR/clang++ \
    -DCMAKE_CXX_FLAGS="$CXXF" \
    -DLIBCXXABI_CXX_FLAGS:STRING="$LIBCXXABI_CXX_FLAGS" \
    -DCMAKE_C_COMPILER=$LLVM_BIN_DIR/clang \
    -DCMAKE_ASM_COMPILER=$LLVM_BIN_DIR/clang \
    -DCMAKE_C_FLAGS="$CF" \
    $toolchain \
    -DLLVM_TARGETS_TO_BUILD="host;AMDGPU" \
    -DKISS_ROOT=$KISS_ROOT \
    -DLIBUNWIND_SYSROOT=$KISS_ROOT \
    -DLLVM_ENABLE_LTO=OFF \
    -DLLVM_ENABLE_RTTI=ON \
    -DLIBCXX_ENABLE_RTTI=ON \
    -DLLVM_BUILTIN_TARGETS=$KISS_XHOST_TRIPLE \
    -DLLVM_DEFAULT_TARGET_TRIPLE=$KISS_XHOST_TRIPLE \
    -DLLVM_ENABLE_RUNTIMES="$runtimes" \
    -DLLVM_HOST_TRIPLE=$KISS_XHOST_TRIPLE \
    -DLLVM_BUILD_LLVM_DYLIB=ON \
    -DLLVM_LINK_LLVM_DYLIB=ON \
    -DLLVM_ENABLE_LIBCXX=ON \
    -DLLVM_ENABLE_ASSERTIONS=ON \
    -DLLVM_INSTALL_BINUTILS_SYMLINKS=ON \
    -DLIBUNWIND_USE_COMPILER_RT=ON \
    -DLIBCXXABI_USE_LLVM_UNWINDER=ON \
    -DLIBCXXABI_USE_COMPILER_RT=ON \
    -DLIBCXX_CXX_ABI=libcxxabi \
    -DCLANG_DEFAULT_UNWINDLIB=libunwind \
    -DCMAKE_SIZEOF_VOID_P=8 \
    -DLIBCXX_USE_COMPILER_RT=ON \
    -DCMAKE_INSTALL_LIBDIR=lib \
    -DLLVM_ENABLE_EH=ON \
    -DLLVM_ENABLE_TERMINFO=OFF \
    -DLIBCXXABI_ENABLE_STATIC_UNWINDER=ON \
    -DLIBCXXABI_ENABLE_SHARED=OFF \
    -DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=ON \
    -DLIBCXX_STATICALLY_LINK_ABI_IN_SHARED_LIBRARY=ON \
    -DLIBCXX_STATICALLY_LINK_ABI_IN_STATIC_LIBRARY=ON \
    -DLIBCXX_HAS_MUSL_LIBC=ON \
    -DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON \
    -DCLANG_DEFAULT_CXX_STDLIB=libc++ \
    -DCLANG_DEFAULT_RTLIB=compiler-rt \
    -DLIBOMP_ENABLE_SHARED=ON \
    -DLLVM_TARGET_ARCH=$TARGET_ARCH \
    -DLLVM_HAS_ATOMICS=ON \
    -DCOMPILER_RT_EXCLUDE_ATOMIC_BUILTIN=OFF \
    -DHAVE_CXX_ATOMICS_WITH_LIB=OFF \
    -DHAVE_CXX_ATOMICS_WITHOUT_LIB=1 \
    -DHAVE_CXX_ATOMICS64_WITHOUT_LIB=1 \
    -DLIBCXX_HAVE_CXX_ATOMICS_WITHOUT_LIB="1" \
    -DLIBCXX_HAVE_CXX_ATOMICS64_WITHOUT_LIB="1" \
    llvm

    # -DBOOTSTRAP_LLVM_ENABLE_LTO=Thin \
    ninja -C build install-distribution

    # Clang: clang-tblgen, required for crossbuilding.
    cp build/bin/clang-tblgen  $1/usr/bin/clang-tblgen
    cp build/lib/libPollyISL.a $1/usr/lib/libPollyISL.a

fi


# LLD: Replace GNU binutils
ln -s -f ld.lld "$1/usr/bin/ld"

# Clang: Some legacy programs may require cc
ln -s -f clang "$1/usr/bin/cc"

# Clang: equivalent for c++
ln -s -f clang++ "$1/usr/bin/c++"

# Clang: equivalent for cpp
ln -s -f clang-cpp "$1/usr/bin/cpp"

# Clang: POSIX compliance
cp c99 $1/usr/bin

# For GCC compatibility
cd $1/usr/bin/
ln -s -f llvm-readobj  readelf
ln -s -f llvm-objcopy  strip
ln -s -f llvm-ar       ar
ln -s -f llvm-nm       nm
ln -s -f llvm-objcopy  objcopy
ln -s -f llvm-objdump  objdump
ln -s -f llvm-strings  strings
ln -s -f llvm-objcopy  otool
ln -s -f llvm-ranlib   ranlib
ln -s -f llvm-as       as

# This makes things like Rust easier:
cd $1/usr/lib/clang
ln -s -f $2 system
cd $1/usr/lib
ln -s -f clang/system/lib/linux/clang_rt.crtbegin-$libname.o    crtbegin.o
ln -s -f clang/system/lib/linux/clang_rt.crtbegin-$libname.o    crtbeginS.o
ln -s -f clang/system/lib/linux/clang_rt.crtend-$libname.o      crtend.o
ln -s -f clang/system/lib/linux/clang_rt.crtend-$libname.o      crtendS.o
ln -s -f clang/system/lib/linux/libclang_rt.builtins-$libname.a libatomic.a


# /tmp/root/kiss/proc/llvm/build/build/include/c++/v1/type_traits:1535:22:
# error: reference to unresolved using declaration
# template <class _Tp, size_t _Np> struct _LIBCPP_TEMPLATE_VIS remove_all_extents<_Tp[_Np]>
#                      ^
# /tmp/root/kiss/proc/llvm/build/build/include/c++/v1/cstdlib:99:1: note: 
# using declaration annotated with 'using_if_exists' here
# using ::size_t _LIBCPP_USING_IF_EXISTS;
# https://reviews.llvm.org/D89001
# [clang] Don't look into <sysroot> for C++ headers if they are found alongside the toolchain
#  
# Reverses the order so that headers are searched for in the following order:
# 1.    <sysroot>/usr/include/c++/v1
# 2.    <installdir>/bin/../include/c++/v1
# My solution:
# CXX_STANDARD_VER="c++20"

# This on does not work
# $ /tmp/root/kiss/proc/llvm/build/build/./bin/clang++ --target=x86_64-linux-musl -DLIBCXXABI_USE_LLVM_UNWINDER -D_DEBUG -D_LIBCPP_BUILDING_LIBRARY -D_LIBCPP_DISABLE_EXTERN_TEMPLATE -D_LIBCXXABI_BUILDING_LIBRARY -D_LIBCXXABI_LINK_PTHREAD_LIB -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -I/tmp/root/kiss/proc/llvm/build/libcxxabi/include -I/tmp/root/kiss/proc/llvm/build/libunwind/include -I/tmp/root/kiss/proc/llvm/build/libcxxabi/../libcxx/src -D_LIBCPP_PROVIDES_DEFAULT_RUNE_TABLE=1 -DLIBCXX_HAS_MUSL_LIBC=1 -DLIBCXX_HAS_MUSL_LIBC=1 --target=x86_64-linux-musl -O3 -pipe -fPIC -march=x86-64 -mtune=native -resource-dir=/usr/lib/clang/14.0.3 -B/usr/bin -Os -fPIC -mtune=native -UHAVE_CXX_ATOMICS_WITH_LIB -D_LARGEFILE64_SOURCE=1 -fno-sanitize-thread-atomics -isystem /usr/include/c++/v1 -std=c++20  --target=x86_64-linux-musl -O3 -pipe -fPIC -march=x86-64 -mtune=native -resource-dir=/usr/lib/clang/14.0.3 -B/usr/bin -Os -fPIC -mtune=native -D_LARGEFILE64_SOURCE=1 -pthread -Os -pipe -fno-pie -isystem /usr/include -isystem /usr/lib/clang/14.0.3/include -isystem /usr/include/tirpc -isystem /usr/lib/clang/14.0.3/include --sysroot= --target=x86_64-linux-musl   -Wno-unused-variable -Wno-ignored-attributes -Wno-unused-command-line-argument -Wno-unknown-warning-option -fPIC -O3 -gline-tables-only -DNDEBUG  -fPIC -fno-semantic-interposition -fvisibility-inlines-hidden -Werror=date-time -Werror=unguarded-availability-new -Wall -Wextra -Wno-unused-parameter -Wwrite-strings -Wcast-qual -Wmissing-field-initializers -pedantic -Wno-long-long -Wc++98-compat-extra-semi -Wimplicit-fallthrough -Wcovered-switch-default -Wno-class-memaccess -Wno-noexcept-type -Wnon-virtual-dtor -Wdelete-non-virtual-dtor -Wsuggest-override -Wno-comment -Wstring-conversion -Wmisleading-indentation -fdiagnostics-color -ffunction-sections -fdata-sections --sysroot=/ -fPIC -fno-semantic-interposition -fvisibility-inlines-hidden -Werror=date-time -Werror=unguarded-availability-new -Wall -Wextra -Wno-unused-parameter -Wwrite-strings -Wcast-qual -Wmissing-field-initializers -Wimplicit-fallthrough -Wcovered-switch-default -Wno-class-memaccess -Wno-noexcept-type -Wnon-virtual-dtor -Wdelete-non-virtual-dtor -Wsuggest-override -Wno-comment -Wstring-conversion -Wmisleading-indentation -fdiagnostics-color -ffunction-sections -fdata-sections --target=x86_64-linux-musl  -O3 -DNDEBUG --target=x86_64-linux-musl -nostdinc++ -Werror=return-type -W -Wall -Wchar-subscripts -Wconversion -Wmismatched-tags -Wmissing-braces -Wnewline-eof -Wunused-function -Wshadow -Wshorten-64-to-32 -Wsign-compare -Wsign-conversion -Wstrict-aliasing=2 -Wstrict-overflow=4 -Wunused-parameter -Wunused-variable -Wwrite-strings -Wundef -Wno-suggest-override -Wno-error -WX- -pedantic -fstrict-aliasing -funwind-tables -D_DEBUG -UNDEBUG -UNDEBUG -I/tmp/root/kiss/proc/llvm/build/build/include/c++/v1 -std=c++20 -MD -MT libcxxabi/src/CMakeFiles/cxxabi_static.dir/abort_message.cpp.o -MF libcxxabi/src/CMakeFiles/cxxabi_static.dir/abort_message.cpp.o.d -o libcxxabi/src/CMakeFiles/cxxabi_static.dir/abort_message.cpp.o -c /tmp/root/kiss/proc/llvm/build/libcxxabi/src/abort_message.cpp
# In file included from /tmp/root/kiss/proc/llvm/build/libcxxabi/src/abort_message.cpp:9:
# /tmp/root/kiss/proc/llvm/build/build/include/c++/v1/stdlib.h:148:34: error: unknown type name 'ldiv_t'
# inline _LIBCPP_INLINE_VISIBILITY ldiv_t div(long __x, long __y) _NOEXCEPT {
#                                  ^
# /tmp/root/kiss/proc/llvm/build/build/include/c++/v1/stdlib.h:149:12: error: no member named 'ldiv' in the global namespace
#   return ::ldiv(__x, __y);
#          ~~^
# /tmp/root/kiss/proc/llvm/build/build/include/c++/v1/stdlib.h:152:34: error: unknown type name 'lldiv_t'
# inline _LIBCPP_INLINE_VISIBILITY lldiv_t div(long long __x,
#                                  ^
# /tmp/root/kiss/proc/llvm/build/build/include/c++/v1/stdlib.h:154:12: error: no member named 'lldiv' in the global namespace
#   return ::lldiv(__x, __y);
#          ~~^
# In file included from /tmp/root/kiss/proc/llvm/build/libcxxabi/src/abort_message.cpp:12:
# In file included from /tmp/root/kiss/proc/llvm/build/libcxxabi/src/abort_message.h:12:
# /tmp/root/kiss/proc/llvm/build/libcxxabi/include/cxxabi.h:43:26: error: unknown type name 'size_t'
# __cxa_allocate_exception(size_t thrown_size) throw();
#                          ^
# /tmp/root/kiss/proc/llvm/build/libcxxabi/include/cxxabi.h:86:75: error: unknown type name 'uint64_t'
# extern _LIBCXXABI_FUNC_VIS _LIBCXXABI_ALWAYS_COLD int __cxa_guard_acquire(uint64_t *);
#                                                                           ^
# /tmp/root/kiss/proc/llvm/build/libcxxabi/include/cxxabi.h:87:76: error: unknown type name 'uint64_t'
# extern _LIBCXXABI_FUNC_VIS _LIBCXXABI_ALWAYS_COLD void __cxa_guard_release(uint64_t *);
#                                                                            ^
# /tmp/root/kiss/proc/llvm/build/libcxxabi/include/cxxabi.h:88:74: error: unknown type name 'uint64_t'
# extern _LIBCXXABI_FUNC_VIS _LIBCXXABI_ALWAYS_COLD void __cxa_guard_abort(uint64_t *);
#                                                                          ^
# /tmp/root/kiss/proc/llvm/build/libcxxabi/include/cxxabi.h:93:15: error: unknown type name 'size_t'
# __cxa_vec_new(size_t element_count, size_t element_size, size_t padding_size,
#               ^
# /tmp/root/kiss/proc/llvm/build/libcxxabi/include/cxxabi.h:93:37: error: unknown type name 'size_t'
# __cxa_vec_new(size_t element_count, size_t element_size, size_t padding_size,
#                                     ^
# /tmp/root/kiss/proc/llvm/build/libcxxabi/include/cxxabi.h:93:58: error: unknown type name 'size_t'
# __cxa_vec_new(size_t element_count, size_t element_size, size_t padding_size,
#                                                          ^
# /tmp/root/kiss/proc/llvm/build/libcxxabi/include/cxxabi.h:97:16: error: unknown type name 'size_t'
# __cxa_vec_new2(size_t element_count, size_t element_size, size_t padding_size,
#                ^
# /tmp/root/kiss/proc/llvm/build/libcxxabi/include/cxxabi.h:97:38: error: unknown type name 'size_t'
# __cxa_vec_new2(size_t element_count, size_t element_size, size_t padding_size,
#                                      ^
# /tmp/root/kiss/proc/llvm/build/libcxxabi/include/cxxabi.h:97:59: error: unknown type name 'size_t'
# __cxa_vec_new2(size_t element_count, size_t element_size, size_t padding_size,
#                                                           ^
# /tmp/root/kiss/proc/llvm/build/libcxxabi/include/cxxabi.h:99:31: error: unknown type name 'size_t'
#                void *(*alloc)(size_t), void (*dealloc)(void *));
#                               ^
# /tmp/root/kiss/proc/llvm/build/libcxxabi/include/cxxabi.h:102:16: error: unknown type name 'size_t'
# __cxa_vec_new3(size_t element_count, size_t element_size, size_t padding_size,
#                ^
# /tmp/root/kiss/proc/llvm/build/libcxxabi/include/cxxabi.h:102:38: error: unknown type name 'size_t'
# __cxa_vec_new3(size_t element_count, size_t element_size, size_t padding_size,
#                                      ^
# /tmp/root/kiss/proc/llvm/build/libcxxabi/include/cxxabi.h:102:59: error: unknown type name 'size_t'
# __cxa_vec_new3(size_t element_count, size_t element_size, size_t padding_size,
#                                                           ^
# /tmp/root/kiss/proc/llvm/build/libcxxabi/include/cxxabi.h:104:31: error: unknown type name 'size_t'
#                void *(*alloc)(size_t), void (*dealloc)(void *, size_t));
#                               ^
# fatal error: too many errors emitted, stopping now [-ferror-limit=]
# 20 errors generated.

# This on works
# $ /tmp/root/kiss/proc/llvm/build/build/./bin/clang++ --target=x86_64-linux-musl -DLIBCXXABI_USE_LLVM_UNWINDER -D_DEBUG -D_LIBCPP_BUILDING_LIBRARY -D_LIBCPP_DISABLE_EXTERN_TEMPLATE -D_LIBCXXABI_BUILDING_LIBRARY -D_LIBCXXABI_LINK_PTHREAD_LIB -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -I/tmp/root/kiss/proc/llvm/build/libcxxabi/include -I/tmp/root/kiss/proc/llvm/build/libunwind/include -I/tmp/root/kiss/proc/llvm/build/libcxxabi/../libcxx/src -D_LIBCPP_PROVIDES_DEFAULT_RUNE_TABLE=1 -DLIBCXX_HAS_MUSL_LIBC=1 -DLIBCXX_HAS_MUSL_LIBC=1 --target=x86_64-linux-musl -O3 -pipe -fPIC -march=x86-64 -mtune=native -resource-dir=/usr/lib/clang/14.0.3 -B/usr/bin -Os -fPIC -mtune=native -UHAVE_CXX_ATOMICS_WITH_LIB -D_LARGEFILE64_SOURCE=1 -fno-sanitize-thread-atomics -isystem /usr/include -isystem /usr/include/c++/v1 -std=c++20  --target=x86_64-linux-musl -O3 -pipe -fPIC -march=x86-64 -mtune=native -resource-dir=/usr/lib/clang/14.0.3 -B/usr/bin -Os -fPIC -mtune=native -D_LARGEFILE64_SOURCE=1 -pthread -Os -pipe -fno-pie -isystem /usr/include -isystem /usr/lib/clang/14.0.3/include -isystem /usr/include/tirpc -isystem /usr/lib/clang/14.0.3/include --sysroot= --target=x86_64-linux-musl   -Wno-unused-variable -Wno-ignored-attributes -Wno-unused-command-line-argument -Wno-unknown-warning-option -fPIC -O3 -gline-tables-only -DNDEBUG  -fPIC -fno-semantic-interposition -fvisibility-inlines-hidden -Werror=date-time -Werror=unguarded-availability-new -Wall -Wextra -Wno-unused-parameter -Wwrite-strings -Wcast-qual -Wmissing-field-initializers -pedantic -Wno-long-long -Wc++98-compat-extra-semi -Wimplicit-fallthrough -Wcovered-switch-default -Wno-class-memaccess -Wno-noexcept-type -Wnon-virtual-dtor -Wdelete-non-virtual-dtor -Wsuggest-override -Wno-comment -Wstring-conversion -Wmisleading-indentation -fdiagnostics-color -ffunction-sections -fdata-sections --sysroot=/ -fPIC -fno-semantic-interposition -fvisibility-inlines-hidden -Werror=date-time -Werror=unguarded-availability-new -Wall -Wextra -Wno-unused-parameter -Wwrite-strings -Wcast-qual -Wmissing-field-initializers -Wimplicit-fallthrough -Wcovered-switch-default -Wno-class-memaccess -Wno-noexcept-type -Wnon-virtual-dtor -Wdelete-non-virtual-dtor -Wsuggest-override -Wno-comment -Wstring-conversion -Wmisleading-indentation -fdiagnostics-color -ffunction-sections -fdata-sections --target=x86_64-linux-musl  -O3 -DNDEBUG --target=x86_64-linux-musl -nostdinc++ -Werror=return-type -W -Wall -Wchar-subscripts -Wconversion -Wmismatched-tags -Wmissing-braces -Wnewline-eof -Wunused-function -Wshadow -Wshorten-64-to-32 -Wsign-compare -Wsign-conversion -Wstrict-aliasing=2 -Wstrict-overflow=4 -Wunused-parameter -Wunused-variable -Wwrite-strings -Wundef -Wno-suggest-override -Wno-error -WX- -pedantic -fstrict-aliasing -funwind-tables -D_DEBUG -UNDEBUG -UNDEBUG -I/tmp/root/kiss/proc/llvm/build/build/include/c++/v1 -std=c++20 -MD -MT libcxxabi/src/CMakeFiles/cxxabi_static.dir/abort_message.cpp.o -MF libcxxabi/src/CMakeFiles/cxxabi_static.dir/abort_message.cpp.o.d -o libcxxabi/src/CMakeFiles/cxxabi_static.dir/abort_message.cpp.o -c /tmp/root/kiss/proc/llvm/build/libcxxabi/src/abort_message.cpp
# The only difference is -isystem /usr/include before -isystem /usr/include/c++/v1/include
# /usr/include/c++/v1/cstddef:44:15: fatal error: 'stddef.h' file not found
#include_next <stddef.h>
# when put $CF before $CXXF

# https://reviews.llvm.org/D136573
# +set(CMAKE_INSTALL_LIBDIR "lib")
