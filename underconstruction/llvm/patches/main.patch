# diff a/llvm/CMakeLists.txt b/llvm/CMakeLists.txt
# --- a/llvm/CMakeLists.txt
# +++ b/llvm/CMakeLists.txt
# @@ -156,7 +156,7 @@
#  # As we migrate runtimes to using the bootstrapping build, the set of default runtimes
#  # should grow as we remove those runtimes from LLVM_ENABLE_PROJECTS above.
#  set(LLVM_DEFAULT_RUNTIMES "libcxx;libcxxabi;libunwind")
# -set(LLVM_SUPPORTED_RUNTIMES "libc;libunwind;libcxxabi;pstl;libcxx;compiler-rt;openmp;llvm-libgcc")
# +set(LLVM_SUPPORTED_RUNTIMES "libc;libunwind;libcxxabi;pstl;libcxx;compiler-rt;openmp")
#  set(LLVM_ENABLE_RUNTIMES "" CACHE STRING
#    "Semicolon-separated list of runtimes to build, or \"all\" (${LLVM_DEFAULT_RUNTIMES}). Supported runtimes are ${LLVM_SUPPORTED_RUNTIMES}.")
#  if(LLVM_ENABLE_RUNTIMES STREQUAL "all")
# @@ -564,9 +564,9 @@
#    option(LLVM_ENABLE_MODULE_DEBUGGING "Compile with -gmodules." OFF)
#  endif()
#  option(LLVM_ENABLE_LOCAL_SUBMODULE_VISIBILITY "Compile with -fmodules-local-submodule-visibility." ON)
# -option(LLVM_ENABLE_LIBCXX "Use libc++ if available." OFF)
# +option(LLVM_ENABLE_LIBCXX "Use libc++ if available." ON)
#  option(LLVM_STATIC_LINK_CXX_STDLIB "Statically link the standard library." OFF)
# -option(LLVM_ENABLE_LLD "Use lld as C and C++ linker." OFF)
# +option(LLVM_ENABLE_LLD "Use lld as C and C++ linker." ON)
#  option(LLVM_ENABLE_PEDANTIC "Compile with pedantic enabled." ON)
#  option(LLVM_ENABLE_WERROR "Fail and stop if a warning is triggered." OFF)
# 
# 
# diff --git a/llvm/CMakeLists.txt b/llvm/CMakeLists.txt
# index 8a02f017cac7..72559b006912 100644
# --- a/llvm/CMakeLists.txt
# +++ b/llvm/CMakeLists.txt
# @@ -819,9 +819,13 @@ mark_as_advanced(LLVM_TARGET_TRIPLE_ENV)
# 
#  # Per target dir not yet supported on Arm 32 bit due to arm vs armhf handling
#  if(CMAKE_SYSTEM_NAME MATCHES "BSD|Linux" AND NOT CMAKE_SYSTEM_PROCESSOR MATCHES "^arm")
# -  set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default ON)
# +  if (LLVM_TARGET_TRIPLE MATCHES "$ENV{LLVM_TARGET_TRIPLE}")
# +    set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default OFF)
# +  else()
# +    set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default ON)
# +  endif()
#  else()
# -  set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default OFF)
# +    set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default OFF)
#  endif()
#  set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR ${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default} CACHE BOOL
#    "Enable per-target runtimes directory")

# diff a/llvm/CMakeLists.txt b/llvm/CMakeLists.txt
# --- a/llvm/CMakeLists.txt
# +++ b/llvm/CMakeLists.txt
# @@ -67,7 +67,7 @@
#  include(GNUInstallDirs)
# 
#  # This C++ standard is required to build LLVM.
# -set(LLVM_REQUIRED_CXX_STANDARD 17)
# +set(LLVM_REQUIRED_CXX_STANDARD 20)
# 
#  # If we find that the cache contains CMAKE_CXX_STANDARD it means that it's a old CMakeCache.txt
#  # and we can just inform the user and then reset it.
# @@ -156,7 +156,7 @@
#  # As we migrate runtimes to using the bootstrapping build, the set of default runtimes
#  # should grow as we remove those runtimes from LLVM_ENABLE_PROJECTS above.
#  set(LLVM_DEFAULT_RUNTIMES "libcxx;libcxxabi;libunwind")
# -set(LLVM_SUPPORTED_RUNTIMES "libc;libunwind;libcxxabi;pstl;libcxx;compiler-rt;openmp;llvm-libgcc")
# +set(LLVM_SUPPORTED_RUNTIMES "libc;libunwind;libcxxabi;pstl;libcxx;compiler-rt;openmp")
#  set(LLVM_ENABLE_RUNTIMES "" CACHE STRING
#    "Semicolon-separated list of runtimes to build, or \"all\" (${LLVM_DEFAULT_RUNTIMES}). Supported runtimes are ${LLVM_SUPPORTED_RUNTIMES}.")
#  if(LLVM_ENABLE_RUNTIMES STREQUAL "all")
# @@ -554,9 +554,9 @@
#    option(LLVM_ENABLE_MODULE_DEBUGGING "Compile with -gmodules." OFF)
#  endif()
#  option(LLVM_ENABLE_LOCAL_SUBMODULE_VISIBILITY "Compile with -fmodules-local-submodule-visibility." ON)
# -option(LLVM_ENABLE_LIBCXX "Use libc++ if available." OFF)
# +option(LLVM_ENABLE_LIBCXX "Use libc++ if available." ON)
#  option(LLVM_STATIC_LINK_CXX_STDLIB "Statically link the standard library." OFF)
# -option(LLVM_ENABLE_LLD "Use lld as C and C++ linker." OFF)
# +option(LLVM_ENABLE_LLD "Use lld as C and C++ linker." ON)
#  option(LLVM_ENABLE_PEDANTIC "Compile with pedantic enabled." ON)
#  option(LLVM_ENABLE_WERROR "Fail and stop if a warning is triggered." OFF)
# 
# @@ -819,9 +819,13 @@
# 
#  # Per target dir not yet supported on Arm 32 bit due to arm vs armhf handling
#  if(CMAKE_SYSTEM_NAME MATCHES "BSD|Linux" AND NOT CMAKE_SYSTEM_PROCESSOR MATCHES "^arm")
# -  set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default ON)
# +  if (LLVM_TARGET_TRIPLE MATCHES "$ENV{LLVM_TARGET_TRIPLE}")
# +    set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default OFF)
# +  else()
# +    set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default ON)
# +  endif()
#  else()
# -  set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default OFF)
# +    set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default OFF)
#  endif()
#  set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR ${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default} CACHE BOOL
#    "Enable per-target runtimes directory")
# @@ -842,10 +846,18 @@
#  find_package(Python3 ${LLVM_MINIMUM_PYTHON_VERSION} REQUIRED
#      COMPONENTS Interpreter)
# 
# +set(c_cache "${CMAKE_C_FLAGS}")
# +set(CMAKE_C_FLAGS "")
# +set(cxx_cache "${CMAKE_CXX_FLAGS}")
# +set(CMAKE_CXX_FLAGS "")
#  # All options referred to from HandleLLVMOptions have to be specified
#  # BEFORE this include, otherwise options will not be correctly set on
#  # first cmake run
#  include(config-ix)
# +set(CMAKE_C_FLAGS "${c_cache}")
# +unset(c_cache CACHE)
# +set(CMAKE_CXX_FLAGS "${cxx_cache}")
# +unset(cxx_cache CACHE)
# 
#  # By default, we target the host, but this can be overridden at CMake
#  # invocation time. Except on 64-bit AIX, where the system toolchain

# git --diff a/llvm/CMakeLists.txt b/llvm/CMakeLists.txt
# --- a/llvm/CMakeLists.txt
# +++ b/llvm/CMakeLists.txt
# @@ -67,7 +67,7 @@
#  include(GNUInstallDirs)
# 
#  # This C++ standard is required to build LLVM.
# -set(LLVM_REQUIRED_CXX_STANDARD 17)
# +set(LLVM_REQUIRED_CXX_STANDARD 20)
# 
#  # If we find that the cache contains CMAKE_CXX_STANDARD it means that it's a old CMakeCache.txt
#  # and we can just inform the user and then reset it.
# @@ -156,7 +156,7 @@
#  # As we migrate runtimes to using the bootstrapping build, the set of default runtimes
#  # should grow as we remove those runtimes from LLVM_ENABLE_PROJECTS above.
#  set(LLVM_DEFAULT_RUNTIMES "libcxx;libcxxabi;libunwind")
# -set(LLVM_SUPPORTED_RUNTIMES "libc;libunwind;libcxxabi;pstl;libcxx;compiler-rt;openmp;llvm-libgcc")
# +set(LLVM_SUPPORTED_RUNTIMES "libc;libunwind;libcxxabi;pstl;libcxx;compiler-rt;openmp")
#  set(LLVM_ENABLE_RUNTIMES "" CACHE STRING
#    "Semicolon-separated list of runtimes to build, or \"all\" (${LLVM_DEFAULT_RUNTIMES}). Supported runtimes are ${LLVM_SUPPORTED_RUNTIMES}.")
#  if(LLVM_ENABLE_RUNTIMES STREQUAL "all")
# @@ -554,9 +554,9 @@
#    option(LLVM_ENABLE_MODULE_DEBUGGING "Compile with -gmodules." OFF)
#  endif()
#  option(LLVM_ENABLE_LOCAL_SUBMODULE_VISIBILITY "Compile with -fmodules-local-submodule-visibility." ON)
# -option(LLVM_ENABLE_LIBCXX "Use libc++ if available." OFF)
# +option(LLVM_ENABLE_LIBCXX "Use libc++ if available." ON)
#  option(LLVM_STATIC_LINK_CXX_STDLIB "Statically link the standard library." OFF)
# -option(LLVM_ENABLE_LLD "Use lld as C and C++ linker." OFF)
# +option(LLVM_ENABLE_LLD "Use lld as C and C++ linker." ON)
#  option(LLVM_ENABLE_PEDANTIC "Compile with pedantic enabled." ON)
#  option(LLVM_ENABLE_WERROR "Fail and stop if a warning is triggered." OFF)
# 
# @@ -819,9 +819,13 @@
# 
#  # Per target dir not yet supported on Arm 32 bit due to arm vs armhf handling
#  if(CMAKE_SYSTEM_NAME MATCHES "BSD|Linux" AND NOT CMAKE_SYSTEM_PROCESSOR MATCHES "^arm")
# -  set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default ON)
# +  if (LLVM_TARGET_TRIPLE MATCHES "$ENV{LLVM_TARGET_TRIPLE}")
# +    set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default OFF)
# +  else()
# +    set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default ON)
# +  endif()
#  else()
# -  set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default OFF)
# +    set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default OFF)
#  endif()
#  set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR ${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default} CACHE BOOL
#    "Enable per-target runtimes directory")


# diff --git a/llvm/CMakeLists.txt b/llvm/CMakeLists.txt
# index f566a2ef43e3..36edf6d473d6 100644
# --- a/llvm/CMakeLists.txt
# +++ b/llvm/CMakeLists.txt
# @@ -60,7 +60,7 @@ set(LLVM_LIBDIR_SUFFIX "" CACHE STRING "Define suffix of library directory name
#  include(GNUInstallDirs)
#  
#  # This C++ standard is required to build LLVM.
# -set(LLVM_REQUIRED_CXX_STANDARD 17)
# +set(LLVM_REQUIRED_CXX_STANDARD 20)
#  
#  # If we find that the cache contains CMAKE_CXX_STANDARD it means that it's a old CMakeCache.txt
#  # and we can just inform the user and then reset it.
# @@ -149,7 +149,7 @@ endif()
#  # As we migrate runtimes to using the bootstrapping build, the set of default runtimes
#  # should grow as we remove those runtimes from LLVM_ENABLE_PROJECTS above.
#  set(LLVM_DEFAULT_RUNTIMES "libcxx;libcxxabi;libunwind")
# -set(LLVM_SUPPORTED_RUNTIMES "libc;libunwind;libcxxabi;pstl;libcxx;compiler-rt;openmp;llvm-libgcc")
# +set(LLVM_SUPPORTED_RUNTIMES "libc;libunwind;libcxxabi;pstl;libcxx;compiler-rt;openmp")
#  set(LLVM_ENABLE_RUNTIMES "" CACHE STRING
#    "Semicolon-separated list of runtimes to build, or \"all\" (${LLVM_DEFAULT_RUNTIMES}). Supported runtimes are ${LLVM_SUPPORTED_RUNTIMES}.")
#  if(LLVM_ENABLE_RUNTIMES STREQUAL "all")
# @@ -570,10 +570,10 @@ else()
#    option(LLVM_ENABLE_MODULE_DEBUGGING "Compile with -gmodules." OFF)
#  endif()
#  option(LLVM_ENABLE_LOCAL_SUBMODULE_VISIBILITY "Compile with -fmodules-local-submodule-visibility." ON)
# -option(LLVM_ENABLE_LIBCXX "Use libc++ if available." OFF)
# +option(LLVM_ENABLE_LIBCXX "Use libc++ if available." ON)
#  option(LLVM_ENABLE_LLVM_LIBC "Set to on to link all LLVM executables against LLVM libc, assuming it is accessible by the host compiler." OFF)
#  option(LLVM_STATIC_LINK_CXX_STDLIB "Statically link the standard library." OFF)
# -option(LLVM_ENABLE_LLD "Use lld as C and C++ linker." OFF)
# +option(LLVM_ENABLE_LLD "Use lld as C and C++ linker." ON)
#  option(LLVM_ENABLE_PEDANTIC "Compile with pedantic enabled." ON)
#  option(LLVM_ENABLE_WERROR "Fail and stop if a warning is triggered." OFF)
 

diff --git a/llvm/CMakeLists.txt b/llvm/CMakeLists.txt
index f566a2ef43e3..f02af289984b 100644
--- a/llvm/CMakeLists.txt
+++ b/llvm/CMakeLists.txt
@@ -60,7 +60,7 @@ set(LLVM_LIBDIR_SUFFIX "" CACHE STRING "Define suffix of library directory name
 include(GNUInstallDirs)
 
 # This C++ standard is required to build LLVM.
-set(LLVM_REQUIRED_CXX_STANDARD 17)
+set(LLVM_REQUIRED_CXX_STANDARD 23)
 
 # If we find that the cache contains CMAKE_CXX_STANDARD it means that it's a old CMakeCache.txt
 # and we can just inform the user and then reset it.
@@ -229,11 +229,13 @@ unset(SHOULD_ENABLE_PROJECT)
 # Build llvm with ccache if the package is present
 set(LLVM_CCACHE_BUILD OFF CACHE BOOL "Set to ON for a ccache enabled build")
 if(LLVM_CCACHE_BUILD)
-  find_program(CCACHE_PROGRAM ccache)
+  if(NOT DEFINED CCACHE_PROGRAM OR "${CCACHE_PROGRAM}" STREQUAL "")
+    find_program(CCACHE_PROGRAM ccache)
+  endif()
   if(CCACHE_PROGRAM)
     set(LLVM_CCACHE_MAXSIZE "" CACHE STRING "Size of ccache")
     set(LLVM_CCACHE_DIR "" CACHE STRING "Directory to keep ccached data")
-    set(LLVM_CCACHE_PARAMS "CCACHE_CPP2=yes CCACHE_HASHDIR=yes"
+    set(LLVM_CCACHE_PARAMS "CCACHE_CPP2=true CCACHE_NOHASHDIR=true"
         CACHE STRING "Parameters to pass through to ccache")
 
     if(NOT CMAKE_SYSTEM_NAME MATCHES "Windows")
@@ -467,7 +469,7 @@ set(LLVM_EXPERIMENTAL_TARGETS_TO_BUILD ""
     CACHE STRING "Semicolon-separated list of experimental targets to build, or \"all\".")
 
 option(BUILD_SHARED_LIBS
-  "Build all libraries as shared libraries instead of static" OFF)
+  "Build all libraries as shared libraries instead of static" ON)
 
 option(LLVM_ENABLE_BACKTRACES "Enable embedding backtraces on crash." ON)
 if(LLVM_ENABLE_BACKTRACES)
@@ -570,10 +572,10 @@ else()
   option(LLVM_ENABLE_MODULE_DEBUGGING "Compile with -gmodules." OFF)
 endif()
 option(LLVM_ENABLE_LOCAL_SUBMODULE_VISIBILITY "Compile with -fmodules-local-submodule-visibility." ON)
-option(LLVM_ENABLE_LIBCXX "Use libc++ if available." OFF)
+option(LLVM_ENABLE_LIBCXX "Use libc++ if available." ON)
 option(LLVM_ENABLE_LLVM_LIBC "Set to on to link all LLVM executables against LLVM libc, assuming it is accessible by the host compiler." OFF)
 option(LLVM_STATIC_LINK_CXX_STDLIB "Statically link the standard library." OFF)
-option(LLVM_ENABLE_LLD "Use lld as C and C++ linker." OFF)
+option(LLVM_ENABLE_LLD "Use lld as C and C++ linker." ON)
 option(LLVM_ENABLE_PEDANTIC "Compile with pedantic enabled." ON)
 option(LLVM_ENABLE_WERROR "Fail and stop if a warning is triggered." OFF)
 

diff --git a/llvm/tools/CMakeLists.txt b/llvm/tools/CMakeLists.txt
index c6116ac81d12..1524d43c88f1 100644
--- a/llvm/tools/CMakeLists.txt
+++ b/llvm/tools/CMakeLists.txt
@@ -29,7 +29,7 @@ endif()
 # requires targets specified in DEPENDS to exist before the call to
 # ExternalProject_Add.
 add_llvm_tool_subdirectory(lto)
-add_llvm_tool_subdirectory(gold)
+# add_llvm_tool_subdirectory(gold)
 add_llvm_tool_subdirectory(llvm-ar)
 add_llvm_tool_subdirectory(llvm-config)
 add_llvm_tool_subdirectory(llvm-lto)


diff --git a/bolt/CMakeLists.txt b/bolt/CMakeLists.txt
index 4ff90c1f7b3a..5df62b3c9eda 100644
--- a/bolt/CMakeLists.txt
+++ b/bolt/CMakeLists.txt
@@ -2,7 +2,7 @@ include(ExternalProject)
 
 set(BOLT_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})
 set(BOLT_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR})
-set(CMAKE_CXX_STANDARD 17)
+set(CMAKE_CXX_STANDARD 23)
 
 # Add path for custom modules.
 list(INSERT CMAKE_MODULE_PATH 0 "${BOLT_SOURCE_DIR}/cmake/modules")
diff --git a/bolt/runtime/CMakeLists.txt b/bolt/runtime/CMakeLists.txt
index 8472ce00b413..98d80371abe5 100644
--- a/bolt/runtime/CMakeLists.txt
+++ b/bolt/runtime/CMakeLists.txt
@@ -3,7 +3,7 @@ include(CheckIncludeFiles)
 include(GNUInstallDirs)
 
 set(CMAKE_CXX_EXTENSIONS OFF)
-set(CMAKE_CXX_STANDARD 17)
+set(CMAKE_CXX_STANDARD 23)
 
 project(libbolt_rt_project)
 
diff --git a/flang/CMakeLists.txt b/flang/CMakeLists.txt
index ac30da89995e..b3a2d1e86bdc 100644
--- a/flang/CMakeLists.txt
+++ b/flang/CMakeLists.txt
@@ -9,7 +9,7 @@ include(${LLVM_COMMON_CMAKE_UTILS}/Modules/CMakePolicy.cmake
 set(CMAKE_BUILD_WITH_INSTALL_NAME_DIR ON)
 
 # Flang requires C++17.
-set(CMAKE_CXX_STANDARD 17)
+set(CMAKE_CXX_STANDARD 23)
 set(CMAKE_CXX_STANDARD_REQUIRED TRUE)
 set(CMAKE_CXX_EXTENSIONS OFF)
 
diff --git a/flang/lib/Decimal/CMakeLists.txt b/flang/lib/Decimal/CMakeLists.txt
index 3116ff68ea26..3d49128f50e2 100644
--- a/flang/lib/Decimal/CMakeLists.txt
+++ b/flang/lib/Decimal/CMakeLists.txt
@@ -3,7 +3,7 @@ if (CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
 
   project(FortranDecimal C CXX)
 
-  set(CMAKE_CXX_STANDARD 17)
+  set(CMAKE_CXX_STANDARD 23)
   set(CMAKE_CXX_STANDARD_REQUIRED TRUE)
   set(CMAKE_CXX_EXTENSIONS OFF)
 
diff --git a/flang/runtime/CMakeLists.txt b/flang/runtime/CMakeLists.txt
index 5b23065a32d1..d407a11dfd6c 100644
--- a/flang/runtime/CMakeLists.txt
+++ b/flang/runtime/CMakeLists.txt
@@ -11,7 +11,7 @@ if (CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
 
   project(FlangRuntime C CXX)
 
-  set(CMAKE_CXX_STANDARD 17)
+  set(CMAKE_CXX_STANDARD 23)
   set(CMAKE_CXX_STANDARD_REQUIRED TRUE)
   set(CMAKE_CXX_EXTENSIONS OFF)
 
diff --git a/libc/CMakeLists.txt b/libc/CMakeLists.txt
index 4be92ba1380c..210b1d6eff8c 100644
--- a/libc/CMakeLists.txt
+++ b/libc/CMakeLists.txt
@@ -8,7 +8,7 @@ include(${LLVM_COMMON_CMAKE_UTILS}/Modules/CMakePolicy.cmake
   NO_POLICY_SCOPE)
 
 # Default to C++17
-set(CMAKE_CXX_STANDARD 17)
+set(CMAKE_CXX_STANDARD 23)
 
 list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules")
 
diff --git a/libclc/CMakeLists.txt b/libclc/CMakeLists.txt
index 9daef8265c16..eeb3d69157e6 100644
--- a/libclc/CMakeLists.txt
+++ b/libclc/CMakeLists.txt
@@ -2,7 +2,7 @@ cmake_minimum_required(VERSION 3.20.0)
 
 project( libclc VERSION 0.2.0 LANGUAGES CXX C)
 
-set(CMAKE_CXX_STANDARD 17)
+set(CMAKE_CXX_STANDARD 23)
 
 include( GNUInstallDirs )
 set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS

# diff --git a/mlir/CMakeLists.txt b/mlir/CMakeLists.txt
# index c91e9cd93dc8..53c3b488d165 100644
# --- a/mlir/CMakeLists.txt
# +++ b/mlir/CMakeLists.txt
# @@ -15,7 +15,7 @@ endif()
#  
#  # Must go below project(..)
#  include(GNUInstallDirs)
# -set(CMAKE_CXX_STANDARD 17)
# +set(CMAKE_CXX_STANDARD 23)
#  
#  if(MLIR_STANDALONE_BUILD)
#    find_package(LLVM CONFIG REQUIRED)

# diff --git a/openmp/CMakeLists.txt b/openmp/CMakeLists.txt
# index c1efcaf80b54..78d2f90b6a75 100644
# --- a/openmp/CMakeLists.txt
# +++ b/openmp/CMakeLists.txt
# @@ -56,7 +56,7 @@ else()
#  
#    # If not standalone, set CMAKE_CXX_STANDARD but don't set the global cache value,
#    # only set it locally for OpenMP.
# -  set(CMAKE_CXX_STANDARD 17)
# +  set(CMAKE_CXX_STANDARD 23)
#    set(CMAKE_CXX_STANDARD_REQUIRED NO)
#    set(CMAKE_CXX_EXTENSIONS NO)
#  endif()






# diff --git a/llvm/cmake/modules/LLVMExternalProjectUtils.cmake b/llvm/cmake/modules/LLVMExternalProjectUtils.cmake
# index d760eee07958..c268d326585f 100644
# --- a/llvm/cmake/modules/LLVMExternalProjectUtils.cmake
# +++ b/llvm/cmake/modules/LLVMExternalProjectUtils.cmake
# @@ -256,7 +256,7 @@ function(llvm_ExternalProject_Add name source_dir)
#      if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
#        string(REGEX MATCH "^[0-9]+" CLANG_VERSION_MAJOR
#               ${PACKAGE_VERSION})
# -      set(resource_dir "${LLVM_LIBRARY_DIR}/clang/${CLANG_VERSION_MAJOR}")
# +      set(resource_dir "${LLVM_LIBRARY_DIR}/clang/${CLANG_VERSION}")
#        set(flag_types ASM C CXX MODULE_LINKER SHARED_LINKER EXE_LINKER)
#        foreach(type ${flag_types})
#          set(${type}_flag -DCMAKE_${type}_FLAGS=-resource-dir=${resource_dir})

# diff --git a/llvm/cmake/modules/LLVMExternalProjectUtils.cmake b/llvm/cmake/modules/LLVMExternalProjectUtils.cmake
# index f99a50df2..08438f03a 100644
# --- a/llvm/cmake/modules/LLVMExternalProjectUtils.cmake
# +++ b/llvm/cmake/modules/LLVMExternalProjectUtils.cmake
# @@ -258,7 +258,7 @@
#      if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
#        string(REGEX MATCH "^[0-9]+" CLANG_VERSION_MAJOR
#               ${PACKAGE_VERSION})
# -      set(resource_dir "${LLVM_LIBRARY_DIR}/clang/${CLANG_VERSION_MAJOR}")
# +      set(resource_dir "${LLVM_LIBRARY_DIR}/clang/${CLANG_VERSION}/${target}")
#        set(flag_types ASM C CXX MODULE_LINKER SHARED_LINKER EXE_LINKER)
#        foreach(type ${flag_types})
#          set(${type}_flag -DCMAKE_${type}_FLAGS=-resource-dir=${resource_dir})
# 


# diff --git a/llvm/cmake/modules/LLVMExternalProjectUtils.cmake b/llvm/cmake/modules/LLVMExternalProjectUtils.cmake
# index 4b5b600307ec..beab5d5933d7 100644
# --- a/llvm/cmake/modules/LLVMExternalProjectUtils.cmake
# +++ b/llvm/cmake/modules/LLVMExternalProjectUtils.cmake
# @@ -278,16 +278,18 @@ function(llvm_ExternalProject_Add name source_dir)
#      set(llvm_config_path ${LLVM_CONFIG_PATH})
#  
#      if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
# -      string(REGEX MATCH "^[0-9]+" CLANG_VERSION_MAJOR
# +      string(REGEX MATCH "^[0-9]+\\.[0-9]+\\.[0-9]+" CLANG_VERSION
#               ${PACKAGE_VERSION})
# -      if(DEFINED CLANG_RESOURCE_DIR AND NOT CLANG_RESOURCE_DIR STREQUAL "")
# +      if(COMPILER_RESOURCE_DIR AND NOT COMPILER_RESOURCE_DIR STREQUAL "")
# +        set(resource_dir ${COMPILER_RESOURCE_DIR})
# +      elseif(DEFINED CLANG_RESOURCE_DIR AND NOT CLANG_RESOURCE_DIR STREQUAL "")
#          set(resource_dir ${LLVM_TOOLS_BINARY_DIR}/${CLANG_RESOURCE_DIR})
#        else()
# -        set(resource_dir "${LLVM_LIBRARY_DIR}/clang/${CLANG_VERSION_MAJOR}")
# +        set(resource_dir "${LLVM_LIBRARY_DIR}/clang/${CLANG_VERSION}")
#        endif()
#        set(flag_types ASM C CXX MODULE_LINKER SHARED_LINKER EXE_LINKER)
#        foreach(type ${flag_types})
# -        set(${type}_flag -DCMAKE_${type}_FLAGS=-resource-dir=${resource_dir})
# +        set(${type}_flag "-DCMAKE_${type}_FLAGS=-resource-dir=${resource_dir} ${CMAKE_${type}_FLAGS}")
#        endforeach()
#        string(REPLACE ";" "|" flag_string "${flag_types}")
#        foreach(arg ${ARG_CMAKE_ARGS})


diff --git a/llvm/cmake/modules/LLVMExternalProjectUtils.cmake b/llvm/cmake/modules/LLVMExternalProjectUtils.cmake
index 4b5b600307ec..916fd61eddb5 100644
--- a/llvm/cmake/modules/LLVMExternalProjectUtils.cmake
+++ b/llvm/cmake/modules/LLVMExternalProjectUtils.cmake
@@ -80,9 +80,16 @@ function(llvm_ExternalProject_Add name source_dir)
   if(NOT ARG_TARGET_TRIPLE)
     set(target_triple ${LLVM_DEFAULT_TARGET_TRIPLE})
   else()
+    message(WARNING "\${ARG_TARGET_TRIPLE} = ${ARG_TARGET_TRIPLE}")
     set(target_triple ${ARG_TARGET_TRIPLE})
   endif()
 
+  message(WARNING "Original: \${LLVM_TARGET_TRIPLE} = ${LLVM_TARGET_TRIPLE}")
+  if(LLVM_TARGET_TRIPLE STREQUAL "")
+    set(LLVM_TARGET_TRIPLE "${target_triple}")
+  endif()
+  message(WARNING "LLVMExternalProjectUtils: \${LLVM_TARGET_TRIPLE} = ${LLVM_TARGET_TRIPLE}")
+
   is_msvc_triple(is_msvc_target ${target_triple})
 
   if(NOT ARG_TOOLCHAIN_TOOLS)
@@ -278,13 +285,19 @@ function(llvm_ExternalProject_Add name source_dir)
     set(llvm_config_path ${LLVM_CONFIG_PATH})
 
     if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
-      string(REGEX MATCH "^[0-9]+" CLANG_VERSION_MAJOR
+      string(REGEX MATCH "^[0-9]+\\.[0-9]+\\.[0-9]+" CLANG_VERSION
              ${PACKAGE_VERSION})
-      if(DEFINED CLANG_RESOURCE_DIR AND NOT CLANG_RESOURCE_DIR STREQUAL "")
+      if(COMPILER_RESOURCE_DIR AND NOT COMPILER_RESOURCE_DIR STREQUAL "")
+        set(resource_dir ${COMPILER_RESOURCE_DIR})
+        message(WARNING "COMPILER_RESOURCE_DIR=${resource_dir}")
+      elseif(DEFINED CLANG_RESOURCE_DIR AND NOT CLANG_RESOURCE_DIR STREQUAL "")
         set(resource_dir ${LLVM_TOOLS_BINARY_DIR}/${CLANG_RESOURCE_DIR})
+        message(WARNING "\${LLVM_TOOLS_BINARY_DIR}/\${CLANG_RESOURCE_DIR}=${resource_dir}")
       else()
-        set(resource_dir "${LLVM_LIBRARY_DIR}/clang/${CLANG_VERSION_MAJOR}")
+        set(resource_dir "${LLVM_LIBRARY_DIR}/clang/${CLANG_VERSION}")
+        message(WARNING "\${LLVM_LIBRARY_DIR}/clang/\${CLANG_VERSION}=${resource_dir}")
       endif()
+      message(WARNING "-resource-dir=${resource_dir}")
       set(flag_types ASM C CXX MODULE_LINKER SHARED_LINKER EXE_LINKER)
       foreach(type ${flag_types})
         set(${type}_flag -DCMAKE_${type}_FLAGS=-resource-dir=${resource_dir})
@@ -334,6 +347,7 @@ function(llvm_ExternalProject_Add name source_dir)
                ${sysroot_arg}
                -DLLVM_BINARY_DIR=${PROJECT_BINARY_DIR}
                -DLLVM_CONFIG_PATH=${llvm_config_path}
+               -DLLVM_TARGET_TRIPLE=${LLVM_TARGET_TRIPLE}
                -DLLVM_ENABLE_WERROR=${LLVM_ENABLE_WERROR}
                -DLLVM_HOST_TRIPLE=${LLVM_HOST_TRIPLE}
                -DLLVM_HAVE_LINK_VERSION_SCRIPT=${LLVM_HAVE_LINK_VERSION_SCRIPT}


diff --git a/lld/COFF/Driver.cpp b/lld/COFF/Driver.cpp
index d7476e91e03e..e1d0158e92c0 100644
--- a/lld/COFF/Driver.cpp
+++ b/lld/COFF/Driver.cpp
@@ -246,7 +246,7 @@ void LinkerDriver::enqueuePath(StringRef path, bool wholeArchive, bool lazy) {
   auto future = std::make_shared<std::future<MBErrPair>>(
       createFutureForFile(std::string(path)));
   std::string pathStr = std::string(path);
-  enqueueTask([=]() {
+  enqueueTask([=, this]() {
     auto [mb, ec] = future->get();
     if (ec) {
       // Retry reading the file (synchronously) now that we may have added
@@ -319,7 +319,7 @@ void LinkerDriver::enqueueArchiveMember(const Archive::Child &c,
                                         const Archive::Symbol &sym,
                                         StringRef parentName) {
 
-  auto reportBufferError = [=](Error &&e, StringRef childName) {
+  auto reportBufferError = [=, this](Error &&e, StringRef childName) {
     fatal("could not get the buffer for the member defining symbol " +
           toCOFFString(ctx, sym) + ": " + parentName + "(" + childName +
           "): " + toString(std::move(e)));
@@ -331,7 +331,7 @@ void LinkerDriver::enqueueArchiveMember(const Archive::Child &c,
     if (!mbOrErr)
       reportBufferError(mbOrErr.takeError(), check(c.getFullName()));
     MemoryBufferRef mb = mbOrErr.get();
-    enqueueTask([=]() {
+    enqueueTask([=, this]() {
       ctx.driver.addArchiveBuffer(mb, toCOFFString(ctx, sym), parentName,
                                   offsetInArchive);
     });
@@ -344,7 +344,7 @@ void LinkerDriver::enqueueArchiveMember(const Archive::Child &c,
                 toCOFFString(ctx, sym));
   auto future = std::make_shared<std::future<MBErrPair>>(
       createFutureForFile(childName));
-  enqueueTask([=]() {
+  enqueueTask([=, this]() {
     auto mbOrErr = future->get();
     if (mbOrErr.second)
       reportBufferError(errorCodeToError(mbOrErr.second), childName);
@@ -651,7 +651,11 @@ void LinkerDriver::addClangLibSearchPaths(const std::string &argv0) {
 
   // Add the resource dir library path
   SmallString<128> runtimeLibDir(rootDir);
-  sys::path::append(runtimeLibDir, "lib", "clang", std::to_string(LLVM_VERSION_MAJOR), "lib");
+  sys::path::append(runtimeLibDir, "lib", "clang",
+          std::to_string(LLVM_VERSION_MAJOR) + "."
+          + std::to_string(LLVM_VERSION_MINOR) + "."
+          + std::to_string(LLVM_VERSION_PATCH),
+          "lib");
   searchPaths.insert(searchPaths.begin(), saver().save(runtimeLibDir.str()));
 
   // Resource dir + osname, which is hardcoded to windows since we are in the


diff --git a/clang/lib/Driver/Driver.cpp b/clang/lib/Driver/Driver.cpp
index 488350169efa..bce65312bed0 100644
--- a/clang/lib/Driver/Driver.cpp
+++ b/clang/lib/Driver/Driver.cpp
@@ -187,7 +187,7 @@ std::string Driver::GetResourcesPath(StringRef BinaryPath,
     // This search path is also created in the COFF driver of lld, so any
     // changes here also needs to happen in lld/COFF/Driver.cpp
     llvm::sys::path::append(P, CLANG_INSTALL_LIBDIR_BASENAME, "clang",
-                            CLANG_VERSION_MAJOR_STRING);
+                            CLANG_VERSION_STRING);
   }
 
   return std::string(P.str());
@@ -2236,7 +2236,10 @@ bool Driver::HandleImmediateArgs(const Compilation &C) {
     return false;
   }
 
-  if (C.getArgs().hasArg(options::OPT_print_libgcc_file_name)) {
+  if (
+  C.getArgs().hasArg(options::OPT_print_rtlib_file_name) ||
+  C.getArgs().hasArg(options::OPT_print_libgcc_file_name)
+  ) {
     ToolChain::RuntimeLibType RLT = TC.GetRuntimeLibType(C.getArgs());
     const llvm::Triple Triple(TC.ComputeEffectiveClangTriple(C.getArgs()));
     RegisterEffectiveTriple TripleRAII(TC, Triple);
@@ -4871,7 +4874,7 @@ void Driver::BuildJobs(Compilation &C) const {
       J.InProcess = false;
 
   if (CCPrintProcessStats) {
-    C.setPostCallback([=](const Command &Cmd, int Res) {
+    C.setPostCallback([=, this](const Command &Cmd, int Res) {
       std::optional<llvm::sys::ProcessStatistics> ProcStat =
           Cmd.getProcessStatistics();
       if (!ProcStat)


# diff --git a/lld/COFF/Driver.cpp b/lld/COFF/Driver.cpp
# index d7476e91e03e..db0e5c20cec9 100644
# --- a/lld/COFF/Driver.cpp
# +++ b/lld/COFF/Driver.cpp
# @@ -651,7 +651,11 @@ void LinkerDriver::addClangLibSearchPaths(const std::string &argv0) {
#  
#    // Add the resource dir library path
#    SmallString<128> runtimeLibDir(rootDir);
# -  sys::path::append(runtimeLibDir, "lib", "clang", std::to_string(LLVM_VERSION_MAJOR), "lib");
# +  sys::path::append(runtimeLibDir, "lib", "clang",
# +          std::to_string(LLVM_VERSION_MAJOR) + "."
# +          + std::to_string(LLVM_VERSION_MINOR) + "."
# +          + std::to_string(LLVM_VERSION_PATCH),
# +          "lib");
#    searchPaths.insert(searchPaths.begin(), saver().save(runtimeLibDir.str()));
#  
#    // Resource dir + osname, which is hardcoded to windows since we are in the


# diff --git a/clang/runtime/CMakeLists.txt b/clang/runtime/CMakeLists.txt
# index 0cccf730e417..9f4633bc85b1 100644
# --- a/clang/runtime/CMakeLists.txt
# +++ b/clang/runtime/CMakeLists.txt
# @@ -82,9 +82,9 @@ if(LLVM_BUILD_EXTERNAL_COMPILER_RT AND EXISTS ${COMPILER_RT_SRC_ROOT}/)
#                 -DCMAKE_CXX_COMPILER_LAUNCHER=${CMAKE_CXX_COMPILER_LAUNCHER}
#                 -DLLVM_CONFIG_PATH=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-config
#                 -DLLVM_LIT_ARGS=${LLVM_LIT_ARGS}
# -               -DCOMPILER_RT_OUTPUT_DIR=${LLVM_LIBRARY_OUTPUT_INTDIR}/clang/${CLANG_VERSION_MAJOR}
# +               -DCOMPILER_RT_OUTPUT_DIR=${LLVM_LIBRARY_OUTPUT_INTDIR}/clang/${CLANG_VERSION}
#                 -DCOMPILER_RT_EXEC_OUTPUT_DIR=${LLVM_RUNTIME_OUTPUT_INTDIR}
# -               -DCOMPILER_RT_INSTALL_PATH:PATH=lib${LLVM_LIBDIR_SUFFIX}/clang/${CLANG_VERSION_MAJOR}
# +               -DCOMPILER_RT_INSTALL_PATH:PATH=lib${LLVM_LIBDIR_SUFFIX}/clang/${CLANG_VERSION}
#                 -DCOMPILER_RT_INCLUDE_TESTS=${LLVM_INCLUDE_TESTS}
#                 -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}
#                 -DLLVM_LIBDIR_SUFFIX=${LLVM_LIBDIR_SUFFIX}


diff --git a/clang/runtime/CMakeLists.txt b/clang/runtime/CMakeLists.txt
index 2dd305428c9a..b337258ae62a 100644
--- a/clang/runtime/CMakeLists.txt
+++ b/clang/runtime/CMakeLists.txt
@@ -67,6 +67,13 @@ if(LLVM_BUILD_EXTERNAL_COMPILER_RT AND EXISTS ${COMPILER_RT_SRC_ROOT}/)
   endif()
 
   include(GetClangResourceDir)
+
+  list(APPEND CMAKE_MODULE_PATH "$ENV{MAKE_DIR}/files")
+  include(env)
+  env_prepend(PATH "${LLVM_RUNTIME_OUTPUT_INTDIR}")
+  message(WARNING "\$ENV{CMAKE_C_COMPILER} = $ENV{CMAKE_C_COMPILER}")
+  message(WARNING "\$ENV{CMAKE_CXX_COMPILER} = $ENV{CMAKE_CXX_COMPILER}")
+
   get_clang_resource_dir(output_resource_dir PREFIX ${LLVM_BINARY_DIR})
   get_clang_resource_dir(install_resource_dir)
   ExternalProject_Add(compiler-rt
@@ -76,9 +83,10 @@ if(LLVM_BUILD_EXTERNAL_COMPILER_RT AND EXISTS ${COMPILER_RT_SRC_ROOT}/)
     STAMP_DIR ${STAMP_DIR}
     BINARY_DIR ${BINARY_DIR}
     CMAKE_ARGS ${CLANG_COMPILER_RT_CMAKE_ARGS}
-               -DCMAKE_C_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/clang
-               -DCMAKE_CXX_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/clang++
-               -DCMAKE_ASM_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/clang
+               -DCMAKE_C_COMPILER=$ENV{CMAKE_C_COMPILER}
+               -DCMAKE_CXX_COMPILER=$ENV{CMAKE_CXX_COMPILER}
+               -DCMAKE_ASM_COMPILER=$ENV{CMAKE_C_COMPILER}
+               -DLLVM_TARGET_TRIPLE=${LLVM_TARGET_TRIPLE}
                -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
                -DCMAKE_MAKE_PROGRAM=${CMAKE_MAKE_PROGRAM}
                -DCMAKE_C_COMPILER_LAUNCHER=${CMAKE_C_COMPILER_LAUNCHER}


diff --git a/clang/CMakeLists.txt b/clang/CMakeLists.txt
index f7936d72e088..e7fdc0d884a9 100644
--- a/clang/CMakeLists.txt
+++ b/clang/CMakeLists.txt
@@ -17,7 +17,7 @@ endif()
 include(GNUInstallDirs)
 
 if(CLANG_BUILT_STANDALONE)
-  set(CMAKE_CXX_STANDARD 17 CACHE STRING "C++ standard to conform to")
+  set(CMAKE_CXX_STANDARD 23 CACHE STRING "C++ standard to conform to")
   set(CMAKE_CXX_STANDARD_REQUIRED YES)
   set(CMAKE_CXX_EXTENSIONS NO)
 
@@ -428,10 +428,10 @@ option(CLANG_FORCE_MATCHING_LIBCLANG_SOVERSION
 
 # Clang version information
 set(CLANG_EXECUTABLE_VERSION
-    "${CLANG_VERSION_MAJOR}" CACHE STRING
+    "${CLANG_VERSION}" CACHE STRING
     "Major version number that will be appended to the clang executable name")
 set(LIBCLANG_LIBRARY_VERSION
-    "${CLANG_VERSION_MAJOR}" CACHE STRING
+    "${CLANG_VERSION}" CACHE STRING
     "Major version number that will be appended to the libclang library")
 mark_as_advanced(CLANG_EXECUTABLE_VERSION LIBCLANG_LIBRARY_VERSION)
 
@@ -571,6 +571,25 @@ if (CLANG_ENABLE_BOOTSTRAP)
   endif()
   message(STATUS "Setting next clang stage to: ${NEXT_CLANG_STAGE}")
 
+  message(WARNING "Original: \${LLVM_DIR} = ${LLVM_DIR}")
+  message(WARNING "Original: \${LLVM_CMAKE_DIR} = ${LLVM_CMAKE_DIR}")
+
+  if (NOT DEFINED LLVM_DIR OR LLVM_DIR STREQUAL "")
+    if (NOT DEFINED ENV{LLVM_DIR})
+      message(FATAL_ERROR "\$ENV{LLVM_DIR} = $ENV{LLVM_DIR}")
+    endif ()
+    set (LLVM_DIR "$ENV{LLVM_DIR}")
+  endif ()
+
+  if (NOT DEFINED LLVM_CMAKE_DIR OR LLVM_CMAKE_DIR STREQUAL "")
+    if (NOT DEFINED ENV{LLVM_CMAKE_DIR})
+      message(FATAL_ERROR "\$ENV{LLVM_CMAKE_DIR} = $ENV{LLVM_CMAKE_DIR}")
+    endif ()
+    set (LLVM_CMAKE_DIR "$ENV{LLVM_CMAKE_DIR}")
+  endif ()
+
+  message(WARNING "\${LLVM_DIR} = ${LLVM_DIR}")
+  message(WARNING "\${LLVM_CMAKE_DIR} = ${LLVM_CMAKE_DIR}")
 
   set(STAMP_DIR ${CMAKE_CURRENT_BINARY_DIR}/${NEXT_CLANG_STAGE}-stamps/)
   set(BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/${NEXT_CLANG_STAGE}-bins/)
@@ -646,6 +665,7 @@ if (CLANG_ENABLE_BOOTSTRAP)
     LLVM_VERSION_MAJOR
     LLVM_VERSION_MINOR
     LLVM_VERSION_PATCH
+    CLANG_VERSION
     CLANG_VERSION_MAJOR
     CLANG_VERSION_MINOR
     CLANG_VERSION_PATCHLEVEL
@@ -677,10 +697,16 @@ if (CLANG_ENABLE_BOOTSTRAP)
     set(CXX_COMPILER "clang-cl.exe")
   endif()
 
+  list(APPEND CMAKE_MODULE_PATH "$ENV{MAKE_DIR}/files")
+  include(env)
+  env_prepend(PATH "${LLVM_RUNTIME_OUTPUT_INTDIR}")
+  message(WARNING "\$ENV{CMAKE_C_COMPILER} = $ENV{CMAKE_C_COMPILER}")
+  message(WARNING "\$ENV{CMAKE_CXX_COMPILER} = $ENV{CMAKE_CXX_COMPILER}")
+
   set(COMPILER_OPTIONS
-    -DCMAKE_CXX_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/${CXX_COMPILER}
-    -DCMAKE_C_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/${C_COMPILER}
-    -DCMAKE_ASM_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/${C_COMPILER}
+    -DCMAKE_CXX_COMPILER=$ENV{CMAKE_CXX_COMPILER}
+    -DCMAKE_C_COMPILER=$ENV{CMAKE_C_COMPILER}
+    -DCMAKE_ASM_COMPILER=$ENV{CMAKE_C_COMPILER}
     -DCMAKE_ASM_COMPILER_ID=Clang)
 
   # cmake requires CMAKE_LINKER to be specified if the compiler is MSVC-like,
@@ -785,7 +811,9 @@ if (CLANG_ENABLE_BOOTSTRAP)
                 -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}
                 ${PASSTHROUGH_VARIABLES}
                 ${CLANG_BOOTSTRAP_CMAKE_ARGS}
-                 -DCLANG_STAGE=${NEXT_CLANG_STAGE}
+                -DCLANG_STAGE=${NEXT_CLANG_STAGE}
+                -DLLVM_DIR=${LLVM_DIR}
+                -DLLVM_CMAKE_DIR=${LLVM_CMAKE_DIR}
                 ${COMPILER_OPTIONS}
                 ${${CLANG_STAGE}_TABLEGEN}
                 ${LTO_LIBRARY} ${verbose} ${PGO_OPT}


# diff --git a/clang/CMakeLists.txt b/clang/CMakeLists.txt
# index f7936d72e088..773cc740bbb3 100644
# --- a/clang/CMakeLists.txt
# +++ b/clang/CMakeLists.txt
# @@ -17,7 +17,7 @@ endif()
#  include(GNUInstallDirs)
#  
#  if(CLANG_BUILT_STANDALONE)
# -  set(CMAKE_CXX_STANDARD 17 CACHE STRING "C++ standard to conform to")
# +  set(CMAKE_CXX_STANDARD 23 CACHE STRING "C++ standard to conform to")
#    set(CMAKE_CXX_STANDARD_REQUIRED YES)
#    set(CMAKE_CXX_EXTENSIONS NO)
#  
# @@ -428,10 +428,10 @@ option(CLANG_FORCE_MATCHING_LIBCLANG_SOVERSION
#  
#  # Clang version information
#  set(CLANG_EXECUTABLE_VERSION
# -    "${CLANG_VERSION_MAJOR}" CACHE STRING
# +    "${CLANG_VERSION}" CACHE STRING
#      "Major version number that will be appended to the clang executable name")
#  set(LIBCLANG_LIBRARY_VERSION
# -    "${CLANG_VERSION_MAJOR}" CACHE STRING
# +    "${CLANG_VERSION}" CACHE STRING
#      "Major version number that will be appended to the libclang library")
#  mark_as_advanced(CLANG_EXECUTABLE_VERSION LIBCLANG_LIBRARY_VERSION)
#  
# @@ -646,6 +646,7 @@ if (CLANG_ENABLE_BOOTSTRAP)
#      LLVM_VERSION_MAJOR
#      LLVM_VERSION_MINOR
#      LLVM_VERSION_PATCH
# +    CLANG_VERSION
#      CLANG_VERSION_MAJOR
#      CLANG_VERSION_MINOR
#      CLANG_VERSION_PATCHLEVEL
# @@ -772,7 +773,8 @@ if (CLANG_ENABLE_BOOTSTRAP)
#      separate_arguments(build_tool_args UNIX_COMMAND "${build_tool_args}")
#    endif()
#  
# -  ExternalProject_Add(${NEXT_CLANG_STAGE}
# +  llvm_ExternalProject_Add(${NEXT_CLANG_STAGE}
# +    ${CMAKE_CURRENT_SOURCE_DIR}
#      DEPENDS clang-bootstrap-deps
#      PREFIX ${NEXT_CLANG_STAGE}
#      SOURCE_DIR ${CMAKE_SOURCE_DIR}


diff --git a/cmake/Modules/GetClangResourceDir.cmake b/cmake/Modules/GetClangResourceDir.cmake
index def5bd60424e..83d28a443d1c 100644
--- a/cmake/Modules/GetClangResourceDir.cmake
+++ b/cmake/Modules/GetClangResourceDir.cmake
@@ -12,10 +12,11 @@ function(get_clang_resource_dir out_var)
   if(DEFINED CLANG_RESOURCE_DIR AND NOT CLANG_RESOURCE_DIR STREQUAL "")
     set(ret_dir bin/${CLANG_RESOURCE_DIR})
   else()
-    if (NOT CLANG_VERSION_MAJOR)
-      string(REGEX MATCH "^[0-9]+" CLANG_VERSION_MAJOR ${PACKAGE_VERSION})
+    if (NOT CLANG_VERSION)
+      string(REGEX MATCH "^[0-9]+\\.[0-9]+\\.[0-9]+" CLANG_VERSION
+             ${PACKAGE_VERSION})
     endif()
-    set(ret_dir lib${LLVM_LIBDIR_SUFFIX}/clang/${CLANG_VERSION_MAJOR})
+    set(ret_dir lib${LLVM_LIBDIR_SUFFIX}/clang/${CLANG_VERSION})
   endif()
 
   if(ARG_PREFIX)


diff --git a/compiler-rt/lib/orc/tests/CMakeLists.txt b/compiler-rt/lib/orc/tests/CMakeLists.txt
index 6014ed328d2c..e7e5694b1d41 100644
--- a/compiler-rt/lib/orc/tests/CMakeLists.txt
+++ b/compiler-rt/lib/orc/tests/CMakeLists.txt
@@ -12,7 +12,7 @@ set_target_properties(OrcRTTools PROPERTIES FOLDER "OrcRT tools")
 
 set(ORC_UNITTEST_CFLAGS
 # FIXME: This should be set for all unit tests.
-  -std=c++17
+  -std=c++23
   ${ORC_CFLAGS}
   ${COMPILER_RT_UNITTEST_CFLAGS}
   -I${COMPILER_RT_SOURCE_DIR}/lib/orc


diff --git a/compiler-rt/lib/gwp_asan/tests/CMakeLists.txt b/compiler-rt/lib/gwp_asan/tests/CMakeLists.txt
index c961e41335c8..02ee36582d3e 100644
--- a/compiler-rt/lib/gwp_asan/tests/CMakeLists.txt
+++ b/compiler-rt/lib/gwp_asan/tests/CMakeLists.txt
@@ -4,7 +4,7 @@ set(GWP_ASAN_UNITTEST_CFLAGS
   ${COMPILER_RT_UNITTEST_CFLAGS}
   ${COMPILER_RT_GTEST_CFLAGS}
   ${SANITIZER_TEST_CXX_CFLAGS}
-  -std=c++17
+  -std=c++23
   -I${COMPILER_RT_SOURCE_DIR}/lib/
   -O2
   -g


diff --git a/openmp/libomptarget/DeviceRTL/CMakeLists.txt b/openmp/libomptarget/DeviceRTL/CMakeLists.txt
index 630947abec7e..613983bde0be 100644
--- a/openmp/libomptarget/DeviceRTL/CMakeLists.txt
+++ b/openmp/libomptarget/DeviceRTL/CMakeLists.txt
@@ -118,7 +118,7 @@ set (LIBOMPTARGET_LLVM_INCLUDE_DIRS_DEVICERTL "${LIBOMPTARGET_LLVM_INCLUDE_DIRS}
 list(TRANSFORM LIBOMPTARGET_LLVM_INCLUDE_DIRS_DEVICERTL PREPEND "-I")
 
 # Set flags for LLVM Bitcode compilation.
-set(bc_flags -c -foffload-lto -std=c++17 -fvisibility=hidden
+set(bc_flags -c -foffload-lto -std=c++23 -fvisibility=hidden
               ${clang_opt_flags} --offload-device-only
              -nocudalib -nogpulib -nostdinc
              -fopenmp -fopenmp-cuda-mode
@@ -240,7 +240,7 @@ function(compileDeviceRTLLibrary target_cpu target_name target_triple)
 
   set(output_name "${CMAKE_CURRENT_BINARY_DIR}/devicertl-${target_name}-${target_cpu}.o")
   add_custom_command(OUTPUT ${output_name}
-    COMMAND ${CLANG_TOOL} --std=c++17 -c -nostdlib
+    COMMAND ${CLANG_TOOL} --std=c++23 -c -nostdlib
             -Xclang -fembed-offload-object=${CMAKE_CURRENT_BINARY_DIR}/packaged_${bclib_name}
             -o ${output_name}
             ${source_directory}/Stub.cpp


# diff --git a/lldb/CMakeLists.txt b/lldb/CMakeLists.txt
# index 4a53d7ef3d0d..8118101c8349 100644
# --- a/lldb/CMakeLists.txt
# +++ b/lldb/CMakeLists.txt
# @@ -27,7 +27,7 @@ include(GNUInstallDirs)
#  option(LLDB_INCLUDE_TESTS "Generate build targets for the LLDB unit tests." ${LLVM_INCLUDE_TESTS})
#  
#  if(LLDB_BUILT_STANDALONE)
# -  set(CMAKE_CXX_STANDARD 17 CACHE STRING "C++ standard to conform to")
# +  set(CMAKE_CXX_STANDARD 23 CACHE STRING "C++ standard to conform to")
#    set(CMAKE_CXX_STANDARD_REQUIRED YES)
#    set(CMAKE_CXX_EXTENSIONS NO)
#  
# @@ -38,8 +38,12 @@ include(LLDBConfig)
#  include(AddLLDB)
#  
#  # Define the LLDB_CONFIGURATION_xxx matching the build type.
# +message(WARNING "\${CMAKE_BUILD_TYPE} = ${CMAKE_BUILD_TYPE}")
# +string(TOUPPER "${CMAKE_BUILD_TYPE}" uppercase_CMAKE_BUILD_TYPE)
#  if(uppercase_CMAKE_BUILD_TYPE STREQUAL "DEBUG" )
#    add_definitions(-DLLDB_CONFIGURATION_DEBUG)
# +# else()
# +#   set(LLVM_DISABLE_ABI_BREAKING_CHECKS_ENFORCING 1 CACHE INTERNAL "" )
#  endif()
#  
#  if (WIN32)


diff --git a/lldb/CMakeLists.txt b/lldb/CMakeLists.txt
index 4a53d7ef3d0d..615c21141be7 100644
--- a/lldb/CMakeLists.txt
+++ b/lldb/CMakeLists.txt
@@ -27,7 +27,7 @@ include(GNUInstallDirs)
 option(LLDB_INCLUDE_TESTS "Generate build targets for the LLDB unit tests." ${LLVM_INCLUDE_TESTS})
 
 if(LLDB_BUILT_STANDALONE)
-  set(CMAKE_CXX_STANDARD 17 CACHE STRING "C++ standard to conform to")
+  set(CMAKE_CXX_STANDARD 23 CACHE STRING "C++ standard to conform to")
   set(CMAKE_CXX_STANDARD_REQUIRED YES)
   set(CMAKE_CXX_EXTENSIONS NO)
 
@@ -38,8 +38,12 @@ include(LLDBConfig)
 include(AddLLDB)
 
 # Define the LLDB_CONFIGURATION_xxx matching the build type.
+message(WARNING "\${CMAKE_BUILD_TYPE} = ${CMAKE_BUILD_TYPE}")
+string(TOUPPER "${CMAKE_BUILD_TYPE}" uppercase_CMAKE_BUILD_TYPE)
 if(uppercase_CMAKE_BUILD_TYPE STREQUAL "DEBUG" )
   add_definitions(-DLLDB_CONFIGURATION_DEBUG)
+# else()
+#   set(LLVM_DISABLE_ABI_BREAKING_CHECKS_ENFORCING 1 CACHE INTERNAL "" )
 endif()
 
 if (WIN32)
@@ -106,6 +110,15 @@ if(CMAKE_CROSSCOMPILING AND LLDB_BUILT_STANDALONE AND NOT LLDB_TABLEGEN_EXE)
     -DClang_DIR=${NATIVE_Clang_DIR})
 endif()
 
+set (CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES "")
+
+include_directories(SYSTEM
+$ENV{SYSROOT}/$ENV{INSTALL_PREFIX}/include/${LLVM_DEFAULT_TARGET_TRIPLE}/c++/v1
+$ENV{SYSROOT}/$ENV{INSTALL_PREFIX}/include/c++/v1
+$ENV{SYSROOT}/$ENV{INSTALL_PREFIX}/lib/clang/${CLANG_VERSION}/include
+$ENV{SYSROOT}/$ENV{INSTALL_PREFIX}/include
+)
+
 # TableGen
 add_subdirectory(utils/TableGen)
 


diff --git a/mlir/examples/standalone/CMakeLists.txt b/mlir/examples/standalone/CMakeLists.txt
index 038242ba1437..d5d2be71d0be 100644
--- a/mlir/examples/standalone/CMakeLists.txt
+++ b/mlir/examples/standalone/CMakeLists.txt
@@ -3,7 +3,7 @@ project(standalone-dialect LANGUAGES CXX C)
 
 set(CMAKE_BUILD_WITH_INSTALL_NAME_DIR ON)
 
-set(CMAKE_CXX_STANDARD 17 CACHE STRING "C++ standard to conform to")
+set(CMAKE_CXX_STANDARD 23 CACHE STRING "C++ standard to conform to")
 
 if(CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
   find_package(MLIR REQUIRED CONFIG)


diff --git a/mlir/lib/ExecutionEngine/SparseTensor/CMakeLists.txt b/mlir/lib/ExecutionEngine/SparseTensor/CMakeLists.txt
index ac04ef31423e..d72500e8eea0 100644
--- a/mlir/lib/ExecutionEngine/SparseTensor/CMakeLists.txt
+++ b/mlir/lib/ExecutionEngine/SparseTensor/CMakeLists.txt
@@ -17,7 +17,7 @@ add_mlir_library(MLIRSparseTensorRuntime
   MLIRSparseTensorEnums
   mlir_float16_utils
   )
-set_property(TARGET MLIRSparseTensorRuntime PROPERTY CXX_STANDARD 17)
+set_property(TARGET MLIRSparseTensorRuntime PROPERTY CXX_STANDARD 23)
 
 # To make sure we adhere to the style guide:
 # <https://llvm.org/docs/CodingStandards.html#provide-a-virtual-method-anchor-for-classes-in-headers>


diff --git a/mlir/lib/ExecutionEngine/CMakeLists.txt b/mlir/lib/ExecutionEngine/CMakeLists.txt
index 39cc9c060db7..d484de59a153 100644
--- a/mlir/lib/ExecutionEngine/CMakeLists.txt
+++ b/mlir/lib/ExecutionEngine/CMakeLists.txt
@@ -130,7 +130,7 @@ if(LLVM_ENABLE_PIC)
 
     EXCLUDE_FROM_LIBMLIR
     )
-  set_property(TARGET mlir_float16_utils PROPERTY CXX_STANDARD 17)
+  set_property(TARGET mlir_float16_utils PROPERTY CXX_STANDARD 23)
   target_compile_definitions(mlir_float16_utils PRIVATE mlir_float16_utils_EXPORTS)
 
   add_subdirectory(SparseTensor)
@@ -147,7 +147,7 @@ if(LLVM_ENABLE_PIC)
     MLIRSparseTensorEnums
     MLIRSparseTensorRuntime
     )
-  set_property(TARGET mlir_c_runner_utils PROPERTY CXX_STANDARD 17)
+  set_property(TARGET mlir_c_runner_utils PROPERTY CXX_STANDARD 23)
   target_compile_definitions(mlir_c_runner_utils PRIVATE mlir_c_runner_utils_EXPORTS)
 
   add_mlir_library(mlir_runner_utils


# diff --git a/lld/CMakeLists.txt b/lld/CMakeLists.txt
# index 595c286abd91..e22dc41c8d44 100644
# --- a/lld/CMakeLists.txt
# +++ b/lld/CMakeLists.txt
# @@ -17,7 +17,7 @@ endif()
#  include(GNUInstallDirs)
#  
#  if(LLD_BUILT_STANDALONE)
# -  set(CMAKE_CXX_STANDARD 17 CACHE STRING "C++ standard to conform to")
# +  set(CMAKE_CXX_STANDARD 23 CACHE STRING "C++ standard to conform to")
#    set(CMAKE_CXX_STANDARD_REQUIRED YES)
#    set(CMAKE_CXX_EXTENSIONS NO)
#  


diff --git a/lld/CMakeLists.txt b/lld/CMakeLists.txt
index 595c286abd91..e2db0f9af5c0 100644
--- a/lld/CMakeLists.txt
+++ b/lld/CMakeLists.txt
@@ -17,7 +17,7 @@ endif()
 include(GNUInstallDirs)
 
 if(LLD_BUILT_STANDALONE)
-  set(CMAKE_CXX_STANDARD 17 CACHE STRING "C++ standard to conform to")
+  set(CMAKE_CXX_STANDARD 23 CACHE STRING "C++ standard to conform to")
   set(CMAKE_CXX_STANDARD_REQUIRED YES)
   set(CMAKE_CXX_EXTENSIONS NO)
 
@@ -187,6 +187,16 @@ if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY)
     )
 endif()
 
+set (CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES "")
+
+include_directories(SYSTEM
+$ENV{SYSROOT}/$ENV{INSTALL_PREFIX}/include/${LLVM_DEFAULT_TARGET_TRIPLE}/c++/v1
+$ENV{SYSROOT}/$ENV{INSTALL_PREFIX}/include/c++/v1
+$ENV{SYSROOT}/$ENV{INSTALL_PREFIX}/lib/clang/${CLANG_VERSION}/include
+$ENV{SYSROOT}/$ENV{INSTALL_PREFIX}/include
+$ENV{XHOST_PREFIX}/include
+)
+
 add_subdirectory(Common)
 add_subdirectory(tools/lld)
 



diff --git a/pstl/CMakeLists.txt b/pstl/CMakeLists.txt
index 255e22af9a26..c8348b535f15 100644
--- a/pstl/CMakeLists.txt
+++ b/pstl/CMakeLists.txt
@@ -36,7 +36,7 @@ endif()
 ###############################################################################
 add_library(ParallelSTL INTERFACE)
 add_library(pstl::ParallelSTL ALIAS ParallelSTL)
-target_compile_features(ParallelSTL INTERFACE cxx_std_17)
+target_compile_features(ParallelSTL INTERFACE cxx_std_23)
 
 if (PSTL_PARALLEL_BACKEND STREQUAL "serial")
     message(STATUS "Parallel STL uses the serial backend")













