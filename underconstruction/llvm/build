#! /bin/sh -e
{
	# Usage
	# kiss<Enter>
	# p llvm
	# kiss p llvm
	# kiss p llvm <index_number if you are sure>
	# KISS_DEBUG=mkcd KISS_PATH=/opt/var/db/kiss/lm/underconstruction KISS_ROOT= KISS_FORCE= BOOTSTRAP= kiss-debug i llvm
	# When has conflicts
	# kiss a llvm
	# From llvm-14.0.3 to llvm-18.0.0 && llvm-18.0.0 self compiling
	# libcxx/CMakeLists.txt
	# "TODO: Projects that depend on libc++ should use LIBCXX_GENERATED_INCLUDE_DIR
	# instead of hard-coding include/c++/v1."
	# libcxx/include/CMakeLists.txt
	# configure_file("__config_site.in" "${LIBCXX_GENERATED_INCLUDE_TARGET_DIR}/__config_site" @ONLY)
	# configure_file("module.modulemap.in" "${LIBCXX_GENERATED_INCLUDE_DIR}/module.modulemap" @ONLY)

	# CFLAGS="--target=$KISS_XHOST_TRIPLE -O3 -pipe -fPIC -march=x86-64 -mtune=native -mcpu=x86-64"
	# CXXFLAGS="--target=$KISS_XHOST_TRIPLE -O3 -pipe -fPIC -march=x86-64 -mtune=native -mcpu=x86-64"

	# CFLAGS="--target=$KISS_XHOST_TRIPLE -O3 -pipe -fPIC -march=x86-64 -mtune=native"
	# CXXFLAGS="-D LIBCXX_HAS_MUSL_LIBC --target=x86_64-linux-musl -O3 -pipe -fPIC -march=x86-64 -mtune=native"

	start=`date +%s`

	# Using {} to prevent running code from crash when editing
	printf '%s %s\n' 'build' "entry"
	// log 'build' "entry"
	# exit 0
	__

	# set -x

	[ ! -z "${IS_KISS+x}" ] && set -Eau || set -au

	[ "$(set -o | grep xtrace | awk '{print $2}')" = "off" ] ||
		set -x

	check_pipefail="$(set -o | grep pipefail | awk "{print \$1}")"
	[ "$check_pipefail" != "pipefail" ] || set -o pipefail

	[ -t 0 ] || {
		printf '%s %s\n' 'fd 0' "does not work at $LINENO"
		# exec </dev/stdin
		exec </dev/tty
	}

	[ -n "${HEADER+x}" ] ||
	printf '%s %s\n' '$HEADER' "not defined"

	[ -z "${KISS_INNER_PIPE+x}" ] || unset KISS_INNER_PIPE
	[ -z "${mute_err+x}" ] || unset mute_err
	[ -z "${KEEP_DEPRECATED+x}" ] || unset KEEP_DEPRECATED
	: "${SESSION_PID:="$$"}"                  && export SESSION_PID
	: "${SESSION_PPID:="${PPID}"}"            && export SESSION_PPID
	: "${KISS_PID:=$$}"                       && export KISS_PID
	: "${KISS_TMPDIR:="/tmp/$LOGNAME/kiss"}"  && export KISS_TMPDIR
	# Neither the log folder nor the pipes is created at this moment.
	# So don't use the log functions before user_output and pipes/listeners are ready
	[ -d "$KISS_TMPDIR" ] || mkdir -p "$KISS_TMPDIR"
	log_dir="$KISS_TMPDIR/logs"
	[ -d "$log_dir" ] || mkdir -p "$log_dir"
	: "${USER_OUTPUT:="$KISS_TMPDIR/logs/build.log"}" && export USER_OUTPUT

	interrupt_type="$(type "interrupt" > /dev/null 2>&1 && type "interrupt")" || :
	{
		[ ! -z "${interrupt_type:+x}" ] &&
		[ ! -z "${HEADER+x}" ]
	} || {

		# Outdated option: shellcheck source=/dev/null
		# shellcheck source=/usr/include/kiss/share
		. /usr/include/kiss/share
		# . /usr/include/kiss/share > /dev/null 2>&1

		[ -t 0 ] || // die 'fd 0' "does not work"
		# export $(cut -d= -f1 /usr/include/kiss/share)

		# // war '$HEADER' "$HEADER"
	}

	[ -z "${IS_KISS+x}" ] || {
		// log '$IS_KISS' "$IS_KISS"
		/ $error_trap
	}

	// trap_on "$@"

	pipe_all
	[ -t 0 ] || // die 'fd 0' "does not work"
	// init_info

	[ ! -z "${ENV_VARIABLES+x}" ] ||
		// die '$ENV_VARIABLES' "must be defined in advance (normally by kiss)"

	# build_script=$(readlink -fn "$0")
	# script_path=${build_script%/*}
	# repo_name=${script_path##*/}
	# On source (.) mode build script dialing, $(readlink -fn "$0") will return /usr/bin/busybox
	# So, don't depend on $0
	repo_name=${PWD##*/}
	# echo "\$repo_name  = $repo_name"
	[ ! -z "${repo_name:+x}" ] && [ -z "${repo_name##*"llvm"*}" ] ||
		// die '$repo_name' "'$repo_name' does not seem to be correct"
	// log '$repo_name' "$repo_name"

	build_script="$(readlink -fn "$MAKE_ROOT/$repo_name/.build" 2> /dev/null)"
	readonly build_script
	// log '$build_script' "$build_script"
	[ ! -z "$build_script" ] && command -v "$build_script" > /dev/null 2>&1 ||
		// die '$build_script' "is not an executable"

	is_manually_dialed=1

	{
		[ -z "${1:+x}" ] || [ -z "${2:+x}" ] ||
			[ -z "${DESTDIR:+x}" ] ||
			[ ! -z "${DESTDIR##*"$repo_name"*}" ]
	} && {
		# Reusable and in $ENV_VARIABLES
		: ${NATIVE_ROOT:="$DEST_ROOT/native"}  && export NATIVE_ROOT
		# Disposable and in $ENV_VARIABLES
		: ${OBJ_ROOT:="$KISS_TMPDIR/objects"}  && export OBJ_ROOT
		: ${CCACHE_ROOT:="$DEST_ROOT/ccache"}  && export CCACHE_ROOT
		repo_urn="${build_script%/build}"
		# $REPO_DIR is not in common environment
		: ${REPO_DIR:="${build_script%/$repo_name}"} && export REPO_DIR
		// log '$REPO_DIR' "$REPO_DIR"

		MAKE_DIR="$MAKE_ROOT/$repo_name"        && export MAKE_DIR
		CCACHE_DIR="$CCACHE_ROOT/$repo_name"    && export CCACHE_DIR
		DESTDIR="$PKG_ROOT/$repo_name"          && export DESTDIR
		OUTPUT_DIR="$OBJ_ROOT/$repo_name"       && export OUTPUT_DIR
		CCACHE_CONFIGPATH="$CCACHE_ROOT/$repo_name" && export CCACHE_CONFIGPATH
		is_manually_dialed=0
	}

	// log '$is_manually_dialed' "$is_manually_dialed"

	newline="
"
	# For debug information
	SCRIPT_NAME="build" && export SCRIPT_NAME
	# For function name trace
	scope="build"

	export CLICOLOR_FORCE=1

	python_version="$(python3 -V | sed 's/.*\([0-9]\{1,\}\.[0-9]\{1,\}\)\..*/\1/')"

	[ "$is_manually_dialed" -eq "0" ] || {
		[ -z "${1:+x}" ] &&
		: "${DESTDIR:="$PKG_ROOT/$repo_name"}" ||
		: "${DESTDIR:="$1"}"
	}

	[ -d "$DESTDIR" ] || // die '$DESTDIR' "$DESTDIR"
	export DESTDIR
	export KISS_ROOT
	// log '$DESTDIR' "$DESTDIR"
	// log '$KISS_ROOT' "$KISS_ROOT"

	INSTALL_PREFIX="usr" && export INSTALL_PREFIX
	readonly INSTALL_PREFIX
	// log '$INSTALL_PREFIX' "$INSTALL_PREFIX"

	: ${XBUILD_PREFIX:="/$INSTALL_PREFIX"}
	: ${XHOST_PREFIX:="$KISS_ROOT/$INSTALL_PREFIX"}
	# Just for higher version
	# The above XHOST_PREFIX setting might not work if the previous installation stage has errrors
	# Try:
	# XHOST_PREFIX=/usr BOOTSRAP= kiss-debug p llvm
	# Or,
	# KISS_FORCE= : without network update
	# XHOST_PREFIX=/usr BOOTSRAP= KISS_FORCE= kiss-debug p llvm
	# XHOST_PREFIX=/usr means XHOST_PREFIX=XBUILD_PREFIX
	readonly XHOST_PREFIX
	export XHOST_PREFIX

	# When use local compiler, LD_LIBRARY_PATH is unnecessary, and when use just-built compiler
	# "$XHOST_PREFIX/lib" is a bad thing
	# path_append LIBRARY_PATH    "$XHOST_PREFIX/lib"
	# path_append LD_LIBRARY_PATH "$XHOST_PREFIX/lib"

	jobs=$((2 * $(nproc) + 1))
	MAKEOPTS="-j$jobs" && export MAKEOPTS

	# LLVM_NATIVE_TOOL_ROOT == NATIVE_DIR
	NATIVE_DIR="$NATIVE_ROOT/$repo_name"  && export NATIVE_DIR
	OUTPUT_DIR="$OBJ_ROOT/$repo_name"     && export OUTPUT_DIR
	# Just built binaries
	# $LLVM_RUNTIME_OUTPUT_INTDIR == $OUTPUT_DIR/bin
	# echo "\$OUTPUT_DIR = $OUTPUT_DIR"
	// log '$OUTPUT_DIR' "$OUTPUT_DIR"
	readonly NATIVE_DIR
	readonly OUTPUT_DIR
	[ "$is_manually_dialed" -eq "0" ] ||
	: ${CCACHE_CONFIGPATH:="$CCACHE_ROOT/$repo_name"} && export CCACHE_CONFIGPATH
	: ${CCACHE_DIR_ORIGIN:="$CCACHE_DIR"}
	[ "$CCACHE_DIR_ORIGIN" = "$CCACHE_ROOT/$repo_name" ] ||
		// die '$CCACHE_DIR_ORIGIN' "'$CCACHE_DIR_ORIGIN' got wrong value"
	readonly CCACHE_DIR_ORIGIN

	[ -d "$NATIVE_DIR" ] ||
		// as_own "$NATIVE_ROOT" \
		\mkdir -p "$NATIVE_DIR"

	find "$NATIVE_DIR" -mindepth 1 -delete

	[ ! -z "${repo_urn:+x}" ] ||
	repo_urn="$REPO_DIR/$repo_name"
	[ ! -z "$build_script" ] && command -v "$build_script" > /dev/null 2>&1 ||
	build_script="$repo_urn/build"

	// log '$build_script' "$build_script"
	# Modifing the build script will ruin the current building process?
	# [ "${build_script%/*}" = "$PWD" ] || \ln -sf "$build_script" ./

	# echo "\$PWD = $PWD"
	// log '$PWD' "$PWD"
	[ "${MAKE_DIR-}" = "$PWD" ] ||
	# : "${MAKE_DIR:="$PWD"}" && export MAKE_DIR
	MAKE_DIR="$PWD" && export MAKE_DIR
	// log '$MAKE_DIR' "$MAKE_DIR"
	readonly MAKE_DIR

	# : "${ORIGIN:="$OUTPUT_DIR/bin"}" && export ORIGIN
	# : "${ORIGIN:="\\\\\$ORIGIN"}" && export ORIGIN
	: "${ORIGIN:="XORIGIN"}" && export ORIGIN
	// log '$ORIGIN' "$ORIGIN"
	# [ -d "$OUTPUT_DIR/include/c++/v1" ] || \mkdir -p "$OUTPUT_DIR/include/c++/v1"
	# [ -d "$OUTPUT_DIR/lib" ] || \mkdir -p "$OUTPUT_DIR/lib"

	[ -n "${GENERATOR_TYPE+x}" ] || GENERATOR_TYPE="Ninja"

	[ -n "${MAKE_PROGRAM+x}" ] || MAKE_PROGRAM=$(which ninja)

	command -v "$MAKE_PROGRAM" > /dev/null 2>&1 || {
		# echo "Provide \$MAKE_PROGRAM please."
		// war '$MAKE_PROGRAM' "$MAKE_PROGRAM"
		exit 1;
	}

	[ -n "${CMAKE+x}" ] || CMAKE=$(which cmake)
	// log '$CMAKE' "$CMAKE"
	command -v "$CMAKE" > /dev/null 2>&1 || {
		# echo "Provide \$CMAKE please."
		// war '$CMAKE' "$CMAKE"
		exit 1;
	}

	CMAKE_VERSION="$($CMAKE --version | grep version | awk "{print \$3}")"
	export CMAKE_VERSION
	// log '$CMAKE_VERSION' "$CMAKE_VERSION"

	cmd_lld="$(which ld.lld)"

	# subshell_all() does not export SRC_ROOT
	# source was copied to make dir
	# [ -n "${SRC_ROOT+x}" ] || SRC_ROOT="$HOME/.cache/kiss/sources"
	# [ -n "${SRCDIR+x}" ] || SRCDIR="$SRC_ROOT/$pkg_name"

	# export LLVM_IAS=1
	# export LLVM=1

	bootstrap_cmake="$MAKE_DIR/files/bootstrap.cmake"
	[ -f "$bootstrap_cmake" ] || touch "$bootstrap_cmake"
	printf '%s\n' "# Do not modify manually. Generated by code" |
		tee "$bootstrap_cmake"  > /dev/null

	common_cmake="$MAKE_DIR/files/common.cmake"
	[ -f "$common_cmake" ] || touch "$common_cmake"
	printf '%s\n' "# Do not modify manually. Generated by code" |
		tee "$common_cmake"  > /dev/null

	builtins_cmake="$MAKE_DIR/files/builtins.cmake"
	[ -f "$builtins_cmake" ] || touch "$builtins_cmake"
	printf '%s\n' "# Do not modify manually. Generated by code" |
		tee "$builtins_cmake"  > /dev/null

	runtimes_cmake="$MAKE_DIR/files/runtimes.cmake"
	[ -f "$runtimes_cmake" ] || touch "$runtimes_cmake"
	printf '%s\n' "# Do not modify manually. Generated by code" |
		tee "$runtimes_cmake"  > /dev/null
		# // as_own "${runtimes_cmake%/*}" tee "$runtimes_cmake"  > /dev/null

	# xbuild/xhost/target
	# xbuild : Current compiler/machine. Cross compiler/headers/libraries for target machine. Readonly
	# xhost  : Cross host, target machine. $KISS_ROOT. Modifiable
	# target : Destdir. PKG_DIR of kiss package manager

	# https://unix.stackexchange.com/questions/251405/extract-substring-with-character-instead-of-position
	# build_bazel="$(find $PWD -name "BUILD.bazel" | grep clang/BUILD.bazel)"

	# AddLLVM.cmake
	# Since 4.0.0, the ABI version is indicated by the major version
	# [ -n "${version_target_major:+x}" ] ||
	# version_target_major=$(grep "#define CLANG_VERSION_MAJOR " $build_bazel | \
	#         awk '{print substr($4, "")}' | sed "s/\'//")
	version_target_major="$(grep "set(LLVM_VERSION_MAJOR" llvm/CMakeLists.txt |
		awk "{print \$2}" | tr -d ')')"
	export version_target_major
	version_target_minor="$(grep "set(LLVM_VERSION_MINOR" llvm/CMakeLists.txt |
		awk "{print \$2}" | tr -d ')')"
	export version_target_minor
	version_target_patch="$(grep "set(LLVM_VERSION_PATCH" llvm/CMakeLists.txt |
		awk "{print \$2}" | tr -d ')')"
	export version_target_patch
	# git
	version_target_suffix="$(grep "set(LLVM_VERSION_SUFFIX" llvm/CMakeLists.txt |
		awk "{print \$2}" | tr -d ')')"
	export version_target_suffix

	# [ "$2" = "git" ] ||
	# [ -z "${2:+x}" ] || version_target="$2"

	# [ -z "${version_target:+x}" ] ||
	# version_target=$(grep "#define CLANG_VERSION " $build_bazel | \
	#         awk '{print substr($4, "")}' | sed "s/\'//")
	version_target="$version_target_major.$version_target_minor.$version_target_patch"
	export version_target
	#
	# What version of llvm is currently installed?
	# Target machine llvm version
	# version_xhost="$(cat ${KISS_ROOT}/var/db/kiss/installed/llvm/version | cut -d " " -f 1)"
	version_xhost=$( \
		LD_LIBRARY_PATH=$XHOST_PREFIX/lib/$KISS_XHOST_TRIPLE:$XHOST_PREFIX/lib \
		"$XHOST_PREFIX/bin/llvm-config" --version | tr -d '[:alpha:]' 2> /dev/null) || :

	version_xhost_major="${version_xhost%%.*}"

	# Compile host llvm version
	version_xbuild=$( \
		LD_LIBRARY_PATH=$XBUILD_PREFIX/lib/$KISS_XHOST_TRIPLE:$XBUILD_PREFIX/lib \
		$XBUILD_PREFIX/bin/llvm-config --version | tr -d '[:alpha:]' 2> /dev/null) || :

	version_xbuild_major="${version_xbuild%%.*}"

	: ${cc:=" \
		LD_LIBRARY_PATH=$XBUILD_PREFIX/lib/$KISS_XHOST_TRIPLE:$XBUILD_PREFIX/lib \
		$XBUILD_PREFIX/lib/ccache/bin/cc"}
	: ${cxx:=" \
		LD_LIBRARY_PATH=$XBUILD_PREFIX/lib/$KISS_XHOST_TRIPLE:$XBUILD_PREFIX/lib \
		$XBUILD_PREFIX/lib/ccache/bin/c++"}

	: ${cc:="$(which cc)"}
	: ${cxx:="$(which c++)"}

	readonly KISS_ROOT

	# For clang 19.0.0
	# export _LIBCPP_HARDENING_MODE_DEFAULT=_LIBCPP_HARDENING_MODE_EXTENSIVE
	# export _LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_EXTENSIVE

	: ${CMAKE_SYSTEM_NAME:="$($KISS_ROOT/usr/bin/uname)"} && export CMAKE_SYSTEM_NAME
	: ${CMAKE_HOST_SYSTEM_NAME:="$(/usr/bin/uname)"} && export CMAKE_HOST_SYSTEM_NAME

	target_os_name_lower="$(printf '%s' "$CMAKE_SYSTEM_NAME" | tr "[A-Z]" "[a-z]")"

	elf_supported=$(echo __ELF__ | ${CC:-"$cc"} -E - | grep -q __ELF__ && printf '%d' 1 || printf '%d' 0)

	config_version() {
		# search_config="$MAKE_DIR/libcxx/include/__config"
		search_config="$1"
		[ -f "$search_config" ] ||
			# search_config="$(grep -L "experimental" $(find /usr/include -type f -name "__config"))"
			search_config="$(find "$PWD" -type f -name "__config" | grep -v "experimental" | grep -v "test")"
		local llvm_version=
		# "#  define _LIBCPP_VERSION 180000"
		# local _libcpp_version="$(grep " \_LIBCPP_VERSION " "$search_config" | grep define | awk '{print $4}')"
		# local _libcpp_version="$(grep " \_LIBCPP_VERSION " "$search_config" | grep define | awk -F " " '{print $NF}')"
		local _libcpp_version="$(grep " \_LIBCPP_VERSION " "$search_config" | grep define)"
		_libcpp_version="${_libcpp_version##*" "}"
		[ ! -z "${_libcpp_version:+x}" ] && {
			local major="$(printf '%d\n' "$(expr substr $_libcpp_version 1 2)")"
			local minor="$(printf '%d\n' "$(expr substr $_libcpp_version 3 2)")"
			local patch="$(printf '%d\n' "$(expr substr $_libcpp_version 5 2)")"
			llvm_version="$major.$minor.$patch"
			printf "$RS%s""$llvm_version"
			return 0
		} || {
			for config_file in $search_config; do
				[ -f "$config_file" ] || continue
				llvm_version=$( \
					printf '%s\n' "#include \"$config_file\"${newline}int main () { return 0;}" |
					${CC:-"$cc"} \
					-I$KISS_ROOT/usr/include -E -stdlib=libc++ -x c++ -dM - |
					grep " __VERSION__ " |  tr -d '\"');
				llvm_version="${llvm_version##*" "}"
				[ -z "${llvm_version+x}" ] || {
					# llvm_version=18.0.0
					# export llvm_version="$llvm_version"
					printf "$RS%s""$llvm_version"
					break
				}
			done
		}
	}

	_libcpp_version() {
		# search_config="$MAKE_DIR/libcxx/include/__config"
		search_config="$1"
		[ -f "$search_config" ] ||
			# search_config="$(grep -L "experimental" $(find /usr/include -type f -name "__config"))"
			search_config="$(find "$PWD" -type f -name "__config" | grep -v "experimental" | grep -v "test")"
		# local _libcpp_version=
		# "#  define _LIBCPP_VERSION 180000"
		# local _libcpp_version="$(grep " \_LIBCPP_VERSION " "$search_config" | grep define | awk '{print $4}')"
		local _libcpp_version="$(grep " \_LIBCPP_VERSION " "$search_config" | grep define)"
		_libcpp_version="${_libcpp_version##*" "}"
		[ ! -z "${_libcpp_version:+x}" ] && {
			printf "$RS%s""$_libcpp_version"
			return 0
		} || {
			for config_file in $search_config; do
				[ -f "$config_file" ] || continue
				_libcpp_version=$( \
					printf '%s\n' "#include \"$config_file\"${newline}int main () { return 0;}" |
					${CC:-"$cc"} \
					-I$KISS_ROOT/usr/include -E -stdlib=libc++ -x c++ -dM - |
					grep " _LIBCPP_VERSION " | awk '{print $3}');
				[ -z "${_libcpp_version+x}" ] || {
					# _libcpp_version == 180000
					# export _LIBCPP_VERSION="$_libcpp_version"
					printf "$RS%s""$_libcpp_version"
					break
				}
			done
		}
	}
	_LIBCPP_VERSION="$(// delegate -- _libcpp_version "$MAKE_DIR/libcxx/include/__config")"
	// log '$_LIBCPP_VERSION' "$_LIBCPP_VERSION"

	# Moved to hardcoded.patch
	# sed -i 's/set(COMPILER_RT_HAS_SANITIZER_COMMON TRUE)/set(COMPILER_RT_HAS_SANITIZER_COMMON FALSE)/' compiler-rt/cmake/config-ix.cmake
	# Fro 14.0.3 and earlier
	[ "$version_xhost_major" -gt "14" ] ||
	sed -i 's/!defined(_GCC_MAX_ALIGN_T)/& \&\& !defined(__DEFINED_max_align_t)/' libcxx/include/stddef.h

	# [ -z "$1" ] || [ -z "$2" ] ||
	[ "$is_manually_dialed" -eq "0" ] ||
	# for item in *.patch; do
	for item in $(\ls -1 -- patches/*.patch); do
		# [ "$item" != "max_align_t.patch" ] ||
		# [ "$version_xhost_major" -le "14" ] || continue

		# echo "Applying patch file $item"
		// log 'Applying patch file' "$item" &&
		patch -p1 < "$item" || kill 0
	done

	# [ "$version_xhost_major" -gt "14" ] || {
	header_path="$KISS_ROOT/usr/lib/clang/$version_xhost/include"
	[ -d "$header_path" ] || as_own "$KISS_ROOT/" \mkdir -p "$header_path"
	as_own "$KISS_ROOT/" \
	rsync -aqz "$MAKE_DIR/clang/lib/Headers/__stddef_max_align_t.h" "$header_path/"
	as_own "$KISS_ROOT/" sync
	# }

	header_path="$XBUILD_PREFIX/lib/clang/$version_xbuild/include"
	[ -d "$header_path" ] || as_own "$XBUILD_PREFIX/" \mkdir -p "$header_path"
	as_own "$XBUILD_PREFIX/" \
	rsync -aqz "$MAKE_DIR/clang/lib/Headers/__stddef_max_align_t.h" "$header_path/"
	as_own "$XBUILD_PREFIX/" sync

	# Moved to patch
	remove_deprecated() {
		handle_llvm_options="llvm/cmake/modules/HandleLLVMOptions.cmake"
		# // as_own "${handle_llvm_options%/*}" \
		sed -e '/set(LLVM_USE_LINKER "lld")/d' < "$handle_llvm_options" > _
		# // as_own "${handle_llvm_options%/*}" \
		\mv -f _ "$handle_llvm_options"
	}


	# From aports
	ffi_include_dir=$($XHOST_PREFIX/bin/pkg-config --cflags-only-I libffi | sed 's|^-I||g' | awk '{$1=$1}1')
	// log '$ffi_include_dir' "$ffi_include_dir"

	SNPRINTF_EXISTS="$(grep "int snprintf" "$XHOST_PREFIX/include/stdio.h" | head -n 1)"
	export SNPRINTF_EXISTS

	modules_prepare() {
		local ifs="$IFS"
		local IFS=";"
		local cmake_module_path_extent=";${CMAKE_MODULE_PATH=};"
		# # [ -d "cmake/Modules/" ] || \mkdir -p "cmake/Modules/"
		# [ -d "$MAKE_DIR/cmake/Modules" ] || {
		#   mkdir -p "$MAKE_DIR/cmake/Modules"
		#   # \ln -s "$MAKE_DIR/llvm/cmake/modules" "$MAKE_DIR/cmake/Modules"
		# }
		[ ! -d "$MAKE_DIR/cmake/Modules" ] ||
		case "$cmake_module_path_extent" in
			*";$MAKE_DIR/cmake/Modules;"*) ;;
				*)
					CMAKE_MODULE_PATH="$MAKE_DIR/cmake/Modules;$CMAKE_MODULE_PATH"
		esac
		local has_files=1
		[ ! -d "$PWD/cmake" ] ||
		for file in $(\ls -1 "$PWD/cmake"); do
			[ -d "$file" ] && {
				cmake_module_path_extent=";$CMAKE_MODULE_PATH;"
				# [ ! -d "$PWD/cmake/modules" ] ||
				#   # for file in $(\ls -1 "Modules"); do \mv -f "Modules/$file" "cmake/Modules/"; done
				#   { rsync -aq "$PWD/cmake/modules/." "$MAKE_DIR/cmake/Modules/" && sync; }

				[ ! -d "$PWD/cmake/$file" ] ||
				case "$cmake_module_path_extent" in
					*";$PWD/cmake/$file;"*) ;;
						*)
							CMAKE_MODULE_PATH="$PWD/cmake/$file;$CMAKE_MODULE_PATH"
				esac
			} || {
				[ -f "$file" ] && has_files=0
			}
		done
		[ "$has_files" -eq "1" ] || {
			cmake_module_path_extent=";$CMAKE_MODULE_PATH;"
			# for file in $(\ls -1 "$PWD/cmake"); do
			#   [ ! -f "$PWD/cmake/$file" ] ||
			#       rsync -aq "$PWD/cmake/$file" "$MAKE_DIR/cmake/Modules/"
			# done
			# sync

			# [ ! -d "$PWD/cmake" ] ||
			case "$cmake_module_path_extent" in
				*";$PWD/cmake;"*) ;;
					*)
						CMAKE_MODULE_PATH="$PWD/cmake;$CMAKE_MODULE_PATH"
			esac
		}
		IFS="$ifs"
		export CMAKE_MODULE_PATH
	}

	modules_prepare

	# LLVM should fetch it in cmake
	# [FetchContent](https://cmake.org/cmake/help/latest/module/FetchContent.html)
	[ ! -f "files/config.guess" ] || {
		// as_own "$MAKE_DIR" \
		rsync -aq "files/config.guess" "llvm/cmake/" && // as_own "$MAKE_DIR" sync; }

	# Don't set the compiler here, interferes with 2-stage build
	[ ! -z "${crosscompiling_cmake:+x}" ] &&
	[ -f "$crosscompiling_cmake" ] || {
		# KISS_ROOT=$KISS_ROOT \
		KISS_XHOST_ARCH=$KISS_XHOST_ARCH \
		kiss-cmake-config | sed '/CMAKE_C_COMPILER/d;' |
		sed '/CMAKE_CXX_COMPILER/d;' > $MAKE_DIR/files/crosscompiling.cmake || kill 0
		crosscompiling_cmake="$(readlink -fn "$MAKE_DIR/files/crosscompiling.cmake")"
	}

	color_config="$(readlink -fn "$MAKE_DIR/files/color.cmake")"

	# Not bootstrap building
	bootstrap=1
	# Bootstrap only if version is different and it's not a crossbuild
	# If insist, set KISS_ROOT and BOOTSTRAP at the same time
	# BOOTSTRAP= KISS_ROOT=/opt/kiss kiss p llvm 3
	[ "$version_xhost" = "$version_target" ] &&
		[ -z "${KISS_ROOT:+x}" ] &&
		[ -z "${BOOTSTRAP+x}" ] ||
	# Bootstrap building
	bootstrap=0

	# echo "\$BOOTSTRAP = ${BOOTSTRAP-}"
	// log '$BOOTSTRAP' "${BOOTSTRAP-}"
	# echo "\$bootstrap = ${bootstrap-}"
	// log '$bootstrap' "$bootstrap"

	# export LD_LIBRARY_PATH="$DESTDIR/$INSTALL_PREFIX/lib:${LD_LIBRARY_PATH-}"
	# export PATH="$DESTDIR/$INSTALL_PREFIX/bin:${PATH-}"
	# export LDFLAGS="-L$DESTDIR/$INSTALL_PREFIX/lib ${LDFLAGS-}"
	# export CFLAGS="-I$DESTDIR/$INSTALL_PREFIX/include ${CFLAGS-}"
	# export CXXFLAGS="-I$DESTDIR/$INSTALL_PREFIX/include ${CXXFLAGS-}"

	// log '$PATH' "$(IFS=":" && esceval $PATH)"
	cflags="${CFLAGS-}"
	CFLAGS_ORIGIN="${CFLAGS-}"
	# echo "Original \$CFLAGS = $CFLAGS"
	// log '$CFLAGS' "$CFLAGS"
	# kiss set one like this
	# Original $CFLAGS = --target=x86_64-linux-musl --sysroot=/opt/kiss -fPIC
	cxxflags="${CXXFLAGS-}"
	CXXFLAGS_ORIGIN="${CXXFLAGS-}"
	# echo "Original \$CXXFLAGS = $CXXFLAGS"
	// log '$CXXFLAGS' "$CXXFLAGS"
	# kiss set one like this
	# Original $CXXFLAGS = --target=x86_64-linux-musl --sysroot=/opt/kiss -fPIC
	LDFLAGS_ORIGIN="${LDFLAGS-}"


	unset CFLAGS
	unset CXXFLAGS
	unset LDFLAGS

	unset PKG_CONFIG_LIBDIR
	unset PKG_CONFIG_SYSROOT_DIR
	unset PKG_CONFIG_PATH

	is_clang() {
		local compiler_path="$1"

		local toolchain_prefix="${compiler_path%%/lib/*}"
		[ -z "${compiler_path##*"/lib/"*}" ] ||
			toolchain_prefix="${compiler_path%%/bin/*}"

		local result=1
		# local key_word_list="$(/ "$compiler_path --version" | grep "clang")"
		local key_word_list="$( \
			PATH=$toolchain_prefix/bin \
			LD_LIBRARY_PATH=$toolchain_prefix/lib/$KISS_XHOST_TRIPLE:$toolchain_prefix/lib \
			$compiler_path --version | grep "clang")"
		case "$key_word_list" in *"clang "*) result=0 ;; esac
		return $result
	}

	to_sysroot() {
		local toolchain_prefix="$1"
		local sysroot
		case "$toolchain_prefix" in
			*"$DESTDIR/$INSTALL_PREFIX"*)
				sysroot="$DESTDIR"
				;;
				*)
				sysroot="$KISS_ROOT"
		esac
		printf "$RS%s" "$sysroot"
	}

	to_version() {
		local host_toolchain_prefix="$1"
		local host_toolchain_version="$version_target"

		[ "$host_toolchain_prefix" = "$DESTDIR/$INSTALL_PREFIX" ] || {
			[ -f "$host_toolchain_prefix/bin/llvm-config" ] &&
			command -v "$host_toolchain_prefix/bin/llvm-config" > /dev/null 2>&1 &&
			host_toolchain_version="$( \
			LD_LIBRARY_PATH=$host_toolchain_prefix/lib/$KISS_XHOST_TRIPLE:$host_toolchain_prefix/lib \
			$host_toolchain_prefix/bin/llvm-config --version | tr -d '[:alpha:]' 2> /dev/null)" || {
				[ -f "$host_toolchain_prefix/bin/cc" ] &&
				command -v "$host_toolchain_prefix/bin/cc" > /dev/null 2>&1 &&
				host_toolchain_version="$( \
				LD_LIBRARY_PATH=$host_toolchain_prefix/lib/$KISS_XHOST_TRIPLE:$host_toolchain_prefix/lib \
				$host_toolchain_prefix/bin/cc --version | grep version )"
				host_toolchain_version="${host_toolchain_version##* }"
			} || {
				host_toolchain_version="$(// delegate -- config_version "$KISS_ROOT/usr/include/c++/v1/__config")"
			}

		}
		printf "$RS%s" "$host_toolchain_version"
	}

	case "$(type path_prepend)" in *"function"*|*"alias"*) ;;
		*)
			# Add to the front of a target path
			_path_prepend() {
				[ ! -z "${1:+x}" ] &&
				[ -d "$2" ] || return 0
				local extend=":$(/ "echo \${${1}-}"):"
				# echo "\$2 = $2"
				# echo "test=${extend##*:$2:*}"
				# [ ! -d "$2" ] || {
				# / test -z "\"\${$1##*:$2:*}\"" -o -z "\"\${$1%%*:$2}\"" \
				# -o -z "\"\${$1##$2:*}\"" -o -z "\"\${$1##$2}\"" ||
				[ "$extend" = "::" ] && / "export $1=$2" ||
				[ -z "${extend##*:$2:*}" ] || / "export $1=$2:\$$1"
				# }
			}
			alias path_prepend='_path_prepend'
	esac

	CCACHE_PROGRAM="$(which ccache)" && export CCACHE_PROGRAM
	readonly CCACHE_PROGRAM

	# export CCACHE_CPP2=true CCACHE_NOHASHDIR=true

	{
		{
			[ -z "${CCACHE_NOHASHDIR+x}" ]   && [ -z "${CCACHE_HASHDIR+x}" ]
		} || {
			[ ! -z "${CCACHE_NOHASHDIR+x}" ] && [ ! -z "${CCACHE_HASHDIR+x}" ]
		}
	} && CCACHE_HASHDIR=

	{
		[ ! -z "${CCACHE_NOHASHDIR+x}" ] && [ -z "${CCACHE_HASHDIR+x}" ]
	} && {
		: ${CCACHE_NOHASHDIR:=}  && export CCACHE_NOHASHDIR
	} || {
		: ${CCACHE_HASHDIR:=}    && export CCACHE_HASHDIR
	}

	: ${CCACHE_COMPILERCHECK:=content}  && export CCACHE_COMPILERCHECK

	: ${CCACHE_CPP2:=}                  && export CCACHE_CPP2

	: ${CCACHE_INODECACHE:=}            && export CCACHE_INODECACHE

	export NO_IMPLICIT_INCLUDE_DIRECTORIES=
	export ZLIB_ROOT="/usr"

	tool_chain() {
		_level_2
		unset CC CXX CFLAGS CXXFLAGS LDFLAGS RESOURCE_DIR BINDIR_HOST SYSROOT_LIB LDFLAGS_NO_LIBUNWIND
		unset ldflags_no_libunwind

		# future xhost                 current xhost                 xbuild
		# "$DESTDIR/$INSTALL_PREFIX", $KISS_ROOT/$INSTALL_PREFIX, or /$INSTALL_PREFIX
		local toolchain_prefix="${1-"/$INSTALL_PREFIX"}"
		shift 1

	# : "${SYSROOT:="$KISS_ROOT"}" && export SYSROOT
	# readonly SYSROOT
	# // log '$SYSROOT' "$SYSROOT"
	local sysroot="$(// delegate -- to_sysroot "$toolchain_prefix")"
	export SYSROOT="$sysroot"

		# XHOST_PREFIX default value: "$KISS_ROOT/$INSTALL_PREFIX"
		# [ "$toolchain_prefix" != "$DESTDIR/$INSTALL_PREFIX" ] ||
		# XHOST_PREFIX="$toolchain_prefix"
		# export XHOST_PREFIX
		# Using $version_xhost
		# XHOST_VERSION="$(// delegate -- to_version "$XHOST_PREFIX")"
		# export XHOST_VERSION
		// cue 'tool_chain' "redeploy"
		// log '$toolchain_prefix' "$toolchain_prefix"
		// log '$SYSROOT' "$SYSROOT"
		// log '$XBUILD_PREFIX' "$XBUILD_PREFIX"
		// log '$XHOST_PREFIX' "$XHOST_PREFIX"

		# Moved to XHOST_PREFIX
		# [ -z "${toolchain_prefix##*"$DESTDIR/$INSTALL_PREFIX"*}" ] || {
		#   # Some headers just exist on the real machines
		#   # When switching toolchain, we should keep these headers path still available
		#   NON_TARGET_PREFIX="$toolchain_prefix"
		#   export NON_TARGET_PREFIX
		# }

		local bin_path="$toolchain_prefix/bin"
		# local path=":$PATH:"
		# [ -z "${path##*":$toolchain_prefix/bin:"*}" ] ||

		# [ -z "${bin_path##*$KISS_ROOT*}" ] ||
		path_prepend PATH "$bin_path"

		# path_prepend PATH "$OUTPUT_DIR/bin:$bin_path"
		#
		# [ ! -z "${PATH:+x}" ] &&
		# [ -z "${PATH##"$toolchain_prefix/bin:"*}" ] ||
		# export PATH="$toolchain_prefix/bin${PATH:+":${PATH}"}"
		// log '$PATH' "$(IFS=":" && esceval $PATH)"

		local version_system="$(// delegate to_version "$SYSROOT/$INSTALL_PREFIX")"
		# local version_system="$( \
		#   LD_LIBRARY_PATH=$toolchain_prefix/lib/$KISS_XHOST_TRIPLE:$toolchain_prefix/lib \
		#   $toolchain_prefix/bin/llvm-config --version | tr '[:alpha:]')"
		VERSION_SYSTEM="$version_system"
		// log '$version_system' "$version_system"
		// log '$VERSION_SYSTEM' "$VERSION_SYSTEM"
		export VERSION_SYSTEM

		local toolchain_version_major="${VERSION_SYSTEM%%.*}"

		# [ "$(readlink -fn "$toolchain_prefix/bin/cc")" = "$toolchain_prefix/bin/ccache" ] || {
		#   local pwd_origin="$PWD"
		#   cd "$toolchain_prefix/bin"
		#   [ -f "./ccache" ] || cp $CCACHE_PROGRAM ./
		#   \ln -sf ccache cc
		#   cd "$pwd_origin"
		# }
		# [ "$(readlink -fn "$toolchain_prefix/bin/c++")" = "$toolchain_prefix/bin/ccache" ] || {
		#   local pwd_origin="$PWD"
		#   cd "$toolchain_prefix/bin"
		#   [ -f "./ccache" ] || cp $CCACHE_PROGRAM ./
		#   \ln -sf ccache c++
		#   cd "$pwd_origin"
		# }

		compiler_refine() {
			local toolchain_prefix="$1"
			local compiler="$2"
			# For post is_clang()
			local suffix="${3-}"

			[ ! -z "${suffix:+x}" ] || {
				local length="$(expr length "$compiler")"
				# It might be "cc"
				suffix="$(expr substr "$compiler" $((length - 1)) 2)"
			}

			[ "$suffix" = "++" ] ||
			[ "$suffix" != "xx" ] || suffix="++"

			local real_compiler="$( \
				LD_LIBRARY_PATH=$toolchain_prefix/lib/$KISS_XHOST_TRIPLE:$toolchain_prefix/lib \
				command -v "$toolchain_prefix/$compiler" 2> /dev/null)"
			# /usr/bin/clang-14
			real_compiler="$(readlink -fn "$real_compiler")"
			local compiler_name="${real_compiler##*/}"
			# Remove $version from clang-$version
			compiler_name="${compiler_name%%-*}"

			# [ "$toolchain_prefix" != "/$INSTALL_PREFIX" ] || {
				# Shift to ccache forcefully
				# [ ! -z "${real_compiler:+x}" ] && {
				#   "$real_compiler" -v > /dev/null 2>&1 ||
				#   // die '$real_compiler' "'$real_compiler' is not an executable"
				# } || {
				[ ! -z "${real_compiler:+x}" ] &&
				[ -z "${real_compiler##*"ccache"*}" ] || {
					# [ -z "${compiler##*$toolchain_prefix*}" ] ||
					# real_compiler="$toolchain_prefix/$compiler"
					# /usr/lib/ccache/bin/clang
					# real_compiler="$toolchain_prefix/lib/ccache/bin/$compiler_name$suffix"
					# ++ part moved to the end of the function
					# real_compiler="$toolchain_prefix/lib/ccache/bin/$compiler_name"
					real_compiler="/$INSTALL_PREFIX/lib/ccache/bin/$compiler_name"
				}
			# }

			# ! is_clang "$compiler" ||
			#   ! command -v "$toolchain_prefix/bin/clang$suffix" > /dev/null 2>&1 ||
			#   compiler="$toolchain_prefix/bin/clang$suffix"
			PATH=$toolchain_prefix/bin \
			LD_LIBRARY_PATH=$toolchain_prefix/lib/$KISS_XHOST_TRIPLE:$toolchain_prefix/lib \
			command -v "$real_compiler" > /dev/null 2>&1 ||
				// die '$real_compiler' "'$real_compiler' is not an executable${newline}\
				You could create it manually"

			[ -z "${suffix:+x}" ] ||
			[ "$suffix" != "++" ] || {
				result_suffix="$(expr substr "$real_compiler" $(($(expr length "$real_compiler") - 1)) 2)"
				[ "$result_suffix" = "$suffix" ] ||
				real_compiler="$real_compiler$suffix"
			}

			printf "$RS%s" "$real_compiler"
#           printf "$RS%s" "\
# PATH=$toolchain_prefix/bin \
# LD_LIBRARY_PATH=$toolchain_prefix/lib/$KISS_XHOST_TRIPLE:$toolchain_prefix/lib \
# $real_compiler"

		}

		# If ccache needs to be disabled
		# Remove "/usr/lib/ccache/bin" from $PATH

		unset CCACHE_DISABLE
		unset CCACHE_RECACHE
		# export CCACHE_DISABLE=
		# export CCACHE_RECACHE=

		# : "${cc:="/usr/lib/ccache/bin/cc"}"   && export cc
		# cc="${1-"ccache cc"}"
		# cc="${1-"/usr/lib/ccache/bin/cc"}"
		# local real_cc="$(command -v "$cc" 2> /dev/null)"
		# "$real_cc" -v > /dev/null 2>&1 || // die '$real_cc' "'$real_cc' is not an executable"
		# [ ! -z "${real_cc:+x}" ] &&
		# [ -z "${real_cc##*$toolchain_prefix*}" ] || cc="$toolchain_prefix/$1"
		# command -v "$cc" > /dev/null 2>&1 || // die '$cc' "'$cc' is not an executable"
		cc="$(// delegate -- compiler_refine "$toolchain_prefix" "${1-"ccache cc"}")"
		export cc
		# : "${cxx:="/usr/lib/ccache/bin/c++"}" && export cxx
		# cxx="${2-"ccache c++"}"
		# cxx="${2-"/usr/lib/ccache/bin/c++"}"
		# local real_cxx="$(command -v "$cxx" 2> /dev/null)"
		# "$real_cxx" -v > /dev/null 2>&1 || // die '$real_cxx' "'$real_cxx' is not an executable"
		# [ ! -z "${real_cxx:+x}" ] &&
		# [ -z "${real_cxx##*$toolchain_prefix*}" ] || cxx="$toolchain_prefix/$2"
		# command -v "$cxx" > /dev/null 2>&1 || // die '$cxx' "'$cxx' is not an executable"
		cxx="$(// delegate -- compiler_refine "$toolchain_prefix" "${2-"ccache c++"}")"
		export cxx
		# kiss defined CC won't work
		# : "${CC:="$cc $CFLAGS_ORIGIN"}"   && export CC
		# CC="$(which clang)"    && export CC
		# CC="/usr/bin/clang"    && export CC
		CC="$cc"   && export CC
		# echo "\$CC  = $CC"
		// log '$CC' "$CC"
		# kiss defined CXX won't work
		# : "${CXX:="$cxx $CXXFLAGS_ORIGIN"}" && export CXX
		# CXX="$(which clang++)" && export CXX
		# CXX="/usr/bin/clang++" && export CXX
		CXX="$cxx" && export CXX
		# echo "\$CXX = $CXX"
		// log '$CXX' "$CXX"

		# For LDFLAGS : libraries for target to link against
		# Expected value: "$toolchain_prefix/lib"
		# This name might be refered in patches ? No
		# local sysroot_lib_expected="$toolchain_prefix/lib"
		local sysroot_lib_expected="$SYSROOT/$INSTALL_PREFIX/lib"
		[ -f "$SYSROOT/$INSTALL_PREFIX/bin/llvm-config" ] &&
		SYSROOT_LIB="$( \
			LD_LIBRARY_PATH=$sysroot_lib_expected/$KISS_XHOST_TRIPLE:$sysroot_lib_expected \
			$SYSROOT/$INSTALL_PREFIX/bin/llvm-config --libdir)" || {
			[ ! -d "$sysroot_lib_expected" ] ||
			SYSROOT_LIB="$sysroot_lib_expected"
		}
		[ "$(readlink -fn "$SYSROOT_LIB")" = "$sysroot_lib_expected" ] || {
			// die '$SYSROOT_LIB' "'$SYSROOT_LIB' looks not correct"
			# Correct llvm-config will print system root correctly
			# [ -z "${SYSROOT_LIB##*"$DESTDIR"*}" ] ||
			# [ -z "${SYSROOT_LIB##*"$KISS_ROOT"*}" ] || {
			#   SYSROOT_LIB="$KISS_ROOT$SYSROOT_LIB"
			#   [ "$SYSROOT_LIB" = "$sysroot_lib_expected" ] || {
			#       // log '$KISS_ROOT$sysroot_lib_expected' "$KISS_ROOT$sysroot_lib_expected"
			#       // die '$SYSROOT_LIB' "'$SYSROOT_LIB' looks not correct"
			#   }
			# }
		}

		export SYSROOT_LIB
		// log '$SYSROOT_LIB' "$SYSROOT_LIB"

		# export LDFLAGS="-L$DESTDIR/$INSTALL_PREFIX/lib ${LDFLAGS-}"
		# export CFLAGS="-I$DESTDIR/$INSTALL_PREFIX/include ${CFLAGS-}"
		# export CXXFLAGS="-I$DESTDIR/$INSTALL_PREFIX/include ${CXXFLAGS-}"
		#
		# When using llvm-config or compiler correctly, $KISS_ROOT will be contained
		# RESOURCE_DIR="$(readlink -fn "$(/ "$cc --print-resource-dir")")"
		# Expected value: "$SYSROOT/$INSTALL_PREFIX/lib/clang/$version_system"
		resource_dir_expected="$(readlink -fn "$SYSROOT/$INSTALL_PREFIX/lib/clang/$version_system")"
		command -v $SYSROOT/$INSTALL_PREFIX/bin/cc > /dev/null 2>&1 &&
		RESOURCE_DIR="$(readlink -fn "$( \
			# PATH=$toolchain_prefix/bin \
			PATH=$SYSROOT/$INSTALL_PREFIX/bin \
			LD_LIBRARY_PATH=$SYSROOT/$INSTALL_PREFIX/lib/$KISS_XHOST_TRIPLE:$SYSROOT/$INSTALL_PREFIX/lib \
			# $cc --print-resource-dir)")"
			$SYSROOT/$INSTALL_PREFIX/bin/cc --print-resource-dir)")" || {

			[ ! -d "$resource_dir_expected" ] ||
			# Will get xbuild cc -- cc gets the clang from $PATH
			# $($toolchain_prefix/bin/which cc) --print-resource-dir)")"
			RESOURCE_DIR="$resource_dir_expected"
		}
		[ ! -z "${RESOURCE_DIR##*"$bin_path"*}" ] || {
			# Ill formated
			# "$bin_path/$DESTDIR/$INSTALL_PREFIX/lib/clang/$version_target"
			# local length_bin_path="$(expr length $bin_path)"
			local length_bin_path="${#bin_path}"
			RESOURCE_DIR="$( \
			expr substr "$RESOURCE_DIR" $((length_bin_path + 1)) \
				$((${#RESOURCE_DIR} - length_bin_path )) )"
		}

		# RESOURCE_DIR="$(readlink -fn "$RESOURCE_DIR")" ||
		#   // die '$RESOURCE_DIR' "'$RESOURCE_DIR' does not exist"

		# /usr/lib/clang/14.0.3
		# RESOURCE_DIR="$($CC --print-resource-dir)" && export RESOURCE_DIR
		local resource_dir_expected=
		resource_dir_expected="$(readlink -fn "$SYSROOT/$INSTALL_PREFIX/lib/clang/$version_system")"
		[ "$RESOURCE_DIR" = "$resource_dir_expected" ] || {
			[ ! -z "${toolchain_prefix:+x}" ] &&
			[ -z "${toolchain_prefix##*"$DESTDIR"*}" ] && {
				# RESOURCE_DIR="$DESTDIR/$INSTALL_PREFIX/lib/clang/$version_target"
				// log '$resource_dir_expected' "$resource_dir_expected"
				// die '$RESOURCE_DIR' "${newline}'$RESOURCE_DIR'${newline}looks not correct${newline}\
					llvm-config might be corrupted on target build"
			} || {

				[ "${RESOURCE_DIR##*/}" != "$version_system" ] &&
				// die '$RESOURCE_DIR' "'$RESOURCE_DIR' got a wrong value" ||
				# [ "$RESOURCE_DIR" = "$resource_dir_expected" ] ||
				# The only chance to append RESOURCE_DIR with KISS_ROOT
				RESOURCE_DIR="$KISS_ROOT$RESOURCE_DIR"
				[ "$RESOURCE_DIR" = "$resource_dir_expected" ] || {
					// log '$resource_dir_expected' "$resource_dir_expected"
					// die '$RESOURCE_DIR' "${newline}'$RESOURCE_DIR'${newline}looks not correct${newline}\
						llvm-config might be corrupted on xhost machine"
				}
			}
		}

		export RESOURCE_DIR
		// log '$RESOURCE_DIR' "$RESOURCE_DIR"

		# note: use 'c++2b' for 'Working draft for ISO C++ 2023 DIS' standard
		[ -n "${cxx_standard_version+x}" ] || {
			# For compiler command line
			# (clang-14.0.3 does support -std=c++2b but not support -std=c++23)
			# (clang-18.0.0 does support -std=c++23)
			standard_version_keyword="2b"
			cxx_standard_version="c++$standard_version_keyword"
			# For cmake and _LIBCPP_STD_VER
			standard_version_number=23
		}

		[ -f "$toolchain_prefix/bin/llvm-config" ] &&
		command -v "$toolchain_prefix/bin/llvm-config" > /dev/null 2>&1 &&
		BINDIR_HOST="$( \
			LD_LIBRARY_PATH=$toolchain_prefix/lib/$KISS_XHOST_TRIPLE:$toolchain_prefix/lib \
			$toolchain_prefix/bin/llvm-config --bindir)" || {
			# [ ! -d "$SYSROOT/$INSTALL_PREFIX/bin" ] ||
			# BINDIR_HOST="$SYSROOT/$INSTALL_PREFIX/bin"
			[ ! -d "$toolchain_prefix/bin" ] ||
			BINDIR_HOST="$toolchain_prefix/bin"
		}
		# // log '$BINDIR_HOST' "$BINDIR_HOST"
		# /usr/bin
		# : "${BINDIR_HOST:=$(/$INSTALL_PREFIX/bin/llvm-config --bindir)}" && export BINDIR_HOST
		# BINDIR_HOST="$(/$INSTALL_PREFIX/bin/llvm-config --bindir)" && export BINDIR_HOST
		# BINDIR_HOST="$($SYSROOT/$INSTALL_PREFIX/bin/llvm-config --bindir)" && export BINDIR_HOST
		# echo "\$BINDIR_HOST = $BINDIR_HOST"
		[ "$BINDIR_HOST" = "$toolchain_prefix/bin" ] ||
			// die '$BINDIR_HOST' "'$BINDIR_HOST' looks not correct"
		// log '$BINDIR_HOST' "$BINDIR_HOST"
		export BINDIR_HOST

		# sed -i 's/set(LLVM_REQUIRED_CXX_STANDARD 17)/set(LLVM_REQUIRED_CXX_STANDARD 20)/g' \
		#     "llvm/CMakeLists.txt"

		# "$SYSROOT/$INSTALL_PREFIX/lib"
		# "$SYSROOT/$INSTALL_PREFIX/lib" == /usr/lib
		# "$SYSROOT/$INSTALL_PREFIX/lib" == "$(/$INSTALL_PREFIX/bin/llvm-config --libdir)"
		# "$SYSROOT/$INSTALL_PREFIX/lib" == "$($SYSROOT/$INSTALL_PREFIX/bin/llvm-config --libdir)"


		cflags="${CFLAGS_ORIGIN-" "}"
		cflags="$(printf '%s' "$cflags" | tr ' ' '\n' |
			grep -v "^-I $KISS_ROOT/usr/include$" |
			grep -v "^-I$KISS_ROOT/usr/include$" |
			grep -v "^-I /usr/include$" |
			grep -v "^-I/usr/include$" |
			xargs)"

		# For the test to get correct result
		# [ -z "${cxxflags##*LIBCXX_HAS_MUSL_LIBC*}" ] ||
		# The space in ${CXXFLAGS_ORIGIN-" "} is intentional
		cxxflags="${CXXFLAGS_ORIGIN-" "}"
		cxxflags="$(printf '%s' "$cxxflags" | tr ' ' '\n' |
			grep -v "^-I $KISS_ROOT/usr/include$" |
			grep -v "^-I$KISS_ROOT/usr/include$" |
			grep -v "^-I /usr/include$" |
			grep -v "^-I/usr/include$" |
			xargs)"
		ldflags="${LDFLAGS_ORIGIN-" "}"

		cflags="$cflags \
-Os \
-fPIC \
-mtune=native \
"

		[ "$elf_supported" -ne "0" ] ||
		cflags="$cflags \
-D __ELF__ \
"
		cflags="$cflags \
-D __${target_os_name_lower}__ \
"
#       cflags="$cflags \
# -U COMPILER_RT_HAS_FLOAT16 \
# -U __SSE2__ \
# "
		# cflags="$cflags -resource-dir=${RESOURCE_DIR} -B${BINDIR_HOST} -Os -fPIC"

		local sse_support=$( \
			PATH=$toolchain_prefix/bin \
			LD_LIBRARY_PATH=$toolchain_prefix/lib/$KISS_XHOST_TRIPLE:$toolchain_prefix/lib \
			$CC -msse3 -dM -E - < /dev/null | egrep "SSE|AVX" | grep __SSE2__  | awk '{print $2}')
		local sse_support_v=$( \
			PATH=$toolchain_prefix/bin \
			LD_LIBRARY_PATH=$toolchain_prefix/lib/$KISS_XHOST_TRIPLE:$toolchain_prefix/lib \
			$CC -msse3 -dM -E - < /dev/null | egrep "SSE|AVX" | grep __SSE2__  | awk '{print $3}')

		[ "$sse_support" != "__SSE2__" ] ||
			# [ "$sse_support_v" -ne "1" ] ||
			cflags="$cflags -msse2 "

		cflags="$cflags \
-v \
-pthread \
-pipe \
-fno-pie \
-fstack-protector-strong \
-Wformat \
-Werror=format-security \
-Wdate-time \
-Wno-unused-command-line-argument \
-Wno-gcc-compat \
-Wno-gnu-include-next \
-Wno-zero-length-array \
-Wno-gnu-anonymous-struct \
-Wno-unused-parameter \
-Wno-undef \
-Wno-unknown-warning-option \
-Wno-include-next-absolute-path \
-Wno-suggest-override \
-Wno-user-defined-literals \
-ferror-limit=100 \
-D _FORTIFY_SOURCE=2 \
-Qunused-arguments \
-fcolor-diagnostics \
"
	# clang-14: error: unknown argument: '-fno-pch-timestamp'
	# -fno-pch-timestamp \
	# --sysroot=$KISS_ROOT \
	# http://petereisentraut.blogspot.com/2011/05/ccache-and-clang.html
	# -Qunused-arguments \
	# -fcolor-diagnostics \
		#
		# Search in Makefile, *.c, *.cpp and *.py. 2 is a mode
		# -D_FORTIFY_SOURCE=2 \
		# /usr/include/python3.11/pyconfig.h:589:/* Define if glibc has incorrect _FORTIFY_SOURCE wrappers for memmove and bcopy.

		# /usr/include/c++/v1/__config:891:# define _LIBCPP_USING_IF_EXISTS __attribute__((using_if_exists))
		# /usr/include/c++/v1/__config:893:# define _LIBCPP_USING_IF_EXISTS
		# -D__DEFINED_max_align_t \

		# -isystem /usr/include/bits \
		# -D_LIBCPP_CXX03_LANG \
		# -isystem /usr/include \
		# -isystem $PWD/include \
		# -isystem $PWD/lib/Headers \
		# -isystem $PWD/clang/lib/Headers \

		! is_clang "$cc" ||
		cflags="$cflags \
-Xclang -fno-pch-timestamp \
"
	# -Xclang -fexperimental-library \

		# [ "$toolchain_version_major" -lt 17 ] ||
		#   # cflags="$cflags -Xclang --opaque-pointers=0"
		#   # https://github.com/llvm/llvm-project/issues/60664
		#   cflags="$cflags -Wl,-mllvm,--opaque-pointers"

		cflags="$cflags -lz -O2"
		# error: call to undeclared function 'setenv'
		cflags="$cflags -D _POSIX_SOURCE"


		# deploy "-D" "CMAKE_C_FLAGS" "-nostdlib"
		# --sysroot=$SYSROOT \
		# cflags="$cflags \
		# -resource-dir=${RESOURCE_DIR} -B${BINDIR_HOST} \
		# -isystem $MAKE_DIR/lib/Headers \
		# -isystem $MAKE_DIR/include \
		# -Wno-bitwise-op-parentheses \
		# "

		# https://reviews.llvm.org/D66834?id=217991
		# Driver tests: set `--sysroot=""` to support clang with `DEFAULT_SYSROOT`
		# -nostdinc \
		# -nostdlib \
		# -nobuiltininc \
		# -nodefaultlibs \
		# -nolibc \
		#
		# $KISS_XHOST_ABI == $TARGET_ABI
		# env
		# export CLIBC="musl"
		# export KISS_XHOST_ABI="$CLIBC"
		[ -n "${KISS_XHOST_ABI+x}" ] ||
		KISS_XHOST_ABI="$($KISS_ROOT/usr/bin/ldd --version 2>&1 | grep musl | awk '{print $1}')" || :
		# echo "\$KISS_XHOST_ABI = $KISS_XHOST_ABI"
		// log '$KISS_XHOST_ABI' "$KISS_XHOST_ABI"
		# ! expr "$($KISS_ROOT/usr/bin/ldd --version 2>&1 | grep libc)" : "^musl" > /dev/null 2>&1 ||
		[ "$KISS_XHOST_ABI" != "musl" ] ||
		[ -z "${cxxflags##*"-D LIBCXX_HAS_MUSL_LIBC"*}" ] ||
		cxxflags="$cxxflags -D LIBCXX_HAS_MUSL_LIBC"

		LIBCXX_PREFIX="std"

		local libcxx_setting=
		[ -f "$toolchain_prefix/bin/llvm-config" ] &&
		command -v "$toolchain_prefix/bin/llvm-config" > /dev/null 2>&1 &&
		libcxx_setting="$(for item in $( \
			LD_LIBRARY_PATH=$toolchain_prefix/lib/$KISS_XHOST_TRIPLE:$toolchain_prefix/lib \
			$toolchain_prefix/bin/llvm-config --cxxflags); \
		do [ -n "${item##*stdlib*}" ] || { printf '%s' "$item"; break; }; done)" ||
			# -I/usr/include -std=c++18 -stdlib=libc++  -fno-exceptions -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS
			libcxx_setting="-stdlib=libc++"

		# libcxx=$(expr substr "$(for item in $(llvm-config --cxxflags); \
		#             do [ -n "${item##*stdlib*}" ] || { printf '%s' "$item"; break; }; done)" 9 6)
		[ "${libcxx_setting##*=}" != "libc++" ] || {
			LIBCXX_PREFIX=""
			cxxflags="$cxxflags \
-D LLVM_ENABLE_LIBCXX \
-D LLVM_ENABLE_LIBCXXABI \
"
		}

		# echo "\$LIBCXX_PREFIX = $LIBCXX_PREFIX"
		// log '$LIBCXX_PREFIX' "$LIBCXX_PREFIX"

		# $OUTPUT_DIR/include/c++/v1/__config
		# [ -z "${_LIBCPP_VERSION+x}" ] ||
		# cxxflags="-D _LIBCPP_PROVIDES_DEFAULT_RUNE_TABLE=1 $cxxflags"

		cxxflags="$cxxflags \
-D _LIBCPP_ATOMIC_ONLY_USE_BUILTINS \
-U HAVE_CXX_ATOMICS_WITH_LIB \
-D LLVM_HAS_ATOMICS \
"
# This macro will force every package to define it
# -D __NEED_max_align_t \
		# -U __NEED_max_align_t \

		cxxflags="$cxxflags \
-D _LARGEFILE64_SOURCE \
"

		#  include <sys/endian.h>
		# cxxflags="$cxxflags -D __FreeBSD__"

		cxxflags="$cxxflags \
-D _LIBCPP_STD_VER=$standard_version_number \
"
# -D _LIBCPP_STD_VER=${cxx_standard_version##*c++} \
# -D _LIBCPP_STD_VER=23 \

	# /tmp/ei/kiss/objects/llvm/include/$LLVM_DEFAULT_TARGET_TRIPLE/c++/v1/__config_site:18:9: warning: '_LIBCPP_HAS_MUSL_LIBC' macro redefined [-Wmacro-redefined]
	# #define _LIBCPP_HAS_MUSL_LIBC
	# ./libcxx/include/__config_site.in
	# #cmakedefine _LIBCPP_HAS_MUSL_LIBC

	#   cxxflags="$cxxflags \
	# -D _LIBCPP_HAS_MUSL_LIBC \
	# "

		cxxflags="$cxxflags \
-D _LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER \
"

		# Conflicts with _LIBCPP_HAS_MUSL_LIBC
		# -D _LIBCPP_HAS_NO_WIDE_CHARACTERS \

		# libcxx/CMakeLists.txt
		# config_define(1 _LIBCPP_PSTL_CPU_BACKEND_THREAD)
		#   cxxflags="$cxxflags \
		# -D _LIBCPP_PSTL_CPU_BACKEND_THREAD \
		# "

		cxxflags="$cxxflags \
-D HAVE_FCNTL_H \
"

	#if defined(HAVE_UNISTD_H)
	# include <unistd.h>
	#endif

		cxxflags="$cxxflags \
-D HAVE_UNISTD_H \
"

		# Remove the || later. Just for the sake of time saving
		# [ "$SYSROOT" != "$DESTDIR" ] ||
		cxxflags="$cxxflags -std=$cxx_standard_version \
-D HAVE_SYS_MMAN_H -D HAVE_SYSEXITS_H -D HAVE_GETRUSAGE -D HAVE_SYS_STAT_H -D HAVE_GETPAGESIZE \
"

	# For clang 19.0.0
	#   cxxflags="$cxxflags \
	# -D _LIBCPP_HARDENING_MODE_DEFAULT=_LIBCPP_HARDENING_MODE_EXTENSIVE \
	# -D _LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_EXTENSIVE \
	# "

		# LIBCXX_COMPILE_FLAGS="-isystem /usr/include/c++/v1"
		# In runtimes/CMakeLists.txt
		# -nostdinc++ \

		cxxflags="$cflags $cxxflags  \
-stdlib=libc++ \
"

		# clang-14: error: unknown argument: '-fexperimental-library'
		[ "$SYSROOT" != "$DESTDIR" ] ||
			cxxflags=" \
$cxxflags  \
-fexperimental-library \
"

		# -nostdlib \
		# -nostdinc++ \
		# -nostdlib++ \
		# --sysroot=$SYSROOT \

		# CMake Error at cmake/modules/CheckAtomic.cmake:56 (message):
		# Host compiler must support std::atomic!
		# Insert the following line into CheckAtomic.cmake:42
		# message(STATUS "\${CMAKE_CXX_FLAGS} = ${CMAKE_CXX_FLAGS}")
		# Will found that the additional -isystem path is the reason of the fail
		# of compiling the check_working_cxx_atomics

		# -resource-dir=${RESOURCE_DIR} -B${BINDIR_HOST} \
		# -D_LIBCPP_BUILDING_LIBRARY=1 \
		# -D_LIBCPP_HAS_NO_VENDOR_AVAILABILITY_ANNOTATIONS=1 \
		# -Wno-bitwise-op-parentheses \

		# -isystem /usr/include/tirpc \

		# clang-14: warning: argument unused during compilation: '-stdlib=libc++' [-Wunused-command-line-argument]
		# -stdlib=libc++ \




		ldflags="${ldflags-} \
-fuse-ld=lld \
-stdlib=libc++ \
-rtlib=compiler-rt \
--unwindlib=libunwind \
--warn-backrefs \
-lc \
-lexecinfo \
-lrt -ldl -lz -lm \
-rdynamic -lc++experimental -lpthread -v \
-Wl,-z,relro \
-Wl,--undefined-version \
-Wl,--as-needed \
-Wl,--enable-new-dtags \
"
	# musl: LD_LIBRARY_PATH > rpath=runpath > default paths.
	# -Wl,--enable-new-dtags \
	# LLVMDemanggle needs libunwind
	# --unwindlib=libunwind \
	# -Wl,-lunwind \
	# --unwindlib=none \
	# -Wl,--build-id \
	# -lc++ \
	# -lc++abi \

		# https://github.com/rust-lang/rust/issues/65051
		# -Wl,-lunwind \
		#
		# --sysroot=$KISS_ROOT \
		# -Wl,-z,relro -Wl,--build-id
		# Depends on LLVM_ENABLE_PER_TARGET_RUNTIME_DIR. Might doesn't exist yet, won't pass test
		# -Wl,-L $RESOURCE_DIR/lib/$LLVM_TARGET_TRIPLE \
		#
	# clang/cmake/caches/CrossWinToARMLinux.cmake
	# set(RUNTIMES_INSTALL_RPATH                "\\\$ORIGIN/../lib;${CMAKE_INSTALL_PREFIX}/lib")
		# -Wl,-rpath='\\\$ORIGIN/../lib' \
		# -Wl,-rpath='\\\$ORIGIN/../lib/clang/$version_target/lib/linux' \

		# [ "$toolchain_version_major" -lt 17 ] ||
		#   # ldflags="$ldflags --opaque-pointers=0 "
		#   cflags="$cflags -Wl,-mllvm,--opaque-pointers"

		# CMake Error at /tmp/$LOGNAME/kiss/proc/llvm-git/make/llvm/cmake/modules/HandleLLVMOptions.cmake:324 (message):
		#   Host compiler does not support '-fuse-ld=lld'
		# -fuse-ld=lld \

		# -nostdlib++ \
		# --sysroot=$SYSROOT \
		# -nodefaultlibs \
		# -nostartfiles \
		# /usr/lib/crtn.o \
		# /lib/Scrt1.o \
		# /lib/crti.o \
		# /lib/crtn.o \
		# $RESOURCE_DIR/lib/linux/libclang_rt.builtins-x86_64.a \
		# $RESOURCE_DIR/lib/linux/clang_rt.crtbegin-x86_64.o \
		# $RESOURCE_DIR/lib/linux/clang_rt.crtend-x86_64.o \

		# -nostdlib \
		# ld.lld: warning: cannot find entry symbol _start; not setting start address
		# --entry main \

		# glasnost clang version 14.0.3
		# Target: x86_64-unknown-linux-musl
		# Thread model: posix
		# InstalledDir: /usr/bin
		#  "/usr/bin/ld.lld" --sysroot=/ -pie -export-dynamic --eh-frame-hdr -m elf_x86_64 -export-dynamic \
		# -dynamic-linker /lib/ld-musl-x86_64.so.1 -o bin/llvm-nm \
		# //lib/../lib64/Scrt1.o \
		# //lib/../lib64/crti.o \
		# //lib/../lib64/crtn.o \

		# /opt/kiss/lib/../lib64/Scrt1.o /opt/kiss/lib/../lib64/crti.o /usr/lib/clang/14.0.3/lib/linux/clang_rt.crtbegin-x86_64.o
		# /usr/lib/clang/14.0.3/lib/linux/libclang_rt.builtins-x86_64.a
		# /usr/lib/clang/14.0.3/lib/linux/clang_rt.crtend-x86_64.o /opt/kiss/lib/../lib64/crtn.o

		# -L/usr/lib/clang/14.0.3/lib/linux \
		# -L/usr/lib \
		# -L//lib/../lib64 \
		# -L//usr/lib/../lib64 \
		# -L/usr/bin/../lib \
		# -L/usr/bin/../lib64 \
		# -L//lib \
		# -L//usr/lib -rpath=/tmp/$LOGNAME/kiss/proc/llvm/build/objects/bin/../lib \
		# -lc -lc++ -lexecinfo -lrt -ldl -lz -lm -lc++experimental -lpthread \
		# --color-diagnostics \
		# --gc-sections \
		# tools/llvm-nm/CMakeFiles/llvm-nm.dir/llvm-nm.cpp.o -rpath "../lib" lib/libLLVM-15.so \
		# -lc++ -lm /usr/lib/clang/14.0.3/lib/linux/libclang_rt.builtins-x86_64.a \
		# -lpthread -lc /usr/lib/clang/14.0.3/lib/linux/libclang_rt.builtins-x86_64.a \

		cflags="$cflags \
-Wno-shift-op-parentheses \
"
		export cflags

		# Keep cxxflags including all cflags
		cxxflags="$cxxflags \
-Wno-shift-op-parentheses \
-Wno-unused-variable \
-Wno-ignored-attributes \
"
		export cxxflags

		# https://github.com/clangd/clangd/issues/495
		# -extra-arg="-ferror-limit x"
#   ldflags="$ldflags \
# -Wno-unknown-warning-option \
# "


		# If this is a cross, use a toolchain file
		# [ -z "${KISS_ROOT:+x}" ]  || {
		#     toolchain="-D CMAKE_TOOLCHAIN_FILE=$(realpath files/cmake.config)"
		#     bstoolchain="-D BOOTSTRAP_CMAKE_TOOLCHAIN_FILE=$(realpath files/cmake.config)"
		# }


		# llvm/CMakeLists.txt:152:set(LLVM_SUPPORTED_RUNTIMES "libc;libunwind;libcxxabi;pstl;libcxx;compiler-rt;openmp;llvm-libgcc")
		# Default set of runtimes
		# Supported runtimes are:
		# libc;libunwind;libcxxabi;pstl;libcxx;compiler-rt;openmp;llvm-libgcc
		#   Runtime "polly" is not a supported runtime.  Supported runtimes are:
		#   libc;libunwind;libcxxabi;pstl;libcxx;compiler-rt;openmp
		#   Runtime "bolt" is not a supported runtime.  Supported runtimes are:
		#   libc;libunwind;libcxxabi;pstl;libcxx;compiler-rt;openmp
		# runtimes="compiler-rt;libunwind;libcxxabi;libcxx;llvm-libgcc;pstl"
		runtimes="compiler-rt;libunwind;libcxxabi;libcxx;pstl"

		# -- clang project is enabled
		# -- clang-tools-extra project is enabled
		# -- lld project is enabled
		# -- polly project is enabled

		# -- bolt project is disabled
		# -- compiler-rt project is disabled
		# -- cross-project-tests project is disabled
		# -- libc project is disabled
		# -- libclc project is disabled
		# -- libcxx project is disabled
		# -- libcxxabi project is disabled
		# -- libunwind project is disabled
		# -- lldb project is disabled
		# -- mlir project is disabled
		# -- openmp project is disabled # but it should be a runtime component
		# -- pstl project is disabled
		# -- flang project is disabled
		# echo "\$KISS_XHOST_ARCH = $KISS_XHOST_ARCH"
		// log '$KISS_XHOST_ARCH' "$KISS_XHOST_ARCH"

		determine_target() {
			_level_2
			local runtimes_list=";${runtimes};"

			# Determine targets for architecture
			case "$KISS_XHOST_ARCH" in
				aarch64_be)  TARGET_ARCH="AArch64" libname="aarch64_be" ;;
				aarch64)     TARGET_ARCH="AArch64" libname="aarch64"
					[ -z "${runtimes_list##*";openmp;"*}" ] ||
					runtimes="${runtimes};openmp" ;;
				armv7)       TARGET_ARCH="ARMv7"   libname="armhf" ;;
				i686)        TARGET_ARCH="X86"     libname="i386" ;;
				powerpc64)   TARGET_ARCH="PowerPC" libname="powerpc64"
					[ -z "${runtimes_list##*";openmp;"*}" ] ||
					runtimes="${runtimes};openmp" ;;
				powerpc64le) TARGET_ARCH="PowerPC" libname="powerpc64le"
					[ -z "${runtimes_list##*";openmp;"*}" ] ||
					runtimes="${runtimes};openmp" ;;
				powerpcle)   TARGET_ARCH="PowerPC" libname="powerpcle" ;;
				powerpc)     TARGET_ARCH="PowerPC" libname="powerpc" ;;
				riscv64)     TARGET_ARCH="RISCV64" libname="riscv64" ;;
				x86_64)      TARGET_ARCH="X86_64"  libname="x86_64"

					LLVM_TARGET_TRIPLE="$libname-$target_os_name_lower-$KISS_XHOST_ABI"
					LLVM_DEFAULT_TARGET_TRIPLE="$LLVM_TARGET_TRIPLE"
					CMAKE_CROSSCOMPILING="OFF"
					[ -z "${KISS_ROOT:+x}" ] &&
					[ "$LLVM_TARGET_TRIPLE" = "$KISS_XHOST_TRIPLE" ] ||
						CMAKE_CROSSCOMPILING="ON"

					[ -z "${runtimes_list##*";openmp;"*}" ] ||
					runtimes="${runtimes};openmp"
					# https://community.arm.com/arm-community-blogs/b/tools-software-ides-blog/posts/compiler-flags-across-architectures-march-mtune-and-mcpu
					# // RUN:     --target=x86_64-pc-linux-musl \
					# // RUN:     --target=x86_64-unknown-linux-musl \
					[ -z "${cflags##*"-mtune=native "*}" ] ||
					cflags="-mtune=native $cflags"
					[ -z "${cflags##*"-march=x86-64 "*}" ] ||
					cflags="-march=x86-64 $cflags"
					[ -z "${cflags##*"--target=$LLVM_TARGET_TRIPLE "*}" ] ||
					cflags="--target=$LLVM_TARGET_TRIPLE $cflags"
					# _LIBUNWIND_IS_NATIVE_ONLY specific
					# [ -z "${cflags##*" -D _LIBUNWIND_TARGET_X86_64 "*}" ] ||
					# cflags="$cflags -D _LIBUNWIND_TARGET_X86_64 "
					[ -z "${cflags##*" -D __x86_64__ "*}" ] ||
					cflags="$cflags -m64 -D __x86_64__ -U __USING_SJLJ_EXCEPTIONS__"
					export cflags
					# avoid exhausting memory limit
					ldflags="$ldflags -Wl,--no-keep-memory"
					export ldflags
					# clang++: error: unsupported option '-mcpu=' for target 'x86_64-linux-musl'
					# cxxflags="--target=$LLVM_TARGET_TRIPLE -mcpu=x86-64 -march=x86-64 -mtune=native $cxxflags"
					[ -z "${cxxflags##*"-mtune=native "*}" ] ||
					cxxflags="-mtune=native $cxxflags"
					[ -z "${cxxflags##*"-march=x86-64 "*}" ] ||
					cxxflags="-march=x86-64 $cxxflags"
					[ -z "${cxxflags##*"--target=$LLVM_TARGET_TRIPLE "*}" ] ||
					cxxflags="--target=$LLVM_TARGET_TRIPLE $cxxflags"
					# _LIBUNWIND_IS_NATIVE_ONLY specific
					# [ -z "${cxxflags##*" -D _LIBUNWIND_TARGET_X86_64 "*}" ] ||
					# cxxflags="$cxxflags -D _LIBUNWIND_TARGET_X86_64 "
					[ -z "${cxxflags##*" -D __x86_64__ "*}" ] ||
					cxxflags="$cxxflags -m64 -D __x86_64__ -U __USING_SJLJ_EXCEPTIONS__"
					export cxxflags
					;;
				*) # echo "Unsupported platform: $KISS_XHOST_ARCH"; exit 1;;
				// log '$KISS_XHOST_ARCH' "'$KISS_XHOST_ARCH' not supported"
			esac
			export TARGET_ARCH
			export libname
			export LLVM_DEFAULT_TARGET_TRIPLE
			export LLVM_TARGET_TRIPLE
			export CMAKE_CROSSCOMPILING
			// log '$LLVM_DEFAULT_TARGET_TRIPLE' "$LLVM_DEFAULT_TARGET_TRIPLE"
			// log '$LLVM_TARGET_TRIPLE' "$LLVM_TARGET_TRIPLE"
			// log '$CMAKE_CROSSCOMPILING' "$CMAKE_CROSSCOMPILING"

		}

		# Global variables exported
		// determine_target

		# -- LLVM host triple: x86_64-linux-musl
		# -- LLVM default target triple: x86_64-linux-musl

		# case "$TARGET_ARCH" in
		#     x86)
		#         ldflags="$ldflags -Wl,--no-keep-memory"
		#         export ldflags
		#         CFLAGS="$cflags"
		#         export CFLAGS
		#         // log '$CFLAGS' "$CFLAGS"
		#         ;; # avoid exhausting memory limit
		# esac


		# Capital flags carrying the stages resources

		# CFLAGS=" $cflags "
		# stage2 does not like this
		CFLAGS=" \
-isystem $RESOURCE_DIR/include \
-isystem $SYSROOT/$INSTALL_PREFIX/include \
"

		# If a standard system include directory, or a directory specified with -isystem, is also specified with -I, the -I option is ignored.
		# case "$toolchain_prefix" in *"$DESTDIR/$INSTALL_PREFIX"*)
		case "$CFLAGS" in *"-isystem $XHOST_PREFIX/include"*)
			;;
		*)
			CFLAGS=" \
$CFLAGS \
-isystem $XHOST_PREFIX/include \
"
		esac
		# esac

			CFLAGS=" \
$CFLAGS \
$cflags \
"

		# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/llvm_libc_wrappers \
		# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include \
		# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/openmp_wrappers \
		# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/cuda_wrappers \
		# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/ppc_wrappers \
		# -isystem $OUTPUT_DIR/runtimes/runtimes-bins/pstl/generated_headers \
		# -isystem $MAKE_DIR/pstl/include \
		# -isystem $MAKE_DIR/clang/lib/Headers \

		#   cflags="$cflags \
		# -isystem $KISS_ROOT/$INSTALL_PREFIX/include \
		# "

		CFLAGS="$CFLAGS \
-resource-dir=$RESOURCE_DIR \
-B$BINDIR_HOST \
"

		export CFLAGS

		# echo "\$CFLAGS = $CFLAGS"
		// log '$CFLAGS' "$CFLAGS"


		# CXXFLAGS=" $cxxflags "
		# stage2 does not like this
		CXXFLAGS=" \
-isystem $SYSROOT/$INSTALL_PREFIX/include/$LLVM_TARGET_TRIPLE/c++/v1 \
-isystem $SYSROOT/$INSTALL_PREFIX/include/c++/v1 \
-isystem $RESOURCE_DIR/include \
-isystem $SYSROOT/$INSTALL_PREFIX/include \
"
# $RESOURCE_DIR/include must not be duplicated in CXXFLAGS
# "compiler-rt/lib/sanitizer_common/tests" does not want to have this issue
# Nor "tools/clang/tools/extra/clang-tidy"
# -isystem $OUTPUT_DIR/lib/clang/$version_system/include \
# -isystem $RESOURCE_DIR/include \

		# -isystem $OUTPUT_DIR/include/$LLVM_DEFAULT_TARGET_TRIPLE/c++/v1 \
		# -isystem $DESTDIR/$INSTALL_PREFIX/lib/clang/$version_target_major/include/c++/v1 \
		# -isystem $OUTPUT_DIR/include/c++/v1 \
		#
		# -isystem $MAKE_DIR/libcxx/include \
		#
		# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/llvm_libc_wrappers \
		# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include \
		# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/openmp_wrappers \
		# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/cuda_wrappers \
		# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/ppc_wrappers \
		# -isystem $OUTPUT_DIR/runtimes/runtimes-bins/pstl/generated_headers \
		#
		# -isystem $MAKE_DIR/pstl/include \
		# -isystem $MAKE_DIR/clang/lib/Headers \

		# cxxflags="$cxxflags \
		# -isystem $KISS_ROOT/$INSTALL_PREFIX/include \
		# "

		# Don't set global paths, otherwise no one piece of code will be built
		# ninja: subcommands failed
		# -isystem $KISS_ROOT/$INSTALL_PREFIX/include/c++/v1 \
		# -isystem $OUTPUT_DIR/include/$LLVM_DEFAULT_TARGET_TRIPLE/c++/v1 \
		# -isystem $DESTDIR/$INSTALL_PREFIX/lib/clang/$version_target_major/include/c++/v1 \
		# -isystem $DESTDIR/$INSTALL_PREFIX/include/c++/v1 \
		# -isystem $OUTPUT_DIR/include/c++/v1 \
		# -isystem $MAKE_DIR/libcxx/include \
		# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/openmp_wrappers \
		# -isystem $MAKE_DIR/clang/lib/Headers \
		# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include \
		# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/openmp_wrappers \
		# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/cuda_wrappers \
		# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/llvm_libc_wrappers \
		# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/ppc_wrappers \
		# -isystem $OUTPUT_DIR/runtimes/runtimes-bins/pstl/generated_headers \
		# -isystem $MAKE_DIR/pstl/include \
		# -isystem $MAKE_DIR/clang/lib/Headers \
		# -isystem $KISS_ROOT/$INSTALL_PREFIX/include \

		# -isystem $DESTDIR/$INSTALL_PREFIX/include/c++/v1 \
		# -isystem $MAKE_DIR/libcxx/include \
		# -isystem $MAKE_DIR/clang/test/Modules/Inputs/libc-libcxx/sysroot/usr/include \
		# -isystem $MAKE_DIR/clang/test/Modules/Inputs/libc-libcxx/sysroot/usr/include/c++/v1 \

		# libcxxabi in-tree build will fail
		# -isystem $KISS_ROOT/$INSTALL_PREFIX/include/c++/v1 \

		# case "$toolchain_prefix" in *"$DESTDIR/$INSTALL_PREFIX"*)
		case "$CXXFLAGS" in *"-isystem $XHOST_PREFIX/include"*)
			;;
		*)
			CXXFLAGS=" \
$CXXFLAGS \
-isystem $XHOST_PREFIX/include \
"
		esac
		# esac


			CXXFLAGS=" \
$CXXFLAGS \
$cxxflags  \
"

			CXXFLAGS="$CXXFLAGS \
-resource-dir=$RESOURCE_DIR \
-B$BINDIR_HOST \
"

		export CXXFLAGS

		# echo "\$CXXFLAGS = $CXXFLAGS"
		// log '$CXXFLAGS' "$CXXFLAGS"

		ldflags_no_libunwind="$(printf '%s' "$ldflags" | tr ' ' '\n' |
			grep -v "^--unwindlib=libunwind$" |
			grep -v "^-Wl,-lunwind$" |
			xargs)"
			# grep -v "^-lc++$" |
			# grep -v "^-lc++abi$" |

		ldflags_no_libunwind="$ldflags_no_libunwind \
--unwindlib=none \
"
		# ldflags_no_libunwind="$(printf '%s' "$ldflags_no_libunwind" |
		#   awk "gsub(/'\$ORIGIN/, \"'\\\\\$ORIGIN\")1"
		#   )"
		export ldflags_no_libunwind

		# LDFLAGS=" $ldflags "

		LDFLAGS=" \
-resource-dir=$RESOURCE_DIR \
"
		[ -d "$OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE" ] ||
			\mkdir -p "$OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE"
		[ -d "$DESTDIR/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE" ] ||
			// as_own "$DESTDIR" \
			\mkdir -p "$DESTDIR/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE"
		# [ ! -d "$RESOURCE_DIR/lib/$LLVM_TARGET_TRIPLE" ] ||
		LDFLAGS="$LDFLAGS \
-L $OUTPUT_DIR/lib/clang/$version_system/lib/$LLVM_DEFAULT_TARGET_TRIPLE \
-L $OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE \
-Wl,-rpath=XORIGIN/../lib/$LLVM_TARGET_TRIPLE \
"
# -Wl,-rpath='\\\$ORIGIN/../lib/$LLVM_TARGET_TRIPLE' \
# -L $DESTDIR/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE \

		# This is for compiler-rt libraries
		# RESOURCE_DIR == /working/kiss/proc/pkg/llvm/usr/lib/clang/18.0.0
		# /working/kiss/proc/extract/llvm/usr/lib/clang/18.0.0/lib/x86_64-linux-musl
		# /working/kiss/proc/extract/llvm/usr/lib/clang/18.0.0/lib/linux
		# $RESOURCE_DIR/lib/x86_64-linux-musl
		# $RESOURCE_DIR/lib/linux
		local compiler_rt_libraries="$RESOURCE_DIR/lib/$LLVM_TARGET_TRIPLE"
		[ ! -d  "$compiler_rt_libraries" ] ||
		LDFLAGS="$LDFLAGS \
-L $compiler_rt_libraries \
-Wl,-rpath=XORIGIN/../lib/clang/$version_target/lib/$LLVM_TARGET_TRIPLE \
"
# -Wl,-rpath='\\\$ORIGIN/../lib/clang/$version_system/lib/$LLVM_TARGET_TRIPLE' \
		# For history compatibility
		local compiler_rt_libraries_fake="$RESOURCE_DIR/lib/linux"
		[ ! -d "$compiler_rt_libraries_fake" ] ||
		LDFLAGS="$LDFLAGS \
-L $compiler_rt_libraries_fake \
-Wl,-rpath=XORIGIN/../lib/clang/$version_target/lib/linux \
"

		[ ! -z "${SYSROOT_LIB##*"$DESTDIR"*}" ] ||
		[ -d "$SYSROOT_LIB/$LLVM_TARGET_TRIPLE" ] ||
		// as_own "$SYSROOT_LIB" \
		\mkdir -p "$SYSROOT_LIB/$LLVM_TARGET_TRIPLE"

		[ ! -d "$SYSROOT_LIB/$LLVM_TARGET_TRIPLE" ] ||
			# [ "$(readlink -fn "$SYSROOT_LIB/$LLVM_TARGET_TRIPLE")" \
			# = "$DESTDIR/$INSTALL_PREFIX/lib" ] ||
		LDFLAGS="$LDFLAGS \
-L $SYSROOT_LIB/$LLVM_TARGET_TRIPLE \
"

		LDFLAGS="$LDFLAGS \
-L $SYSROOT_LIB \
-Wl,-rpath=XORIGIN/../lib \
"

		CCACHE_DIR="$CCACHE_DIR_ORIGIN/build/$version_system"
		[ -z "${CCACHE_DIR##*"$KISS_ROOT"*}" ] &&
		CCACHE_DIR="$CCACHE_DIR_ORIGIN/host/$version_system"
		[ -z "${CCACHE_DIR##*"$DESTDIR/$INSTALL_PREFIX"*}" ] &&
		CCACHE_DIR="$CCACHE_DIR_ORIGIN/target/$version_system"
		export CCACHE_DIR
		[ -d "$CCACHE_DIR" ] ||
			// as_own "$CCACHE_ROOT" \
			\mkdir -p "$CCACHE_DIR"
		// log '$CCACHE_DIR' "$CCACHE_DIR"

		# [ "$SYSROOT_LIB" !=   "$DESTDIR/$INSTALL_PREFIX/lib" ] || {
			# path_prepend LIBRARY_PATH    "$SYSROOT_LIB"

			path_prepend LIBRARY_PATH      "$toolchain_prefix/lib"
			path_prepend LIBRARY_PATH      "$toolchain_prefix/lib/$LLVM_TARGET_TRIPLE"

			# path_prepend LIBRARY_PATH    "$DESTDIR/$INSTALL_PREFIX/lib"
			# path_prepend LIBRARY_PATH    "$DESTDIR/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE"

			# path_prepend LIBRARY_PATH    "$OUTPUT_DIR/lib"
			# path_prepend LIBRARY_PATH    "$OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE"

			# local ld_library_path=":$LD_LIBRARY_PATH:"
			# [ -z "${ld_library_path##*":$SYSROOT/$INSTALL_PREFIX/lib:"*}" ] ||
			# path_prepend LD_LIBRARY_PATH "$SYSROOT_LIB"
			# path_prepend LD_LIBRARY_PATH "$SYSROOT/$INSTALL_PREFIX/lib"
			# [ ! -z "${LD_LIBRARY_PATH:+x}" ] &&
			# [ -z "${LD_LIBRARY_PATH##"$SYSROOT/$INSTALL_PREFIX/lib:"*}" ] ||
			# export LD_LIBRARY_PATH="$SYSROOT/$INSTALL_PREFIX/lib${LD_LIBRARY_PATH:+":${LD_LIBRARY_PATH}"}"

			# path_prepend LD_LIBRARY_PATH "$KISS_ROOT/$INSTALL_PREFIX/lib"
			# /working/kiss/proc/extract/llvm/usr/lib
			# /working/kiss/proc/pkg/llvm/usr/lib

			path_prepend LD_LIBRARY_PATH   "$toolchain_prefix/lib"
			# path_prepend LD_LIBRARY_PATH "$DESTDIR/$INSTALL_PREFIX/lib"

			# /working/kiss/proc/extract/llvm/usr/lib/x86_64-linux-musl
			# /working/kiss/proc/pkg/llvm/usr/lib/x86_64-linux-musl
			# For libc++/libc++experimental/libc++abi/libunwind

			path_prepend LD_LIBRARY_PATH   "$toolchain_prefix/lib/$LLVM_TARGET_TRIPLE"
			# path_prepend LD_LIBRARY_PATH "$DESTDIR/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE"

			# path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/lib"
			# path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE"
			# export LIBRARY_PATH
			// log '$LIBRARY_PATH' "$LIBRARY_PATH"
			# export LD_LIBRARY_PATH
			// log '$LD_LIBRARY_PATH' "$LD_LIBRARY_PATH"

			path_prepend LD_RUN_PATH       "$toolchain_prefix/lib"
			path_prepend LD_RUN_PATH       "$toolchain_prefix/lib/$LLVM_TARGET_TRIPLE"
			# path_prepend LD_RUN_PATH     "$DESTDIR/$INSTALL_PREFIX/lib"
			# path_prepend LD_RUN_PATH     "$DESTDIR/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE"

			// log '$LD_RUN_PATH' "$LD_RUN_PATH"
		# }

		path_prepend NATIVE_LD_LIBRARY_PATH "$NATIVE_DIR/$INSTALL_PREFIX/lib"
		[ -d "$NATIVE_DIR/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE" ] ||
			// as_own "$NATIVE_DIR" \
			\mkdir -p "$NATIVE_DIR/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE"
		path_prepend NATIVE_LD_LIBRARY_PATH "$NATIVE_DIR/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE"
		# path_prepend NATIVE_LD_LIBRARY_PATH "$OUTPUT_DIR/NATIVE/lib"
		# path_prepend NATIVE_LD_LIBRARY_PATH "$OUTPUT_DIR/NATIVE/lib/$LLVM_TARGET_TRIPLE"

		LDFLAGS="$LDFLAGS $ldflags "
		LDFLAGS="$LDFLAGS \
-lc++ \
-lc++abi \
"
		export LDFLAGS

		LDFLAGS_NO_LIBUNWIND="$(printf '%s' "$LDFLAGS" | tr ' ' '\n' |
			grep -v "^--unwindlib=libunwind$" |
			grep -v "^-Wl,-lunwind$" |
			xargs)"
			# grep -v "^-lc++$" |
			# grep -v "^-lc++abi$" |

		LDFLAGS_NO_LIBUNWIND="$LDFLAGS_NO_LIBUNWIND \
--unwindlib=none \
"
		# LDFLAGS_NO_LIBUNWIND="$(printf '%s' "$LDFLAGS_NO_LIBUNWIND" |
		#   awk "gsub(/'\$ORIGIN/, \"'\\\\\$ORIGIN\")1"
		#   )"
		export LDFLAGS_NO_LIBUNWIND

		// log '$LDFLAGS' "$LDFLAGS"

		# printf "$RS%s" "$toolchain_prefix"

		TOOLCHAIN_PREFIX="$toolchain_prefix"
		export TOOLCHAIN_PREFIX

	}

	{
		[ -f "$XBUILD_PREFIX/bin/cc" ] &&
		[ -f "$XBUILD_PREFIX/bin/c++" ] &&
		command -v "$XBUILD_PREFIX/bin/cc" > /dev/null 2>&1 &&
		command -v "$XBUILD_PREFIX/bin/c++" > /dev/null 2>&1
	} ||
		// die 'compilers' "do not exist (just make sure a real compiler exists)"
	# toolchain_prefix="$(// delegate tool_chain "/$INSTALL_PREFIX" "$(which cc)" "$(which c++)")"
	# // tool_chain "/$INSTALL_PREFIX" "bin/cc" "bin/c++"
	// tool_chain "$XBUILD_PREFIX" "bin/cc" "bin/c++"
	# // tool_chain "/$INSTALL_PREFIX" "bin/clang" "bin/clang++"

	# kiss will do this before new build
	# [ ! -d "$OUTPUT_DIR" ] ||
	# find "$OUTPUT_DIR" -mindepth 1 -maxdepth 1 -exec \rm -rf {} +

	# Note that you do not wnat to completely depend on these options
	# because it might be overridden by projects settings

	# builtins_flags_list="$newline"

	entry_template() {
		local key_type="$1"
		local key_name="$2"
		local key_value="$3"
		local permanent="${4-}"

		local new_entry=

		case "$key_type" in
			"BOOL")
				[ -z "${permanent:+x}" ] &&
				new_entry="option ( $key_name \"\" $key_value )" ||
				new_entry="set ( $key_name \"$key_value\" CACHE $key_type \"\" )"
				;;
			"STRING"|"INTERNAL")
				new_entry="set ( $key_name \"$key_value\" CACHE $key_type \"\" )"
		esac
		printf "$RS%s" "$new_entry"
	}

	item_outdated() (
		# local list="$1"
		# local file_path="$1"
		local item="$1"
		shift 1
		local key_type="$1"
		local key_name="$2"
		local key_value="$3"
		local permanent="${4-}"
		local new_entry=
		local outdated=1
		# local item=

		local ifs="$IFS"
		local IFS=$'\n'

		# for item in $list; do
		# while read -r item || [ ! -z "$item" ]; do
		#   [ ! -z "${item:+x}" ] || continue

		#   local item_name="$(printf '%s\n' "$item" | awk -F " " "{print \$3}")"

		#   [ "$item_name" = "$key_name" ] || continue

		new_entry="$(// delegate -- entry_template "$key_type" "$key_name" "$key_value" "$permanent")"
			# case "$key_type" in
			#   "BOOL")
			#       new_entry="option ( $key_name \"\" $key_value )"
			#       # local item_value="$(printf '%s\n' "$item" | awk -F " " "{print \$5}")"
			#       ;;
			#   "STRING")
			#       new_entry="set ( $key_name \"$key_value\" CACHE STRING \"\" )"
			#       # local item_value="$(printf '%s\n' "$item" | awk -F " " "{print \$4}")"
			# esac

			# [ "$item_value" != "$key_value" ] || continue
			# [ "$item_value" = "$key_value" ] ||
			[ "$new_entry" = "$item" ] ||
			outdated=0
		#   break
		# done < "$runtimes_cmake"
		# done < "$file_path"

		IFS="$ifs"

		return $outdated
	)

	# item_outdated() (
	#   local list="$1"
	#   local key_element="$2"
	#   local outdated=1
	#   local item=
	#   for item in $list; do
	#       case "${item}" in
	#           *"$key_element"*)
	#               # These two keys will get the same "outdated=0"
	#               # RUNTIMES_x86_64-linux-musl_LLVM_TARGET_TRIPLE_ENV
	#               # RUNTIMES_x86_64-linux-musl_LLVM_TARGET_TRIPLE
	#               outdated=0
	#               break
	#               ;;
	#           *)
	#               continue
	#       esac
	#   done
	#   return $outdated
	# )

	update_builtins_flags() {
		local target_file="$1"
		# local target_file_copy="$2"
		# shift 2
		shift 1
		local option="$1"

		case "$option" in *"-C"*) return 0; esac

		local key="$2"
		# local key_type="$2"
		# local key_name="$3"
		[ -z "${key##*":"*}" ] && {
			local key_type="${key##*\:}"
			local key_name="${key%%\:*}"
		} || {
			local key_type=""
			local key_name="$key"
		}

		case "$key_name" in *"CMAKE_TOOLCHAIN_FILE"*) return 0; esac

		local key_value="$3"
		local permanent="${4-}"

		[ ! -z "${key_type:+x}" ] || {
			local key_value_lower="$(printf '%s' "$key_value" | tr '[A-Z]' '[a-z]')"
			# case "$key_value" in
			case "$key_value_lower" in
				# "ON"|"OFF"|"Yes"|"No"|"True"|"False")
				"on"|"off"|"yes"|"no"|"true"|"false")
					key_type="BOOL"
					;;
				*)
					key_type="STRING"
			esac
		}
		[ ! -z "${key_type:+x}" ] || // die '$key_type' "not defined"

		local new_entry=
		new_entry="$(// delegate -- entry_template "$key_type" "$key_name" "$key_value" "$permanent")"

		local ifs=$IFS
		local IFS=$'\n'
		local item

		# local item="$(awk -v key_name="$key_name" "\$3 == key_name { print }" < "$target_file_copy")"
		local item="$(awk -v key_name="$key_name" "\$3 == key_name { print }" < "$target_file")"


		# local outdated=1
		# local key_value_origin=
		# case "$key_type" in
		#   "BOOL")
		#       key_value_origin="$(printf '%s\n' "$item" | awk -F " " "{print \$5}")"
		#       ;;
		#   "STRING")
		#       key_value_origin="$(printf '%s\n' "$item" | awk -F " " "{print \$4}")"
		# esac
		# [ "$key_value_origin" = "$key_value" ] ||
		#   outdated=0
		[ -z "${item:+x}" ] && {
			# builtins_flags_list="${new_entry}$newline${builtins_flags_list}"
			# printf '%s\n' "$new_entry" | // as_own "${target_file%/*}" tee -a "$target_file" > /dev/null ||
			# printf '%s\n' "$new_entry" | tee -a "$target_file" > /dev/null ||
			printf '%s\n' "$new_entry" >> "$target_file" ||
			// die '$new_entry' "'$new_entry' insert failed"
		} || [ "$item" = "$new_entry" ] || {

		# item_outdated "$builtins_flags_list" "$key_type" "$key_name" "$key_value" && {
		# item_outdated "$runtimes_cmake" "$key_type" "$key_name" "$key_value" && {
		# item_outdated "$item" "$key_type" "$key_name" "$key_value" && {
		# [ ! -z "${item:+x}" ] &&
		# [ "$outdated" -eq "1" ] || {
			# // log '$key_name' "'$key_name' outdated"
			// log 'updating' "$key_name"

			# case "$key_type" in
			#   "BOOL")
			#       // as_own "$target_file" \
			#           sed -e "/option ( $key_name \"\" /s/.*\ )/$key_value\ )/" < "$target_file" > _ ||

			#           # awk "/$key_name/{ gsub(/$key_value_origin/, \"$key_value\") }; { print }" < "$target_file" > _ ||
			#           // die '$new_entry' "'$new_entry' update failed"
			#       ;;
			#   "STRING")
			#       // as_own "$target_file" \
			#           sed -e "/set ( $key_name /s/\".*\" CACHE STRING \"\" )/\"$key_value\" CACHE STRING \"\" )/" < "$target_file" > _ ||
			#           // die '$new_entry' "'$new_entry' update failed"
			# esac

			# // as_own "${target_file%/*}" \
			# sed -e "/\b$key_name\b/d"  < "$target_file" > _ ||
			sed -i -e "/\b$key_name\b/d" "$target_file" ||
				# sed -E "/^$key_name$/,\$d"  < "$target_file" > _ ||
				// die '$new_entry' "'$new_entry' removing failed"

			# sed -e "s#$item#$new_entry#g" < "$target_file" > _ || // die '$new_entry' "'$new_entry' update failed"
			# // as_own "${target_file%/*}" \mv -f _ "$target_file"
			# \mv -f _ "$target_file"

			# printf '%s\n' "$new_entry" | // as_own "${target_file%/*}" tee -a "$target_file" > /dev/null ||
			# printf '%s\n' "$new_entry" | tee -a "$target_file" > /dev/null ||
			printf '%s\n' "$new_entry" >> "$target_file" ||
			  // die '$new_entry' "'$new_entry' insert failed"

			# local temp_list="$newline"
			# for item in $builtins_flags_list; do
			#   [ ! -z "${item:+x}" ] || continue

			#   local item_name="$(printf '%s\n' "$item" | awk -F " " "{print \$3}")"

			#   [ "$item_name" = "$key_name" ] && {
			#       // log '${new_entry}' "'${new_entry}' updated"
			#       temp_list="${new_entry}$newline${temp_list}"
			#   } ||
			#       temp_list="${item}$newline${temp_list}"

			# done
			# builtins_flags_list="$temp_list"
		}

		IFS=$ifs
	}

	CACHE_LIST=
	TOOLCHAIN_LIST=

	merge_cache() {
		local cache_file="$1"
		shift 1
		# local cache_list=
		local file_name item
		local duplicated=1
		set -- $*
		for item do
			# cache_list="${cache_list:+${cache_list} }$item"
			# local item_name_plain="$(name_plain "${item##*/}")"
			local item_name_plain="${item##*/}"
			item_name_plain="${item_name_plain%%\.*}"
			file_name="${file_name:+"${file_name}_"}${item_name_plain}"
			[ "$item" != "$cache_file" ] || duplicated=0
		done

		[ "$duplicated" -eq "0" ] || {
			# cache_list="${cache_list:+${cache_list} }$cache_file"

			set -- "$@" "$cache_file"

			# local cache_name_plain="$(name_plain "${cache_file##*/}")"
			local cache_name_plain="${cache_file##*/}"
			cache_name_plain="${cache_name_plain%%\.*}"
			file_name="${file_name:+"${file_name}_"}${cache_name_plain}"
		}

		local out_put="$MAKE_DIR/files/$file_name"
		touch "$out_put"
		: > "$out_put"
		# for item in $cache_list; do
		for item do
			cat "$item" | as_own "$out_put" tee -a "$out_put" > /dev/null
		done
		# printf "$RS%s$FS%s" "$out_put" "$cache_list"
		printf "$RS%s$FS%s" "$out_put" "$*"
	}

	# Usage:
	# write_to_file "$runtimes_cmake" "$builtins_flags_list"
	[ -z "${KEEP_DEPRECATED+x}" ] ||
	write_to_file() {
		local target_file="$1"
		local builtins_flags_list="$2"
		printf '%s\n' "# Do not modify manually. Generated by code" | tee "$target_file" > /dev/null
		local ifs=$IFS
		local IFS=$'\n'
		local item
		for item in $builtins_flags_list; do
			printf '%s\n' "$item" | tee -a "$target_file" > /dev/null
		done
		IFS=$ifs
	}

	contains_key() {
		local list="$1"
		local option="$2"
		local key="$3"

		local result=1

		local ifs=$IFS
		local IFS=$'\n'

		# item == "option key"
		# item == "option key=\"value\""
		local item=
		for item in $list; do
			option_removed="${item#*"${option} "}"
			value_removed="${option_removed%%"="*}"
			[ "$value_removed" = "$key" ] || continue
			result=0
			break
		done

		IFS=$ifs

		return $result
	}

	deploy_combine() {
		_level_2
		local option="$1"
		local key="$2"
		local key_value="$3"
		local target_triple="$4"
		local permanent="$5"
		shift 4
		deploy "$option" "$key" "$key_value" "$permanent"
		# /usr/bin/kiss: local: line 2025: target: is read only
		# local target
		local target_name
		for target_name do
			// debug '$target_name' "$target_name" &
			case "$target_name" in
				# *"BUILTINS"*)
				"BUILTINS"|"RUNTIMES")
					# deploy "$option" "BUILTINS_${target_triple}_$key" "$key_value" "$permanent"
					deploy "$option" "${target_name}_${target_triple}_$key" "$key_value" "$permanent"
					# update_builtins_flags "$builtins_cmake" \
					#   "$option" "$key" "$key_value"
						# "$builtins_cmake.copy" \
					;;
				# *"RUNTIMES"*)
				#   deploy "$option" "RUNTIMES_${target_triple}_$key" "$key_value" "$permanent"
				#   # update_builtins_flags "$runtimes_cmake" \
				#   #   "$option" "$key" "$key_value"
				#       # "$runtimes_cmake.copy" \
				#       ;;
				# *"BOOTSTRAP"*)
				# "BOOTSTRAP")
				*)
					deploy "$option" "${target_name}_$key" "$key_value" "$permanent"
					# update_builtins_flags "$bootstrap_cmake" \
					#   "$option" "$key" "$key_value"
						# "$runtimes_cmake.copy" \
						;;
				# *)
				#   update_builtins_flags "$common_cmake" \
				#       "$option" "$key" "$key_value"
			esac
		done
	}

	# /usr/bin/ash: eval: /usr/bin/cmake: Argument list too long
	# How to avoid "Argument list too long" is the key here
	deploy() {
		_level_2
		local option="$1"
		local key="$2"
		[ -z "${3+x}" ] || local key_value="$3"
		# Store to some .cmake files to avoid command line parameters size exceed the limitation
		# But the policy has been changed to according to the $key name
		# So "force_to_file" was deprecatedd
		# local force_to_file="${4-}"
		# Cache in CMakeCache.txt
		local permanent="${4-}"

		[ "-D" != "$option" ] || {
			case "$key" in
				*"="*)
					[ ! -z "${key_value:+x}" ] || {
						key="${key%%=*}"
						key_value="${key##*=}"
						[ ! -z "${key:+x}" ] ||
							// die '=' "'$key' is not valid"
					}
			esac
		}

		if [ -z "${key_value+x}" ]; then
			# item == "option key"
			case "$option" in
				*"="*)
				// die '=' "is not needed but $option was"
			esac
			case "$key" in
				*"="*)
				// die '=' "is not needed but $key was"
			esac

			contains_key "$CMAKE_OPTIONS" "$option" "$key" ||
			# echo "$option $key \\"
			# CMAKE_OPTIONS="$CMAKE_OPTIONS $option $key"
			# CMAKE_OPTIONS="$CMAKE_OPTIONS$option $key \\$newline"
			CMAKE_OPTIONS="$CMAKE_OPTIONS$option $key \\$newline"
		else
			# item == "option key=\"value\""

			[ "-C" != "$option" ] ||
				// die '-C' "key_value is not needed"
			[ "-G" != "$option" ] ||
				// die '-G' "key_value is not needed"
			[ "-B" != "$option" ] ||
				// die '-B' "key_value is not needed"
			[ "-S" != "$option" ] ||
				// die '-S' "key_value is not needed"

			case "$key" in
				*"="*)
					key="${key%%=*}"
					[ ! -z "${key:+x}" ] ||
						// die '=' "'$key' is not valid"
			esac

			# echo "$option $key=\"$key_value\" \\"
			local just_updated_fo_file=1

			update_builtins_flags_to_file() {
				case "$key_name" in
					*"BUILTINS"*)
						update_builtins_flags "$builtins_cmake" \
							"$option" "$key" "$key_value" "$permanent"
							# "$builtins_cmake.copy" \
						;;
					*"RUNTIMES"*)
						update_builtins_flags "$runtimes_cmake" \
							"$option" "$key" "$key_value" "$permanent"
							# "$runtimes_cmake.copy" \
							;;
					*"BOOTSTRAP"*)
						update_builtins_flags "$bootstrap_cmake" \
							"$option" "$key" "$key_value" "$permanent"
							# "$runtimes_cmake.copy" \
							;;
					*)
						update_builtins_flags "$common_cmake" \
							"$option" "$key" "$key_value" "$permanent"
				esac
				just_updated_fo_file=0
			}

			local key_type="${key##*\:}"
			local key_name="${key%%\:*}"

			case "$key_value" in
				*"\$ENV{"*"}"*)
					# local value_header="${key_value%%"\$ENV"*}"
					#
					# set -x found infinite looping
					# This is a kiss bug which does not clear ENV=/usr/bin/kiss in the shell environment, and fixed
					#
					# And furthermore, using update_builtins_flags to store it to the runtimes.cmake
					local key_value_encoded="$( \
						// delegate -- bicode "edoc" "$key_value" "\\\$ENV" "\$ENV")"
					// log 'value encoded' "$key_value_encoded"
					key_value="$key_value_encoded"
					# CMAKE_OPTIONS="${CMAKE_OPTIONS-} $option $key=\""$key_value_encoded"\" \\$newline"
					#
					[ "$just_updated_fo_file" -eq "0" ] ||
					update_builtins_flags_to_file
					;;
				*)
					case "$key_name" in
						*"$LLVM_TARGET_TRIPLE"*|*"ENV{"*"}"*)
							[ "$just_updated_fo_file" -eq "0" ] ||
							update_builtins_flags_to_file
							;;
						"")
							;;
						*)
							contains_key "$CMAKE_OPTIONS" "$option" "$key" ||
							# CMAKE_OPTIONS="$CMAKE_OPTIONS $option $key=\"$key_value\""
							# CMAKE_OPTIONS="$CMAKE_OPTIONS$option $key=\"$key_value\" \\$newline"
							CMAKE_OPTIONS="$CMAKE_OPTIONS$option $key=\""$key_value"\" \\$newline"
					esac
			esac

			case "$key_name" in
				# *"-"*)
				# case "$key_name" in
				*"$LLVM_TARGET_TRIPLE"*|*"ENV{"*"}"*)
					[ "$just_updated_fo_file" -eq "0" ] ||
						update_builtins_flags_to_file
					;;
				# esac
				#   ;;
				*"-"*)
					;;
				"")
					;;
				*)
					(unset $key_name 2> /dev/null) &&
					# eval "export ${key_name}=\"$key_value\""
					/ "export $key_name=\"$key_value\"" || {
						/ "export $key_name"
						# // war '$key_name' "$key_name"
						# // war '$key_value' "$key_value"
						# # exit 1
						# kill 0
					}
					[ "$just_updated_fo_file" -eq "0" ] ||
						update_builtins_flags_to_file
			esac

			# [ -z "${force_to_file:+x}" ] ||
			[ -z "${permanent:+x}" ] ||
			[ "$just_updated_fo_file" -eq "0" ] ||
				update_builtins_flags_to_file
		fi
	}

	common_options_init() {
		_level_2
		local toolchain_prefix="$1"

		local sysroot="$(// delegate -- to_sysroot "$toolchain_prefix")"
		local version_system="$(// delegate to_version "$sysroot/$INSTALL_PREFIX")"

		# // log  'cmake' "clear cache"
		# find $OUTPUT_DIR -mindepth 1 -maxdepth 1 -exec \rm -rf {} +
		find . -type f -name CMakeCache.txt -delete

		# touch "$MAKE_DIR/cache.cmake"
		# for item in $(find . -type f -name CMakeCache.txt); do
		#   // log '$item' "$item"
		#   # [ -z "${item##*"NATIVE"*}" ] ||
		#   echo "$(cat "$item")" >> "$MAKE_DIR/cache.cmake" > /dev/null
		# done

		# CMAKE_OPTIONS="$CMAKE \\$newline"
		CMAKE_OPTIONS=

		deploy "-G" "\"$GENERATOR_TYPE\""
		deploy "-B" "\"$OUTPUT_DIR\""

		! // || / `merge_cache "$color_config" $TOOLCHAIN_LIST |
			awk -v rs="$RS" -v fs="$FS" 'BEGIN { FS = fs; RS = rs } \
		END { print "TOOLCHAIN_FILES=\""$1"\"; TOOLCHAIN_LIST=\""$2"\"" }' ||
		printf '%s\n' "return 1"`

		# deploy "-P" "color.cmake"
		deploy "-D" "CMAKE_TOOLCHAIN_FILE" "$TOOLCHAIN_FILES"
		// log '$TOOLCHAIN_LIST' "$TOOLCHAIN_LIST"

		deploy_combine "-D" "IMPLICIT_INCLUDE_DIRECTORIES" "OFF" "permanent" \
			"$LLVM_TARGET_TRIPLE" "BUILTINS" "RUNTIMES" "BOOTSTRAP"

		deploy_combine "-D" "__UNIX_PATHS_INCLUDED"      "ON" "permanent" \
			"$LLVM_TARGET_TRIPLE" "BUILTINS" "RUNTIMES" "BOOTSTRAP"

		deploy "-D" "KISS_ROOT"                          "$KISS_ROOT"

		[ -z "${KISS_ROOT:+x}" ] || {
			# "Argument list too long" might not the exact info
			# /usr/bin/ash: /var/db/kiss/lm/underconstruction/llvm/build: sed: Argument list too long
			# /usr/bin/ash: /var/db/kiss/lm/underconstruction/llvm/build: realpath: Argument list too long
			# /usr/bin/ash: eval: /usr/bin/cmake: Argument list too long

			deploy_combine "-D" "CMAKE_CROSSCOMPILING"   "$CMAKE_CROSSCOMPILING" "permanent" \
				"$LLVM_TARGET_TRIPLE" "BUILTINS" "RUNTIMES" "BOOTSTRAP"

			# Deprecated
			# deploy "-D" "DEFAULT_SYSROOT"              "$SYSROOT"
			# https://gcc.gnu.org/onlinedocs/gcc/Directory-Options.html
			# Same as "-isysroot some_where" (for headers if use both "-isysroot " and "--sysroot=")
			# "--sysroot=some_where" (for both headers and linker)
			# deploy_combine "-D" "CMAKE_SYSROOT"          "" "permanent" \
			deploy_combine "-D" "CMAKE_SYSROOT"          "$KISS_ROOT" "permanent" \
				"$LLVM_TARGET_TRIPLE" "BUILTINS" "RUNTIMES" "BOOTSTRAP"

			deploy_combine "-D" "CMAKE_SYSROOT_COMPILE"  "$KISS_ROOT" "permanent" \
				"$LLVM_TARGET_TRIPLE" "BUILTINS" "RUNTIMES" "BOOTSTRAP"

			deploy_combine "-D" "_CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES_INIT" "" "permanent" \
				"$LLVM_TARGET_TRIPLE" "BUILTINS" "RUNTIMES" "BOOTSTRAP"
			deploy_combine "-D" "CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES" "" "permanent" \
				"$LLVM_TARGET_TRIPLE" "BUILTINS" "RUNTIMES" "BOOTSTRAP"

			deploy_combine "-D" "_CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES_INIT" "" "permanent" \
				"$LLVM_TARGET_TRIPLE" "BUILTINS" "RUNTIMES" "BOOTSTRAP"
			deploy_combine "-D" "CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES" "" "permanent" \
				"$LLVM_TARGET_TRIPLE" "BUILTINS" "RUNTIMES" "BOOTSTRAP"

			deploy_combine "-D" "_CMAKE_CUDA_IMPLICIT_INCLUDE_DIRECTORIES_INIT" "" "permanent" \
				"$LLVM_TARGET_TRIPLE" "BUILTINS" "RUNTIMES" "BOOTSTRAP"
			deploy_combine "-D" "CMAKE_CUDA_IMPLICIT_INCLUDE_DIRECTORIES" "" "permanent" \
				"$LLVM_TARGET_TRIPLE" "BUILTINS" "RUNTIMES" "BOOTSTRAP"

			deploy_combine "-D" "_CMAKE_ASM_IMPLICIT_INCLUDE_DIRECTORIES_INIT" "" "permanent" \
				"$LLVM_TARGET_TRIPLE" "BUILTINS" "RUNTIMES" "BOOTSTRAP"
			deploy_combine "-D" "CMAKE_ASM_IMPLICIT_INCLUDE_DIRECTORIES" "" "permanent" \
				"$LLVM_TARGET_TRIPLE" "BUILTINS" "RUNTIMES" "BOOTSTRAP"

			deploy_combine "-D" "CMAKE_INCLUDE_PATH" "" "permanent" \
				"$LLVM_TARGET_TRIPLE" "BUILTINS" "RUNTIMES" "BOOTSTRAP"
			deploy_combine "-D" "CMAKE_SYSTEM_INCLUDE_PATH" "" "permanent" \
				"$LLVM_TARGET_TRIPLE" "BUILTINS" "RUNTIMES" "BOOTSTRAP"

			! // || / `merge_cache "$crosscompiling_cmake" $TOOLCHAIN_LIST |
				awk -v rs="$RS" -v fs="$FS" 'BEGIN { FS = fs; RS = rs } \
			END { print "TOOLCHAIN_FILES=\""$1"\"; TOOLCHAIN_LIST=\""$2"\"" }' ||
			printf '%s\n' "return 1"`

			deploy "-D" "CMAKE_TOOLCHAIN_FILE" "$TOOLCHAIN_FILES"
			// log '$TOOLCHAIN_LIST' "$TOOLCHAIN_LIST"
		}

		# deploy "-D" "CMAKE_TOOLCHAIN_FILE" "$SOURCE_PREFIX/$RELATIVE_PATH/cmake/toolchain.cmake"
		# deploy "-C" "$SOURCE_PREFIX/toolchain/cmake/clang.cmake"

		# [ -z "${_LIBCPP_VERSION+x}" ] ||
		deploy "-D" "_LIBCPP_PROVIDES_DEFAULT_RUNE_TABLE:INTERNAL" "1"

		# ! expr "$KISS_XHOST_ABI" : "musl" > /dev/null 2>&1 || {
		[ "$KISS_XHOST_ABI" != "musl" ] || {
			deploy "-D" "_LIBCPP_HAS_MUSL_LIBC:BOOL"     "ON"
			deploy "-D" "LIBCXX_HAS_MUSL_LIBC:BOOL"      "ON"
		}

		deploy "-D" "CMAKE_VERBOSE_MAKEFILE"             "ON"
		# Needs to change dir to $OUTPUT_DIR
		# CMAKE_MODULE_PATH="$($CMAKE --system-information 2> /dev/null | grep "CMAKE_MODULE_PATH" || :)"
		# CMAKE_MODULE_PATH="$MAKE_DIR/cmake/Modules${CMAKE_MODULE_PATH:+";${CMAKE_MODULE_PATH}"}"
		# export CMAKE_MODULE_PATH
		modules_prepare
		deploy "-D" "CMAKE_MODULE_PATH"                  "$CMAKE_MODULE_PATH"
		# deploy "-D" "CMAKE_MODULE_PATH" \
		#   "$MAKE_DIR/cmake/Modules${CMAKE_MODULE_PATH:+";${CMAKE_MODULE_PATH}"}"

		deploy "-D" "FORCE_COLORED_OUTPUT"               "TRUE"
		# [CMAKE_MESSAGE_LOG_LEVEL](https://cmake.org/cmake/help/latest/manual/cmake.1.html)
		deploy "-D" "CMAKE_MESSAGE_LOG_LEVEL"            "WARNING"

		deploy "-D" "CMAKE_POLICY_DEFAULT_CMP0002"       "NEW"
		deploy "-D" "CMAKE_POLICY_DEFAULT_CMP0003"       "NEW"
		deploy "-D" "CMAKE_POLICY_DEFAULT_CMP0056"       "NEW"
		deploy "-D" "CMAKE_POLICY_DEFAULT_CMP0057"       "NEW"
		deploy "-D" "CMAKE_POLICY_DEFAULT_CMP0058"       "NEW"
		deploy "-D" "CMAKE_POLICY_DEFAULT_CMP0011"       "NEW"
		deploy "-D" "CMAKE_POLICY_DEFAULT_CMP0076"       "NEW"
		deploy "-D" "CMAKE_POLICY_DEFAULT_CMP0114"       "NEW"

		deploy "-D" "LLVM_OBJ_ROOT"                      "$OUTPUT_DIR"

		deploy "-D" "_CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES_INIT" "" "permanent"

		[ ! -z "${toolchain_prefix##*"$DESTDIR"*}" ] ||
		deploy "-D" "PRINT_RTLIB_FILE_NAME" "ON"

		deploy "-D" "LLVM_CCACHE_MAXSIZE:STRING" "16GB"
		deploy "-D" "LLVM_CCACHE_DIR:PATH" "$CCACHE_DIR"

		# deploy "-D" "LLVM_CCACHE_BUILD" "ON"
		# deploy "-D" "LLVM_CCACHE_BUILD" "OFF"

		# Polly doesn't respect ccache, it insist using $KISS_ROOT/usr/lib/ccache/cc ?
		# llvm/CMakeLists.txt redefined ${CCACHE_PROGRAM} by LLVM_CCACHE_BUILD

		# deploy "-D" "CMAKE_C_COMPILER_LAUNCHER"          "/usr/bin/ccache"

		# deploy "-D" "CMAKE_C_COMPILER_LAUNCHER"   ""

		# deploy "-D" "CMAKE_CXX_COMPILER_LAUNCHER"        "/usr/bin/ccache"

		# deploy "-D" "CMAKE_CXX_COMPILER_LAUNCHER" ""

		[ ! -z "${CCACHE_NOHASHDIR+x}" ] &&
		deploy "-D" "LLVM_CCACHE_PARAMS:STRING" "CCACHE_CPP2= CCACHE_NOHASHDIR=" ||
		deploy "-D" "LLVM_CCACHE_PARAMS:STRING" "CCACHE_CPP2= CCACHE_HASHDIR="
		deploy "-D" "CCACHE_PROGRAM"                     "$CCACHE_PROGRAM"

		deploy "-D" "CMAKE_FIND_PACKAGE_PREFER_CONFIG"   "TRUE"

		# Checked in compiler-rt/lib/profile/CMakeLists.txt
		# COMPILER_RT_TARGET_HAS_ATOMICS

		# For BLAKE3
		deploy "-D" "LLVM_DISABLE_ASSEMBLY_FILES" "OFF"

		# Fro arm (https://static.linaro.org/connect/bkk19/presentations/bkk19-210.pdf)
		# set(CMAKE_C_LINK_EXECUTABLE   "/path/to/arm-none-eabi-gcc <FLAGS>
		# <CMAKE_C_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET>
		# <LINK_LIBRARIES> -lc")
		# set(CMAKE_CXX_LINK_EXECUTABLE "/path/to/arm-none-eabi-g++ <FLAGS>
		# <CMAKE_C_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET>
		# <LINK_LIBRARIES> -lc")

		deploy "-D" "CMAKE_LINKER:FILEPATH"              "$toolchain_prefix/bin/ld.lld"
		deploy "-D" "CMAKE_LINK_EXECUTABLE:FILEPATH"     "$toolchain_prefix/bin/ld.lld"
		deploy "-D" "CMAKE_AR:FILEPATH"                  "$toolchain_prefix/bin/llvm-ar"
		deploy "-D" "CMAKE_CXX_COMPILER_AR:FILEPATH"     "$toolchain_prefix/bin/llvm-ar"
		deploy "-D" "CMAKE_CXX_COMPILER_RANLIB:FILEPATH" "$toolchain_prefix/bin/llvm-ranlib"
		deploy "-D" "CMAKE_RANLIB:FILEPATH"              "$toolchain_prefix/bin/llvm-ranlib"
		deploy "-D" "CMAKE_AS:FILEPATH"                  "$toolchain_prefix/bin/llvm-as"
		deploy "-D" "CMAKE_CXX_COMPILER_LINKER:FILEPATH" "$toolchain_prefix/bin/ld.lld"

		# [ -z "${toolchain_prefix##*"$DESTDIR"*}" ] && {
		# 	deploy "-D" "CMAKE_LINKER:FILEPATH"          "$DESTDIR/$INSTALL_PREFIX/bin/ld.lld"
		# 	deploy "-D" "CMAKE_LINK_EXECUTABLE:FILEPATH" "$DESTDIR/$INSTALL_PREFIX/bin/ld.lld"
		# 	deploy "-D" "CMAKE_AR:FILEPATH"              "$DESTDIR/$INSTALL_PREFIX/bin/llvm-ar"
		# 	deploy "-D" "CMAKE_CXX_COMPILER_AR:FILEPATH" "$DESTDIR/$INSTALL_PREFIX/bin/llvm-ar"
		# 	deploy "-D" "CMAKE_CXX_COMPILER_RANLIB:FILEPATH" "$DESTDIR/$INSTALL_PREFIX/bin/llvm-ranlib"
		# 	deploy "-D" "CMAKE_RANLIB:FILEPATH"          "$DESTDIR/$INSTALL_PREFIX/bin/llvm-ranlib"
		# 	deploy "-D" "CMAKE_AS:FILEPATH"              "$DESTDIR/$INSTALL_PREFIX/bin/llvm-as"
		# 	deploy "-D" "CMAKE_CXX_COMPILER_LINKER"      "$DESTDIR/$INSTALL_PREFIX/bin/ld.lld"
		# } || {
		# 	# deploy "-D" "CMAKE_LINKER"                 "ld.lld"
		# 	# deploy "-D" "CMAKE_LINKER:FILEPATH"        "$DESTDIR/$INSTALL_PREFIX/bin/ld.lld"
		# 	# deploy "-D" "CMAKE_LINKER:FILEPATH"        "$DESTDIR/$INSTALL_PREFIX/bin/clang++"
		# 	# deploy "-D" "CMAKE_LINKER:FILEPATH"        "$(which clang++)"
		# 	deploy "-D" "CMAKE_LINKER:FILEPATH"          "$(which ld.lld)"

		# 	# deploy "-D" "CMAKE_LINK_EXECUTABLE"        "$DESTDIR/$INSTALL_PREFIX/bin/ld.lld"
		# 	# deploy "-D" "CMAKE_LINK_EXECUTABLE"        "$(which clang++)"
		# 	deploy "-D" "CMAKE_LINK_EXECUTABLE:FILEPATH" "$(which ld.lld)"

		# 	deploy "-D" "CMAKE_AR:FILEPATH"              "$(which llvm-ar)"
		# 	deploy "-D" "CMAKE_CXX_COMPILER_AR:FILEPATH" "$(which llvm-ar)"
		# 	deploy "-D" "CMAKE_RANLIB:FILEPATH"          "$(which llvm--ranlib)"
		# 	deploy "-D" "CMAKE_CXX_COMPILER_RANLIB:FILEPATH" "$(which llvm--ranlib)"
		# 	deploy "-D" "CMAKE_AS:FILEPATH"              "$(which llvm-as)"
		# 	# deploy "-D" "CMAKE_CXX_COMPILER_LINKER"    "/usr/bin/ld.lld"
		# 	deploy "-D" "CMAKE_CXX_COMPILER_LINKER:FILEPATH" "$(which ld.lld)"
		# }

		deploy "-D" "CLANG_DEFAULT_LINKER"               "ld.lld"
		deploy "-D" "CLANG_DEFAULT_RTLIB"                "compiler-rt"
		deploy "-D" "CLANG_DEFAULT_UNWINDLIB"            "libunwind"
		# Headers for current compilation
		# deploy "-D" "CLANG_RESOURCE_DIR:STRING"        "../lib/clang/$version_system"
		# deploy "-D" "CLANG_RESOURCE_DIR:STRING"        "../lib/clang/$version_target" "permanent"
		# deploy "-D" "CLANG_RESOURCE_DIR:STRING"        "$DESTDIR/$INSTALL_PREFIX/lib/clang/$version_target" "permanent"
		deploy "-D" "CLANG_RESOURCE_DIR:STRING"          "../lib/clang/$version_target" "permanent"
		# libc of LLVM specific
		deploy "-D" "COMPILER_RESOURCE_DIR:STRING"       "$RESOURCE_DIR"
		# deploy "-D" "COMPILER_RESOURCE_DIR:STRING"     "$DESTDIR/$INSTALL_PREFIX/lib/clang/$version_target" "permanent"
		# LLDB_EXTERNAL_CLANG_RESOURCE_DIR
		# "${LLDB_CLANG_RESOURCE_DIR_PARENT}/${LLDB_CLANG_RESOURCE_DIR_NAME}"
		deploy "-D" "CLANG_CONFIG_FILE_SYSTEM_DIR"       "/etc/clang/$version_target"
		deploy "-D" "CLANG_ENABLE_ARCMT"                 "ON"
		deploy "-D" "CLANG_ENABLE_STATIC_ANALYZER"       "ON"

		deploy "-D" "CLANG_PYTHON_BINDINGS_VERSIONS"     "$python_version"

		deploy "-D" "CLANG_SYSTEMZ_DEFAULT_ARCH"         "z196"
		# deploy "-D" "ENABLE_LINKER_BUILD_ID"           "ON"
		deploy "-D" "ENABLE_LINKER_BUILD_ID:BOOL"        "OFF"
		deploy "-D" "LIBCLANG_BUILD_STATIC"              "ON"

		[ -z "${toolchain_prefix##*"$DESTDIR"*}" ] &&
		deploy "-D" "LLVM_EXTERNAL_LIT" "$DESTDIR/$INSTALL_PREFIX/bin/lit" ||
		deploy "-D" "LLVM_EXTERNAL_LIT" "/usr/bin/lit"

		# https://stackoverflow.com/questions/75741547/how-to-build-llvm-clang-lld-mlir-release-16-x
		# -D LLVM_PARALLEL_COMPILE_JOBS=1 \
		# -D LLVM_PARALLEL_LINK_JOBS=1 \
		# "Use -gsplit-dwarf when compiling llvm and --gdb-index when linking." OFF)
		deploy "-D" "LLVM_USE_SPLIT_DWARF"               "OFF"
		deploy "-D" "LLVM_USE_NEWPM"                     "ON"

		deploy "-D" "LLVM_TOOL_COMPILER_RT_BUILD:BOOL"   "ON"
		deploy "-D" "LLVM_TOOL_LIBCXX_BUILD:BOOL"        "ON"
		deploy "-D" "LLVM_TOOL_LIBCXXABI_BUILD:BOOL"     "ON"
		deploy "-D" "LLVM_TOOL_LIBUNWIND_BUILD:BOOL"     "ON"
		deploy "-D" "CLANG_INCLUDE_TESTS:BOOL"           "ON"

		# -DCMAKE_INSTALL_COMPONENT="LLVMAMDGPUUtils"
		#
		# set(CMAKE_SIZEOF_VOID_P "${CMAKE_CXX_SIZEOF_DATA_PTR}")
		# set(CMAKE_SIZEOF_VOID_P "${CMAKE_C_SIZEOF_DATA_PTR}")
		deploy "-D" "CMAKE_C_SIZEOF_DATA_PTR"            "8"
		deploy "-D" "CMAKE_CXX_SIZEOF_DATA_PTR"          "8"
		// deploy_combine "-D" "COMPILER_RT_HAS_FPIC_FLAG"  "ON" "permanent" \
			"$LLVM_TARGET_TRIPLE" "BUILTINS" "RUNTIMES" "BOOTSTRAP"
		// deploy_combine "-D" "CMAKE_SIZEOF_VOID_P"        "8" "permanent" \
			"$LLVM_TARGET_TRIPLE" "BUILTINS" "RUNTIMES" "BOOTSTRAP"
		# deploy "-D" "CMAKE_SIZEOF_VOID_P"              "8"

		// deploy_combine "-D" "COMPILER_RT_CXX_LIBRARY" "libcxx" "permanent" \
			"$LLVM_TARGET_TRIPLE" "BUILTINS" "RUNTIMES" "BOOTSTRAP"
		// deploy_combine "-D" "COMPILER_RT_UNITTEST_CFLAGS" "-isystem ${COMPILER_RESOURCE_DIR}/include" "permanent" \
			"$LLVM_TARGET_TRIPLE" "BUILTINS" "RUNTIMES" "BOOTSTRAP"

		// deploy_combine "-D" "COMPILER_RT_PASSTHROUGH_VARIABLES" "LLVM_DEFAULT_TARGET_TRIPLE;TARGET_TRIPLE" "permanent" \
			"$LLVM_TARGET_TRIPLE" "BUILTINS" "RUNTIMES" "BOOTSTRAP"

		// deploy_combine "-D" "LLVM_LIBCXX_USED" "1" "permanent" \
			"$LLVM_TARGET_TRIPLE" "BUILTINS" "RUNTIMES" "BOOTSTRAP"

		// deploy_combine "-D" "CMAKE_NINJA_DEPTYPE_CXX" "" "permanent" \
			"$LLVM_TARGET_TRIPLE" "BUILTINS" "RUNTIMES" "BOOTSTRAP"

		# -std=c++23
		# cxx_standard_version="c++2b"
		# Hardcoded in llvm/CMakeLists.txt
		# This C++ standard is required to build LLVM.
		# set(LLVM_REQUIRED_CXX_STANDARD 23)
		# error: friends can only be classes or functions -- if hardcoded c++17
		# In flang only
		# deploy "-D" "LLVM_CXX_STD:STRING" "c++23"
		# How to set c++2b ?
		# deploy "-D" "LLVM_REQUIRED_CXX_STANDARD"      "23"
		deploy "-D" "LLVM_REQUIRED_CXX_STANDARD"        "$standard_version_number"
		deploy "-D" "CMAKE_CXX_STANDARD"                "$LLVM_REQUIRED_CXX_STANDARD"

		# fin "check_cxx_compiler_flag" "*.cmake" | grep "\-std="
		# ./openmp/cmake/config-ix.cmake:40:check_cxx_compiler_flag(-std=c++17 OPENMP_HAVE_STD_CPP17_FLAG)
		# Intermediate variable. Value came from: openmp/cmake/config-ix.cmake
		# deploy "-D" "OPENMP_HAVE_STD_CPP17_FLAG"                "ON"

		deploy "-D" "CMAKE_INSTALL_LIBDIR:PATH"          "lib"
		deploy "-D" "LIBUNWIND_INSTALL_LIBRARY_DIR:PATH" "lib"
		# deploy "-D" "CXX_SUPPORTS_STDLIB:INTERNAL"  "-stdlib=lib${LIBCXX_PREFIX}c++"
		deploy "-D" "CXX_SUPPORTS_STDLIB:BOOL" "YES"
		# libc++ as std lib in clang by default
		deploy "-D" "CLANG_DEFAULT_CXX_STDLIB" "libc++"

		# deploy "-D" "LLVM_DEFAULT_TARGET_TRIPLE:STRING"  "x86_64-unknown-linux-musl"
		deploy "-D" "LLVM_TARGET_TRIPLE:STRING"          "$LLVM_TARGET_TRIPLE"
		deploy "-D" "LLVM_DEFAULT_TARGET_TRIPLE_default:STRING" "$LLVM_TARGET_TRIPLE"
		deploy "-D" "LLVM_DEFAULT_TARGET_TRIPLE:STRING"  "$LLVM_TARGET_TRIPLE"
		# deploy "-D" "LLVM_TARGET_TRIPLE_ENV"            "\$ENV{LLVM_TARGET_TRIPLE}"
		deploy "-D" "LLVM_TARGET_TRIPLE_ENV"             "$LLVM_TARGET_TRIPLE"

		# [Target system triple](https://llvm.org/docs/HowToCrossCompileLLVM.html)
		# This flag implicitly sets other defaults, such as LLVM_DEFAULT_TARGET_TRIPLE
		# -D LLVM_HOST_TRIPLE="$(cc -dumpmachine)" \
		# deploy "-D" "LLVM_HOST_TRIPLE:STRING"                   "$KISS_XHOST_TRIPLE"
		deploy "-D" "LLVM_HOST_TRIPLE:STRING"            "$(cc -dumpmachine)"
		# TODO
		deploy "-D" "LLVM_NATIVE_TARGET:STRING"          "$KISS_XHOST_TRIPLE"

		# Will be reseted in /usr/share/cmake-3.25/Modules/CMakeTestCCompiler.cmake
		deploy "-D" "CMAKE_C_COMPILER_WORKS"             "ON"
		deploy "-D" "CMAKE_CXX_COMPILER_WORKS"           "ON"
		deploy "-D" "CMAKE_ASM_COMPILER_WORKS"           "ON"
		# deploy "-D" "CMAKE_ASM_COMPILER_WORKS:INTERNAL" "1"

		# The FLAGS syntax (-isystem) is not accepted here
		# ignoring nonexistent directory "/opt/kiss-isystem /working/kiss/proc/pkg/llvm/usr/include -isystem /opt/kiss/usr/include"
		# deploy "-D" "C_INCLUDE_DIRS:STRING"            "-isystem $DESTDIR/$INSTALL_PREFIX/include -isystem $KISS_ROOT/$INSTALL_PREFIX/include"
		# ignoring nonexistent directory "/opt/kiss -isystem /working/kiss/proc/pkg/llvm/usr/include -isystem /opt/kiss/usr/include"
		# deploy "-D" "C_INCLUDE_DIRS:STRING"            " -isystem $DESTDIR/$INSTALL_PREFIX/include -isystem $KISS_ROOT/$INSTALL_PREFIX/include"
		#
		# deploy "-D" "LLVM_INCLUDE_DIRS:PATH"           "$DESTDIR/$INSTALL_PREFIX/include;$KISS_ROOT/$INSTALL_PREFIX/include"
		# llvm/ADT ... under it and as same as           "$DESTDIR/$INSTALL_PREFIX/include"
		# deploy "-D" "LLVM_INCLUDE_DIRS:PATH"           "$MAKE_DIR/llvm/include"
		# deploy "-D" "LLVM_INCLUDE_DIRS:PATH"           "$DESTDIR/$INSTALL_PREFIX/include"
		# deploy "-D" "LLVM_INCLUDE_DIRS:PATH"           "$RESOURCE_DIR/include"
		# Should come from find_package(LLVM REQUIRED) (https://discord.com/channels/636084430946959380/687692371038830597/1197288538601959515)
		# deploy "-D" "LLVM_INCLUDE_DIRS:PATH"           "$SYSROOT/$INSTALL_PREFIX/include"

		# deploy "-D" "STAGE2_LLVM_INCLUDE_DIRS:PATH"    "$MAKE_DIR/llvm/include"
		# clang/AST ... under it and as same as          "$DESTDIR/$INSTALL_PREFIX/include"
		# deploy "-D" "C_INCLUDE_DIRS:STRING"            "$MAKE_DIR/clang/include"
		#
		# ignoring nonexistent directory "/working/kiss/proc/pkg/llvm/usr/include;/opt/kiss/usr/include"
		# deploy "-D" "C_INCLUDE_DIRS:STRING"            "$DESTDIR/$INSTALL_PREFIX/include;$KISS_ROOT/$INSTALL_PREFIX/include"
		#
		#
		# ignoring nonexistent directory "/working/kiss/proc/pkg/llvm/usr/include;/opt/kiss/usr/include"
		# deploy "-D" "C_INCLUDE_DIRS:STRING"            "$DESTDIR/$INSTALL_PREFIX/include;$KISS_ROOT/$INSTALL_PREFIX/include"
		#
		# [[Driver] Removal of C_INCLUDE_DIRS feature](https://reviews.llvm.org/D159054)
		# deploy "-D" "C_INCLUDE_DIRS:STRING"            "$SYSROOT/$INSTALL_PREFIX/include"
		#
		# clang/CMakeLists.txt
		# set(C_INCLUDE_DIRS "" CACHE STRING
		#   "Colon separated list of directories clang will search for headers.")

		# deploy "-D" "C_INCLUDE_DIRS:STRING"            "$KISS_ROOT/$INSTALL_PREFIX/include"

		# deploy "-D" "C_INCLUDE_DIRS:STRING"            "$DESTDIR/$INSTALL_PREFIX/include"
		#
		# C_INCLUDE_PATH / CPLUS_INCLUDE_PATH
		#

		deploy_combine "-D" "C_INCLUDE_PATH" \
			"$SYSROOT/$INSTALL_PREFIX/lib/clang/$version_system/include:$SYSROOT/$INSTALL_PREFIX/include" "permanent" \
			"$LLVM_TARGET_TRIPLE" "BUILTINS" "RUNTIMES" "BOOTSTRAP"

		deploy_combine "-D" "CPLUS_INCLUDE_PATH" \
			"$SYSROOT/$INSTALL_PREFIX/include/$LLVM_DEFAULT_TARGET_TRIPLE/c++/v1/:$SYSROOT/$INSTALL_PREFIX/include/c++/v1/:$SYSROOT/$INSTALL_PREFIX/lib/clang/$version_system/include:$SYSROOT/$INSTALL_PREFIX/include" "permanent" \
			"$LLVM_TARGET_TRIPLE" "BUILTINS" "RUNTIMES" "BOOTSTRAP"
		#

		# Useless
		# deploy "-D" "STAGE2_C_INCLUDE_DIRS:STRING"     "$MAKE_DIR/clang/include"
		# If use lld, not gold, we don't need LLVM_BINUTILS_INCDIR
		[ ! -z "$cmd_lld" ] || {
			# Loook into
			# $OUTPUT_DIR/tools/clang/stage2/tmp/stage2-cfgcmd.txt
			# And
			# ExternalProject_Add(${name} in llvm/cmake/modules/LLVMExternalProjectUtils.cmake
			# deploy "-D" "LLVM_BINUTILS_INCDIR"         "$OUTPUT_DIR/include"

			# stage2 does not like this combination
			#   deploy "-D" "LLVM_BINUTILS_INCDIR" \
			#       "\
			# $DESTDIR/$INSTALL_PREFIX/include/c++/v1;\
			# $DESTDIR/$INSTALL_PREFIX/lib/clang/$version_target_major/include;\
			# $DESTDIR/$INSTALL_PREFIX/include\
			# "

			#   deploy "-D" "LLVM_BINUTILS_INCDIR" \
			# "$DESTDIR/$INSTALL_PREFIX/include\
			# "
			# Means gnu binutils? -- for gold
			# https://reviews.llvm.org/D125624
			# https://opensource.apple.com/source/clang/clang-800.0.38/src/cmake/config-ix.cmake.auto.html
			# set(LLVM_BINUTILS_INCDIR "" CACHE PATH
			#
			# "PATH to binutils/include containing plugin-api.h for gold plugin.")
			# The option is only needed if you want to use gold or ld.bfd as the linker.(https://discord.com/channels/636084430946959380/636732535434510338/1086435166597169262)
			# deploy "-D" "LLVM_BINUTILS_INCDIR:PATH"    "$SYSROOT/$INSTALL_PREFIX/include"

			# deploy "-D" "LLVM_BINUTILS_INCDIR:PATH"    "$KISS_ROOT/$INSTALL_PREFIX/include"

			# $KISS_ROOT/$INSTALL_PREFIX/include/c++/v1;\
			#
			# $DESTDIR/$INSTALL_PREFIX/lib/clang/$version_target_major/include/c++/v1;\
			# $OUTPUT_DIR/include/$LLVM_DEFAULT_TARGET_TRIPLE/c++/v1;\
			# $OUTPUT_DIR/include/c++/v1;\
			# $MAKE_DIR/libcxx/include\
			#
			# $OUTPUT_DIR/lib/clang/$version_target_major/include;\
			# $OUTPUT_DIR/runtimes/runtimes-bins/pstl/generated_headers;\
			#
			# $MAKE_DIR/pstl/include;\
			#
			# $KISS_ROOT/$INSTALL_PREFIX/include\
			:
		}

		# NATIVE/runtimes/runtimes-bins
		#
		# Seems deprecated
		# deploy "-D" "CMAKE_INSTALL_OLDINCLUDEDIR" \
		#       "\
		# $KISS_ROOT/$INSTALL_PREFIX/include\
		# "
		# $KISS_ROOT/$INSTALL_PREFIX/include/c++/v1;\
		#
		#
		# Content copied from "${LLVM_CMAKE_DIR}"
		# ./runtimes/runtimes-x86_64-linux-musl-bins/CMakeCache.txt:1335:LLVM_DIR:PATH=/tmp/ei/kiss/objects/llvm/lib/cmake/llvm
		# ./tools/clang/stage2-bRns/runtimes/builtins-x86_64-linux-musl-bins/CMakeCache.txt:717:LLVM_DIR:PATH=/opt/kiss/usr/lib/cmake/llvm
		#
		# Do not do this
		# sed -e 's/LLVM_CONFIG_PATH/LLVM_CMAKE_DIR/g' < "llvm/tools/llvm-config/CMakeLists.txt" > _
		# mv -f _ "llvm/tools/llvm-config/CMakeLists.txt"

		# Compute the path to the LLVM (.cmake) install prefix and pass it as LLVM_CMAKE_DIR,
		# CMake will locate the appropriate lib*/cmake subdirectory from there.
		#
		# "LLVM_CONFIG_PATH is deprecated, please use LLVM_CMAKE_DIR instead"
		# The above sentence is not true
		# In compiler-rt/cmake/Modules/CompilerRTUtils.cmake
		# if (LLVM_CONFIG_PATH AND NOT LLVM_CMAKE_DIR)
		#   For example. for -DLLVM_CONFIG_PATH=/usr/lib/llvm/18.0.0/bin/llvm-config
		#   this will yield LLVM_CMAKE_DIR='/usr/lib/llvm/18.0.0'
		# endif()
		#
		# Not correct location:
		# deploy "-D" "LLVM_CONFIG_PATH" "$(which llvm-config)"
		#
		# No such location:
		# deploy "-D" "LLVM_CMAKE_DIR"                   "$KISS_ROOT/usr/lib/llvm/$version_system"
		# Runtimes file dir: "/usr/lib/clang/$version_system/lib/linux"
		# Nor a correct location:
		# deploy "-D" "LLVM_CMAKE_DIR"                   "/usr/lib/clang/$version_system"
		#
		# Tell find_package(LLVM HINTS "${LLVM_CMAKE_DIR}") how to find LLVM-Config.cmake
		# Standard location:
		# ./CMakeLists.txt:426:set(LLVM_CMAKE_DIR ${LLVM_MAIN_SRC_DIR}/cmake/modules)
		// deploy_combine "-D" "LLVM_DIR"                "$OUTPUT_DIR/lib/cmake/llvm" "permanent" \
			"$LLVM_TARGET_TRIPLE" "BUILTINS" "RUNTIMES" "BOOTSTRAP"
		[ "$SYSROOT" = "$DESTDIR" ] && {
			// deploy_combine "-D" "LLVM_CMAKE_DIR"      "$DESTDIR/$INSTALL_PREFIX/lib/cmake/llvm" "permanent" \
				"$LLVM_TARGET_TRIPLE" "BUILTINS" "RUNTIMES" "BOOTSTRAP"
		} || {
			# // deploy_combine "-D" "LLVM_DIR"          "$KISS_ROOT/$INSTALL_PREFIX/lib/cmake/llvm" "permanent" \
			#   "$LLVM_TARGET_TRIPLE" "BUILTINS" "RUNTIMES" "BOOTSTRAP"
			# deploy "-D" "LLVM_CMAKE_DIR"               "$MAKE_DIR/llvm/cmake/modules" ||
			# // deploy_combine "-D" "LLVM_CMAKE_DIR"    "$KISS_ROOT/$INSTALL_PREFIX/lib/cmake/llvm" "permanent" \
			# This is the real value
			# // deploy_combine "-D" "LLVM_CMAKE_DIR"    "$MAKE_DIR/llvm/cmake/modules" "permanent" \
			// deploy_combine "-D" "LLVM_CMAKE_DIR"      "$OUTPUT_DIR/lib/cmake/llvm" "permanent" \
				"$LLVM_TARGET_TRIPLE" "BUILTINS" "RUNTIMES" "BOOTSTRAP"
		}

		deploy "-D" "LLVM_TARGET_ARCH"                   "$TARGET_ARCH"

		[ "$libname" != "x86_64" ] ||
			// deploy_combine "-D" "CAN_TARGET_x86_64"   "ON" "permanent" \
			"$LLVM_TARGET_TRIPLE" "BUILTINS" "RUNTIMES"  "BOOTSTRAP"

		# alpine sets this path
		# deploy "-D" "CMAKE_INSTALL_PREFIX:PATH"        "$toolchain_prefix"
		# deploy "-D" "CMAKE_INSTALL_PREFIX:PATH"        "$DESTDIR/$INSTALL_PREFIX"
		# deploy "-D" "CMAKE_INSTALL_PREFIX:PATH"        "/$INSTALL_PREFIX"
		deploy "-D" "CMAKE_INSTALL_PREFIX:PATH"          "/$INSTALL_PREFIX"
		# https://github.com/Kitware/CMake/blob/master/Modules/CMakeFindBinUtils.cmake
		# https://stackoverflow.com/questions/7031126/switching-between-gcc-and-clang-llvm-using-cmake
		deploy "-D" "_CMAKE_TOOLCHAIN_PREFIX:STRING"     "llvm-"
		# deploy "-D" "CMAKE_TOOLCHAIN_PREFIX:STRING"      "$TOOLCHAIN_PREFIX"
		deploy "-D" "CMAKE_TOOLCHAIN_PREFIX:STRING"      "llvm-"
		deploy "-D" "CMAKE_INSTALL_NAME_DIR:STRING"      "/$INSTALL_PREFIX/lib"

		# CMAKE_FIND_ROOT_PATH like settings are inside "$crosscompiling_cmake" ( files/crosscompiling.cmake )
		# About CMAKE_BUILD_WITH_INSTALL_RPATH and CMAKE_INSTALL_RPATH
		# https://cmake.org/cmake/help/book/mastering-cmake/chapter/Cross%20Compiling%20With%20CMake.html
		# deploy "-D" "CMAKE_INSTALL_NAME_DIR:STRING" "../lib"
		# AddLLVM.cmake::llvm_setup_rpath
		# Enable BUILD_WITH_INSTALL_RPATH unless CMAKE_BUILD_RPATH is set.
		deploy "-D" "CMAKE_BUILD_WITH_INSTALL_RPATH"     "ON"
		deploy_combine "-D" "CMAKE_FIND_ROOT_PATH"       "" "permanent" \
			"$LLVM_TARGET_TRIPLE" "BUILTINS" "RUNTIMES"  "BOOTSTRAP"

		# deploy "-D" "CMAKE_INSTALL_RPATH"              "$DESTDIR/$INSTALL_PREFIX/lib/llvm/$version_target"
		# deploy "-D" "CMAKE_INSTALL_RPATH:PATH"         "$KISS_ROOT/usr/lib/clang/$version_target"
		# deploy "-D" "CMAKE_INSTALL_RPATH:PATH"         "../lib"
		# deploy "-D" "CMAKE_INSTALL_RPATH:PATH"         "../lib/clang/$version_target"
		# deploy "-D" "CMAKE_INSTALL_RPATH:PATH"         "../lib/clang/$version_target"
		# https://cmake.org/cmake/help/latest/prop_tgt/INSTALL_RPATH.html#prop_tgt:INSTALL_RPATH
		# [ ! -z  "${toolchain_prefix##*"$DESTDIR"*}" ] &&
		# deploy "-D" "CMAKE_INSTALL_RPATH:PATH"         "../lib/llvm/$version_xhost" ||
		// deploy_combine "-D" "CMAKE_INSTALL_RPATH:PATH" \
			"XORIGIN/../lib/$LLVM_TARGET_TRIPLE:XORIGIN/../lib/clang/$version_target/lib/$LLVM_TARGET_TRIPLE:XORIGIN/../lib/clang/$version_target/lib/linux:XORIGIN/../lib:XORIGIN/../lib/llvm/$version_target" \
			"permanent" \
			"$LLVM_TARGET_TRIPLE" "BUILTINS" "RUNTIMES"  "BOOTSTRAP"

		# deploy "-D" "LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default:BOOL" "OFF"
		# https://reviews.llvm.org/D126122?id=431848
		# INSTALL_RPATH related
		deploy "-D" "LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default:BOOL" "ON"
		# Hardcoded in the following file
		# /working/toolchain/llvm/llvm-project/llvm/runtimes/CMakeLists.txt
		# deploy "-D" "LLVM_ENABLE_PER_TARGET_RUNTIME_DIR" "OFF"
		# deploy "-D" "LLVM_ENABLE_PER_TARGET_RUNTIME_DIR:BOOL" "ON"

		# https://reviews.llvm.org/D126122?id=431848
		# INSTALL_RPATH related
		deploy "-D" "LLVM_ENABLE_PER_TARGET_RUNTIME_DIR" "${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default}"
		# ./clang/test/Driver/linux-per-target-runtime-dir.c:20:// RUN:   | FileCheck --check-prefix=CHECK-CLANGRT-X8664 %s
		# ./clang/test/Driver/linux-per-target-runtime-dir.c:21:// CHECK-CLANGRT-X8664: lib{{/|\\}}x86_64-unknown-linux-gnu{{/|\\}}libclang_rt.builtins.a
		# ./clang/test/Driver/print-libgcc-file-name-clangrt.c:7:// RUN:   | FileCheck --check-prefix=CHECK-CLANGRT-X8664 %s
		# ./clang/test/Driver/print-libgcc-file-name-clangrt.c:8:// CHECK-CLANGRT-X8664: libclang_rt.builtins-x86_64.a
		# deploy "-D" "CLANGRT-X8664" "libclang_rt.builtins-x86_64.a"
		#
		# ./clang/test/Driver/linux-per-target-runtime-dir.c:26:// RUN:   | FileCheck --check-prefix=CHECK-FILE-NAME-X8664 %s
		# ./clang/test/Driver/linux-per-target-runtime-dir.c:27:// CHECK-FILE-NAME-X8664: lib{{/|\\}}x86_64-unknown-linux-gnu{{/|\\}}libclang_rt.builtins.a
		# deploy "-D" "FILE-NAME-X8664" "lib{{/|\\}}x86_64-unknown-linux-musl{{/|\\}}libclang_rt.builtins.a"

		[ -d "$DESTDIR/$INSTALL_PREFIX/lib/clang/$version_target/lib/$LLVM_TARGET_TRIPLE" ] ||
			// as_own "$DESTDIR" \
			\mkdir -p "$DESTDIR/$INSTALL_PREFIX/lib/clang/$version_target/lib/$LLVM_TARGET_TRIPLE"

		[ -d "$DESTDIR/$INSTALL_PREFIX/lib/clang/$version_target_major/lib/linux" ] ||
			// as_own "$DESTDIR" \
			\mkdir -p "$DESTDIR/$INSTALL_PREFIX/lib/clang/$version_target_major/lib/linux"

		[ -d "$DESTDIR/$INSTALL_PREFIX/lib/llvm/$version_target" ] ||
			// as_own "$DESTDIR" \
			\mkdir -p "$DESTDIR/$INSTALL_PREFIX/lib/llvm/$version_target"


		deploy "-D" "CMAKE_MAKE_PROGRAM:FILEPATH" "$MAKE_PROGRAM"

		# ld: error: undefined symbol: backtrace
		# >>> referenced by Signals.cpp
		# >>>               Signals.cpp.o:(llvm::sys::PrintStackTrace(llvm::raw_ostream&, int)) in archive lib/libLLVMSupport.a
		# llvm/lib/Support/CMakeLists.txt
		deploy "-D" "Backtrace_INCLUDE_DIR"              "$SYSROOT/$INSTALL_PREFIX/include"
		deploy "-D" "Backtrace_LIBRARY"                  "$SYSROOT_LIB/libexecinfo.so"
		deploy "-D" "ICONV_LIBRARY_PATH"                 "$SYSROOT_LIB/libc.so"

		deploy "-D" "COMPILER_RT_HAS_LIBEXECINFO"        "ON"

		deploy "-D" "LLVM_ENABLE_BACKTRACES"             "ON"

		# -fPIC
		deploy "-D" "CMAKE_POSITION_INDEPENDENT_CODE"    "ON"

		deploy "-D" "CMAKE_HAVE_LIBC_PTHREAD"            "ON"

		deploy "-D" "LLVM_ENABLE_EH"                     "ON"

		# alpine sets ON
		# deploy "-D" "LLVM_ENABLE_TERMINFO"    "OFF"
		deploy "-D" "LLVM_ENABLE_TERMINFO"    "ON"
		#   Could not find builtins library from libc++abi
		#   Could not find builtins library from libc++

		# Hard coded in libcxxabi/CMakeLists.txt to OFF
		# Use compiler-rt instead of libgcc
		deploy "-D" "LIBCXXABI_USE_COMPILER_RT"          "ON"
		#
		# For --unwindlib=none
		deploy "-D" "LIBCXXABI_USE_LLVM_UNWINDER"        "ON"           # libunwind in libc++

		deploy "-D" "CXX_SUPPORTS_UNWINDLIB_EQ_NONE_FLAG" "ON"

		# Conflicts with _LIBCPP_HAS_MUSL_LIBC
		# deploy "-D" "LIBCXX_ENABLE_WIDE_CHARACTERS"       "OFF"

		deploy "-D" "LIBCXXABI_ENABLE_THREADS"           "ON"
		deploy "-D" "LIBCXXABI_HERMETIC_STATIC_LIBRARY"  "ON"
		deploy "-D" "LIBCXXABI_INSTALL_LIBRARY"          "ON"
		deploy "-D" "LIBCXXABI_ENABLE_EXCEPTIONS"        "ON"

		deploy "-D" "LIBCXXABI_ENABLE_STATIC_UNWINDER"   "OFF"
		deploy "-D" "LIBCXXABI_ENABLE_SHARED" "ON"
		deploy "-D" "LIBCXXABI_ENABLE_STATIC" "ON"

		# deploy "-D" "LIBCXXABI_STATICALLY_LINK_UNWINDER_IN_STATIC_LIBRARY" "ON"
		# deploy "-D" "LIBCXXABI_STATICALLY_LINK_UNWINDER_IN_SHARED_LIBRARY" "ON"
		deploy "-D" "LIBCXXABI_STATICALLY_LINK_UNWINDER_IN_STATIC_LIBRARY" "OFF"
		deploy "-D" "LIBCXXABI_STATICALLY_LINK_UNWINDER_IN_SHARED_LIBRARY" "OFF"
		# For glibc specific
		deploy "-D" "LIBCXXABI_HAS_CXA_THREAD_ATEXIT_IMPL:INTERNAL" "0"
		deploy "-D" "LIBCXX_ENABLE_STATIC_ABI_LIBRARY"   "ON"

		deploy "-D" "LIBCXX_INSTALL_LIBRARY"             "ON"
		# https://reviews.llvm.org/D60480
		deploy "-D" "LIBCXX_ENABLE_PARALLEL_ALGORITHMS"  "ON"

		# "_LIBCPP_ENABLE_ASSERTIONS is deprecated, please use _LIBCPP_ENABLE_HARDENED_MODE instead." [-W#warnings]
		# alpine turned off this item
		# Turn it on in the second run
		deploy "-D" "LLVM_ENABLE_ASSERTIONS"             "OFF"
		# deploy "-D" "LIBCXX_ENABLE_ASSERTIONS:BOOL"    "ON"
		deploy "-D" "LIBCXX_HARDENING_MODE:STRING"       "hardened"

		deploy "-D" "LIBCXX_ENABLE_EXCEPTIONS:BOOL"      "ON"
		deploy "-D" "LIBCXX_ENABLE_RTTI:BOOL"            "ON"
		deploy "-D" "LIBCXX_CXX_ABI"                     "libcxxabi"
		deploy "-D" "LIBCXX_PSTL_CPU_BACKEND"            "std_thread"
		deploy "-D" "LIBCXX_ENABLE_SHARED"               "ON"
		deploy "-D" "LIBCXX_ENABLE_STATIC"               "ON"

		# From toolchiain file?
		# deploy "-D" "LLVM_HAS_ATOMICS"                                "OFF"
		# https://wiki.aalto.fi/display/t1065450/LLVM+atomics
		# Define LLVM_HAS_ATOMICS if gcc or MSVC atomic builtins are supported.
		# https://github.com/llvm/llvm-project/commit/21450545d14
		deploy "-D" "LLVM_HAS_ATOMICS"                               "ON"
		deploy "-D" "_LIBCPP_ATOMIC_ONLY_USE_BUILTINS"               "ON"

		# NATIVE evaluated to 0
		deploy "-D" "HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL"          "1"
		deploy "-D" "HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL"        "1"
		deploy "-D" "LIBCXX_HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL"   "1"
		deploy "-D" "LIBCXX_HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL" "1"

		# Recommended by LLVM: compiler-rt/lib/builtins/CMakeLists.txt
		# "Skip the atomic builtin (these should normally be provided by a shared library)"
		# Did it say libgcc_s ? Or just wrong said
		deploy "-D" "COMPILER_RT_EXCLUDE_ATOMIC_BUILTIN" "ON"
		# deploy "-D" "COMPILER_RT_EXCLUDE_ATOMIC_BUILTIN" "OFF"
		# deploy "-D" "HAVE_CXX_ATOMICS_WITH_LIB:INTERNAL" "OFF"
		#
		deploy "-D" "COMPILER_RT_LIBCXX_PATH"            "$MAKE_DIR/libcxx"
		deploy "-D" "COMPILER_RT_LIBCXXABI_PATH"         "$MAKE_DIR/libcxxabi"
		#
		# NATIVE evaluated to nothing
		deploy "-D" "HAVE_CXX_ATOMICS_WITH_LIB:INTERNAL" "0"
		deploy "-D" "HAVE_CXX_LIBATOMICS64:INTERNAL"     "0"
		# NATIVE evaluated to 1
		deploy "-D" "HAVE_LIBATOMIC:INTERNAL"            "0"
		deploy "-D" "LIBCXX_HAS_ATOMIC_LIB:INTERNAL"     "0"
		deploy "-D" "CMAKE_EXPORT_COMPILE_COMMANDS:BOOL" "ON"
		# #include <fcntl.h>
		# bolt/runtime/common.h
		#define O_RDONLY 0
		#if defined(HAVE_FCNTL_H)
		# include <fcntl.h>
		#endif
		deploy "-D" "HAVE_FCNTL_H:INTERNAL" "1"
		deploy "-D" "HAVE_UNISTD_H:INTERNAL" "1"
		# https://stackoverflow.com/questions/47304919/building-and-using-a-pure-llvm-toolchain-for-c-on-linux
		#   Cannot enable BUILD_SHARED_LIBS with LLVM_LINK_LLVM_DYLIB.  We recommend
		#   disabling BUILD_SHARED_LIBS.
		# deploy "-D" "BUILD_SHARED_LIBS:BOOL"           "OFF"
		deploy "-D" "BUILD_SHARED_LIBS:BOOL"             "ON"
		# https://groups.google.com/g/polly-dev/c/vxumPMhrSEs
		# deploy "-D" "LLVM_LINK_LLVM_DYLIB"             "ON"
		deploy "-D" "LLVM_LINK_LLVM_DYLIB"               "OFF"

		deploy "-D" "LLVM_BUILD_LLVM_DYLIB"              "OFF"
		# alpine enabled this item
		deploy "-D" "LLVM_ENABLE_LIBEDIT"                "OFF"
		deploy "-D" "LLVM_ENABLE_SPHINX:BOOL"            "OFF"
		deploy "-D" "LLVM_INCLUDE_GO_TESTS"              "OFF"
		# Hardcoded
		deploy "-D" "LLVM_INCLUDE_BENCHMARKS"            "OFF"
		deploy "-D" "LLVM_BUILD_BENCHMARKS"              "OFF"

		deploy "-D" "LLVM_ENABLE_LIBXML2"                "OFF"

		# Might be ON
		deploy "-D" "LLVM_BUILD_TESTS"                   "ON"
		# deploy "-D" "LLVM_BUILD_TESTS"                   "OFF"
		# Depends on lit installed
		deploy "-D" "LLVM_INCLUDE_TESTS"                 "ON"
		# deploy "-D" "LLVM_INCLUDE_TESTS"                 "OFF"
		# deploy "-D" "NATIVE_LLVM_INCLUDE_TESTS:BOOL"     "ON"
		# LLVMTestingSupport not found in LLVM_AVAILABLE_LIBS

		deploy "-D" "LLVM_INCLUDE_EXAMPLES"              "OFF"
		deploy "-D" "LLVM_INCLUDE_DOCS"                  "OFF"

		# LLVM_ENABLE_LLD and LLVM_USE_LINKER can't be set at the same time
		# deploy "-D" "LLVM_USE_LINKER" "lld"
		# deploy "-U" "LLVM_USE_LINKER"
		deploy "-D" "LLVM_ENABLE_LLD"                    "ON"
		deploy "-D" "LLVM_ENABLE_RTTI"                   "ON"
		deploy "-D" "LLVM_ENABLE_THREADS:BOOL"           "ON"
		deploy "-D" "LLVM_INSTALL_UTILS:BOOL"            "ON"
		# Equal to -stdlib=libc++
		deploy "-D" "LLVM_ENABLE_LIBCXX:BOOL"            "ON"
		deploy "-D" "LLVM_ENABLE_LIBCXXABI:BOOL"         "ON"
		deploy "-D" "LLVM_HAVE_LIBXAR"                   "OFF"
		deploy "-D" "LLVM_BUILD_DOCS:BOOL"               "OFF"
		deploy "-D" "LLVM_BUILD_EXAMPLES"                "OFF"

		deploy "-D" "LLVM_PARALLEL_COMPILE_JOBS"         "$jobs"
		deploy "-D" "LLVM_PARALLEL_LINK_JOBS"            "$jobs"

		# llvm/cmake/modules/DetermineGCCCompatible.cmake
		#
		# llvm/cmake/modules/HandleLLVMOptions.cmake
		# if ( LLVM_COMPILER_IS_GCC_COMPATIBLE )
		# LLVM data structures like llvm::User and llvm::MDNode rely on
		# the value of object storage persisting beyond the lifetime of the
		# object (#24952).  This is not standard compliant and causes a runtime
		# crash if LLVM is built with GCC and LTO enabled (#57740).  Until
		# these bugs are fixed, we need to disable "dead store eliminations"
		# based on object lifetime.
		# add_flag_if_supported("-fno-lifetime-dse" CMAKE_CXX_FLAGS)
		# endif()
		#
		# llvm/cmake/modules/HandleLLVMStdlib.cmake
		# Not sure how to specify libc++ for this compiler
		# "-stdlib=libc++"
		# LLVM_ENABLE_LIBCXX add LLVM_COMPILER_IS_GCC_COMPATIBLE
		# Explicit append "-stdlib=libc++" to CMAKE_CXX_FLAGS
		# CMAKE_EXE_LINKER_FLAGS CMAKE_SHARED_LINKER_FLAGS and CMAKE_MODULE_LINKER_FLAGS
		# It means switch between "-stdlib=libc++" and "-stdlib=libstdc++" in the future ?
		# Switch this option will rebuild everyting
		deploy "-D" "LLVM_COMPILER_IS_GCC_COMPATIBLE"    "OFF"
		# If turn this option on, build times will increase significantly/dramatically (ten times?)

		# deploy "-D" "LLVM_COMPILER_IS_GCC_COMPATIBLE"  "ON"
		# LLVM_STATIC_LINK_CXX_STDLIB add LLVM_COMPILER_IS_GCC_COMPATIBLE
		# LLVM_STATIC_LINK_CXX_STDLIB -- for "-static-libstdc++" -- default set to OFF

		deploy "-D" "LLVM_ENABLE_FFI"                    "ON"
		deploy "-D" "LLVM_ENABLE_PIC"                    "ON"
		deploy "-D" "LLVM_ENABLE_ZLIB"                   "ON"
		deploy "-D" "LLVM_BUILD_TOOLS"                   "ON"
		# deploy "-D" "LLVM_USE_HOST_TOOLS"              "OFF"
		deploy "-D" "LLVM_USE_HOST_TOOLS"                "ON"
		deploy "-D" "LLVM_ENABLE_PROJECTS_USED"          "ON"
		deploy "-D" "LLVM_APPEND_VC_REV"                 "OFF"

		# For libunwind;pstl;libc;libcxxabi;libcxx
		# llvm/projects/CMakeLists.txt
		deploy "-D" "LLVM_FORCE_BUILD_RUNTIME"           "ON"


		deploy "-D" "RUNTIMES_BUILD_BUILTINS"            "ON"
		deploy "-D" "COMPILER_RT_BUILD_BUILTINS:BOOL"    "OFF"
		# deploy "-D" "COMPILER_RT_BUILD_BUILTINS:BOOL"  "ON"
		# compiler-rt/lib/CMakeLists.txt
		deploy "-D" "COMPILER_RT_BUILD_CRT:BOOL"         "ON"
		# Hardcoded to OFF
		deploy "-D" "LLVM_BUILD_EXTERNAL_COMPILER_RT"    "OFF"

		# deploy "-D" "COMPILER_RT_BAREMETAL_BUILD:BOOL" "ON"

		deploy "-D" "FFI_INCLUDE_DIR:PATH"                "$ffi_include_dir"
		deploy "-D" "LIBOMPTARGET_DEP_LIBFFI_INCLUDE_DIR" "$ffi_include_dir"

		# COMPILER_RT_DEFAULT_TARGET_TRIPLE isn't supported when building for default target only
		deploy "-D" "COMPILER_RT_DEFAULT_TARGET_ARCH"    "$libname"

		# # This setting will disable clang from being built ? -- don't worry :)
		# # set(CMAKE_TRY_COMPILE_TARGET_TYPE "STATIC_LIBRARY" CACHE STRING "")
		# https://stackoverflow.com/questions/54539682/how-to-set-up-cmake-to-cross-compile-with-clang-for-arm-embedded-on-windows
		# Don't run the linker on compiler check
		# set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)
		deploy "-D" "CMAKE_TRY_COMPILE_TARGET_TYPE"      "STATIC_LIBRARY"

		# "compiler-rt/cmake/Modules/CompilerRTUtils.cmake"
		# Refer to LLVM_TARGET_TRIPLE
		deploy "-D" "COMPILER_RT_DEFAULT_TARGET_TRIPLE"  "$LLVM_TARGET_TRIPLE"

		# For "--target"
		deploy "-D" "CMAKE_C_COMPILER_TARGET"            "$LLVM_TARGET_TRIPLE"
		deploy "-D" "CMAKE_CXX_COMPILER_TARGET"          "$LLVM_TARGET_TRIPLE"
		deploy "-D" "CMAKE_ASM_COMPILER_TARGET"          "$LLVM_TARGET_TRIPLE"
		deploy "-D" "CMAKE_CPP_COMPILER_TARGET"          "$LLVM_TARGET_TRIPLE"
		deploy "-D" "LLVM_RUNTIME_TARGETS"               "$LLVM_TARGET_TRIPLE"
		deploy "-D" "LLVM_BUILTIN_TARGETS:STRING"        "$LLVM_TARGET_TRIPLE"
		deploy "-D" "LLVM_INFERRED_HOST_TRIPLE"          "$KISS_XHOST_TRIPLE"

		[ "$libname" != "x86_64" ] || {
			deploy "-D" "HAS_i386_DEF:INTERNAL"          "0"
			deploy "-D" "HAS_i386_DEF:INTERNAL"          "0"
		}


		# No ffs implementation found
		deploy "-D" "HAVE_DECL_FFS"                      "ON"
		deploy "-D" "HAVE_DECL_STRCASECMP"               "ON"
		deploy "-D" "HAVE_DECL_STRNCASECMP"              "ON"
		deploy "-D" "HAVE_DECL_SNPRINTF"                 "ON"

		deploy "-D" "CMAKE_THREAD_LIBS_INIT"             "-lpthread"
		deploy "-D" "CMAKE_HAVE_THREADS_LIBRARY"         "1"
		deploy "-D" "CMAKE_USE_WIN32_THREADS_INIT"       "0"
		deploy "-D" "CMAKE_USE_PTHREADS_INIT"            "1"
		# set(THREADS_PREFER_PTHREAD_FLAG TRUE)
		deploy "-D" "THREADS_PREFER_PTHREAD_FLAG"        "ON"

		# Will be reseted in /usr/share/cmake-3.25/Modules/CMakeTestCCompiler.cmake
		# deploy "-D" "CMAKE_C_COMPILER_FORCED"          "ON"
		# deploy "-D" "CMAKE_CXX_COMPILER_FORCED"        "ON"


		deploy "-D" "POLLY_ENABLE_GPGPU_CODEGEN:BOOL"    "OFF"
		# if enabled, polly needs cuda or opencl. And NVPTX needs to be added to LLVM_TARGETS_TO_BUILD
		# deploy "-D" "POLLY_ENABLE_GPGPU_CODEGEN:BOOL"  "ON"

		deploy "-D" "LLVM_POLLY_LINK_INTO_TOOLS:BOOL"    "ON"

		# AllSupportedArchDefs.cmake
		if [ "$POLLY_ENABLE_GPGPU_CODEGEN" = "ON" ]; then
			# Refer to TARGET_ARCH
			deploy "-D" "LLVM_TARGETS_TO_BUILD:STRING"   "host;AMDGPU;NVPTX"
		else
			deploy "-D" "LLVM_TARGETS_TO_BUILD:STRING"   "host;AMDGPU"
			# deploy "-D" "LLVM_TARGETS_TO_BUILD:STRING" "host"
		fi

		deploy "-D" "LLVM_INSTALL_BINUTILS_SYMLINKS"     "ON"

		# include / lib under it?
		deploy "-D" "LLVM_BINARY_DIR:PATH"               "$OUTPUT_DIR"
		# deploy "-D" "LLVM_BINARY_DIR:PATH"                 "/$INSTALL_PREFIX"

		deploy "-D" "LLVM_OPTIMIZED_TABLEGEN"            "ON"
		deploy "-D" "LLVM_ENABLE_WERROR"                 "OFF"
		deploy "-D" "LLVM_USE_RELATIVE_PATHS_IN_DEBUG_INFO" "OFF"
		deploy "-D" "LLVM_USE_RELATIVE_PATHS_IN_FILES"   "ON"
		deploy "-D" "LLVM_HAVE_LINK_VERSION_SCRIPT"      "1"
		deploy "-D" "LLVM_SOURCE_PREFIX"                 "$MAKE_DIR"
		deploy "-D" "HAVE_LLVM_LIT"                      "ON"
		deploy "-D" "LLVM_LIT_ARGS"                      "-vv --show-unsupported --show-xfail -j $jobs"

		#
		# deploy "-D" "LLVM_LIT_ARGS"                    "-sv --show-unsupported --show-xfail -j $jobs"
		# PACKAGE_VERSION is not consistent
		# deploy "-D" "PACKAGE_VERSION"                  "$version_target"
		# deploy "-D" "LLVM_PACKAGE_VERSION"             "$version_target"
		# clang/CMakeLists.txt
		# Unlike PACKAGE_VERSION, CLANG_VERSION does not include LLVM_VERSION_SUFFIX.
		# set(CLANG_VERSION "${CLANG_VERSION_MAJOR}.${CLANG_VERSION_MINOR}.${CLANG_VERSION_PATCHLEVEL}")
		deploy "-D" "CLANG_VERSION"                      "$version_target"

		# https://llvm.org/docs/CMake.html
		# LLVM_USE_SANITIZER:STRING
		# Define the sanitizer used to build LLVM binaries and tests.
		# Possible values are Address, Memory, MemoryWithOrigins, Undefined,
		# Thread, DataFlow, and Address;Undefined. Defaults to empty string.
		# deploy "-D" "LLVM_USE_SANITIZER"               "Address;Undefined"
		deploy "-D" "LLVM_USE_SANITIZER"                 ""
		# deploy "-D" "LLVM_USE_SANITIZER"               "MemoryWithOrigins"
		# -D LLVM_USE_SANITIZER=MemoryWithOrigins
		[ ! -z "${LLVM_USE_SANITIZER:+x}" ] || {
			# compiler-rt/cmake/config-ix.cmake
			# if (SANITIZER_COMMON_SUPPORTED_ARCH AND NOT LLVM_USE_SANITIZER AND
			deploy "-D" "COMPILER_RT_HAS_SANITIZER_COMMON:BOOL" "ON"

			deploy "-D" "SANITIZER_COMMON_SUPPORTED_ARCH" "$libname"
			deploy "-D" "COMPILER_RT_BUILD_SANITIZERS:BOOL" "ON"
			deploy "-D" "COMPILER_RT_BUILD_GWP_ASAN"      "ON"
			# deploy "-D" "COMPILER_RT_HAS_GWP_ASAN"               "ON"
			#
			# "Use compiler-rt instead of libgcc"
			deploy "-D" "LIBCXX_USE_COMPILER_RT"          "ON"           # compiler-rt in libc++
		}

		deploy "-D" "COMPILER_RT_BUILD_STANDALONE_LIBATOMIC" "OFF"
		deploy "-D" "COMPILER_RT_USE_LIBCXX"              "ON"
		deploy "-D" "COMPILER_RT_USE_LLVM_UNWINDER:BOOL"  "ON"

		# deploy "-D" "COMPILER_RT_EMULATOR"              "ON"
		deploy "-D" "COMPILER_RT_EMULATOR"                "OFF"

		deploy "-D" "COMPILER_RT_BUILD_MEMPROF"           "OFF"
		deploy "-D" "COMPILER_RT_BUILD_XRAY"              "OFF"
		deploy "-D" "COMPILER_RT_BUILD_LIBFUZZER"         "OFF"
		deploy "-D" "COMPILER_RT_BUILD_ORC"               "OFF"
		deploy "-D" "COMPILER_RT_ENABLE_CET"              "OFF"
		# deploy "-D" "COMPILER_RT_INCLUDE_TESTS"         "OFF"
		deploy "-D" "COMPILER_RT_INCLUDE_TESTS"           "ON"
		deploy "-D" "LIBCXXABI_INCLUDE_TESTS"             "ON"
		deploy "-D" "LIBCXX_INCLUDE_TESTS:BOOL"           "ON"

		# option(LIBCXX_ENABLE_STD_MODULES
		#    "Whether to enable the building the C++23 `std` module. This feature is
		#     experimental and has additional dependencies. Only enable this when
		#     interested in testing or developing this module. See
		#     https://libcxx.llvm.org/Modules.html for more information." OFF)
		deploy "-D" "LIBCXX_ENABLE_STD_MODULES:BOOL"      "ON"

		deploy "-D" "LIBCXX_CONFIGURE_IDE:BOOL"           "ON"

		deploy "-D" "LIBCXXABI_LIBCXX_INCLUDES"           "libcxx/include"


		deploy "-D" "COMPILER_RT_BUILD_PROFILE"           "OFF"

		# DEFAULT_COMPILER_RT_USE_BUILTINS_LIBRARY => COMPILER_RT_USE_BUILTINS_LIBRARY
		# deploy "-D" "FUCHSIA" "ON"
		deploy "-D" "DEFAULT_COMPILER_RT_USE_BUILTINS_LIBRARY" "ON"

		deploy "-D" "COMPILER_RT_USE_BUILTINS_LIBRARY"    "ON"

		deploy "-D" "CMAKE_ASM_FLAGS_DEBUG:STRING"        "-g"

		# deploy "-D" "CMAKE_BUILD_TYPE:STRING" "Debug"
		# deploy "-D" "CMAKE_BUILD_TYPE:STRING" "RelWithDebInfo"
		deploy "-D" "CMAKE_BUILD_TYPE:STRING"             "Release"

		deploy "-D" "LLVM_ABI_BREAKING_CHECKS:STRING"     "FORCE_OFF"

		# ./NATIVE/include/llvm/Config/abi-breaking.h
		# ./include/llvm/Config/abi-breaking.h
		# LLVM_ENABLE_ABI_BREAKING_CHECKS in above two files depends on the following variable
		# deploy "-D" "LLVM_DISABLE_ABI_BREAKING_CHECKS_ENFORCING:BOOL" "OFF"
		# deploy "-D" "LLVM_DISABLE_ABI_BREAKING_CHECKS_ENFORCING:INTERNAL" "1"

		deploy "-D" "CMAKE_C_COMPILER:FILEPATH"           "/$INSTALL_PREFIX/lib/ccache/bin/clang"
		deploy "-D" "CMAKE_ASM_COMPILER:FILEPATH"         "/$INSTALL_PREFIX/lib/ccache/bin/clang"
		deploy "-D" "CMAKE_CXX_COMPILER:FILEPATH"         "/$INSTALL_PREFIX/lib/ccache/bin/clang++"
		deploy "-D" "CMAKE_CPP_COMPILER:FILEPATH"         "/$INSTALL_PREFIX/lib/ccache/bin/cpp"
		# Target system name (not lower)
		deploy "-D" "CMAKE_SYSTEM_NAME:STRING"            "$($KISS_ROOT/usr/bin/uname)"
		deploy "-D" "CMAKE_HOST_SYSTEM_NAME"              "$(/usr/bin/uname)"
		deploy "-D" "OS_NAME"                             "$($KISS_ROOT/usr/bin/uname)"
		deploy "-D" "CMAKE_CXX_COMPILER_CLANG_SCAN_DEPS"  "/$INSTALL_PREFIX/bin/clang-scan-deps"

		# Feo "--gcc-toolchain"
		# deploy "-D" "CMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN" "/$INSTALL_PREFIX"
		# deploy "-D" "CMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN" "/$INSTALL_PREFIX"


		deploy "-D" "LLVM_BUILD_GLOBAL_ISEL:BOOL"         "OFF"
		deploy "-D" "LLVM_TOOL_LLVM_MC_FUZZER_BUILD:BOOL" "ON"

		# An advanced variable will not be displayed in any of the cmake GUIs
		# unless the show advanced option is on.
		# In script mode, the advanced/non-advanced state has no effect.
		# deploy can not process "-"
		# deploy "-D" "CMAKE_MAKE_PROGRAM-ADVANCED:INTERNAL"                 "1"
		deploy "-D" "COMPILER_RT_HAS_FFREESTANDING_FLAG:INTERNAL" "1"
		deploy "-D" "COMPILER_RT_HAS_XRAY_COMPILER_FLAG:INTERNAL" "False"
		deploy "-D" "HAS_MAYBE_UNINITIALIZED:INTERNAL"    "1"
		# /working/toolchain/llvm/llvm-project/libc/cmake/modules/LLVMLibCArchitectures.cmake:21
		# elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "(x86_64)|(AMD64|amd64)|(^i.86$)")
		deploy "-D" "CMAKE_SYSTEM_PROCESSOR:STRING"       "x86_64"
		# Seems not used
		deploy "-D" "LIBCXX_STANDARD_VERSION:STRING"      "$cxx_standard_version"

		# LIBUNWIND_TARGET_TRIPLE is deprecated, please use CMAKE_CXX_COMPILER_TARGET instead
		# LIBUNWIND_SYSROOT, LIBUNWIND_TARGET_TRIPLE and LIBUNWIND_GCC_TOOLCHAIN are
		# not supported anymore, please use the native CMake equivalents instead
		# deploy "-D" "LIBUNWIND_SYSROOT"                 "$KISS_ROOT"
		# Hardcoded to OFF
		deploy "-D" "LIBUNWIND_USE_COMPILER_RT" "ON"
		#
		# /working/toolchain/llvm/official/libunwind/CMakeLists.txt
		# deploy "-D" "LIBUNWIND_COMPILE_FLAGS"   "\$ENV{KISS_LIBUNWIND_FLAGS}"
		#
		deploy "-D" "LIBUNWIND_ENABLE_STATIC"   "ON"
		deploy "-D" "LIBUNWIND_INSTALL_STATIC_LIBRARY"    "ON"

		{
		# Hardcoded in libunwind/CMakeLists.txt
		# deploy "-D" "LIBUNWIND_ENABLE_SHARED"   "OFF"
		deploy "-D" "LIBUNWIND_ENABLE_SHARED"   "ON"
		deploy "-D" "CXX_SUPPORTS_FNO_EXCEPTIONS_FLAG:INTERNAL" "1"
		deploy "-D" "CXX_SUPPORTS_FUNWIND_TABLES_FLAG:INTERNAL" "1"
		deploy "-D" "LIBUNWIND_INSTALL_SHARED_LIBRARY"    "ON"
		}

		deploy "-D" "LIBUNWIND_INSTALL_LIBRARY:BOOL"      "ON"

		deploy "-D" "LLVM_LIBGCC_EXPLICIT_OPT_IN:BOOL"    "Yes"

		deploy "-D" "LIBCXX_HAS_GCC_LIB:BOOL"            s "OFF"
		deploy "-D" "LIBCXX_HAS_GCC_S_LIB:BOOL"           "OFF"

		deploy "-D" "LIBUNWIND_HAS_GCC_LIB:BOOL"          "OFF"
		deploy "-D" "LIBUNWIND_HAS_GCC_S_LIB:BOOL"        "OFF"
		deploy "-D" "LIBUNWIND_USES_SJLJ_EXCEPTIONS:INTERNAL" "0"
		deploy "-D" "LIBUNWIND_DEFAULT_HIDE_SYMBOLS:BOOL" "OFF"
		deploy "-D" "LIBUNWIND_HAS_NODEFAULTLIBS_FLAG:BOOL" "OFF"
		# Conceptual
		deploy "-D" "LIBUNWIND_ENABLE_EXCEPTIONS"         "ON"

		[ "$libname" != "x86_64" ] || {
			# deploy "-D" "LIBUNWIND_ADDITIONAL_COMPILE_FLAGS" "\${LIBUNWIND_CXX_FLAGS}"
			deploy "-D" "LIBUNWIND_ADDITIONAL_COMPILE_FLAGS" "-D__x86_64__;-D__linux__;-D__ELF__"
			// log '$LIBUNWIND_ADDITIONAL_COMPILE_FLAGS' "$LIBUNWIND_ADDITIONAL_COMPILE_FLAGS"
			deploy "-D" "COMPILER_RT_ASAN_SHADOW_SCALE_DEFINITION" "$LIBUNWIND_ADDITIONAL_COMPILE_FLAGS"
		}

		deploy "-D" "LIBCXXABI_HAS_GCC_LIB:BOOL"          "OFF"
		deploy "-D" "LIBCXXABI_HAS_GCC_S_LIB:BOOL"        "OFF"

		deploy "-D" "COMPILER_RT_HAS_GCC_LIB:BOOL"        "OFF"
		deploy "-D" "COMPILER_RT_HAS_GCC_S_LIB:BOOL"      "OFF"
		deploy "-D" "COMPILER_RT_ENABLE_STATIC_UNWINDER"  "ON"

		deploy "-D" "LLDB_DISABLE_LIBEDIT:BOOL"           "ON"

		deploy "-D" "LLDB_DISABLE_PYTHON:BOOL"            "ON"
		deploy "-D" "LLDB_ENABLE_PYTHON:INTERNAL"         "0"
		# https://lldb.llvm.org/resources/build.html
		# -DLLDB_ENABLE_PYTHON=0
		# -DLLDB_ENABLE_LIBEDIT=0
		# -DLLDB_ENABLE_CURSES=0
		# -DLLVM_ENABLE_TERMINFO=0
		# foreach(var LLDB_PYTHON_RELATIVE_PATH LLDB_PYTHON_EXE_RELATIVE_PATH LLDB_PYTHON_EXT_SUFFIX)

		# Cmake runs for ever
		deploy "-D" "LLDB_ENABLE_LZMA"                    "OFF"
		deploy "-D" "LLDB_EXPORT_ALL_SYMBOLS:BOOL"        "ON"

		deploy "-D" "CMAKE_CXX_IMPLICIT_LINK_LIBRARIES:STRING"  "${LIBCXX_PREFIX}c++;m;c"
		deploy "-D" "CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES:PATHS" \
			"$RESOURCE_DIR/lib/$LLVM_DEFAULT_TARGET_TRIPLE;$SYSROOT/$INSTALL_PREFIX/lib/$LLVM_DEFAULT_TARGET_TRIPLE;$SYSROOT/$INSTALL_PREFIX/lib"
		# deploy "-D" "CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES:PATHS" "$KISS_ROOT/$INSTALL_PREFIX/lib"

		# In stage file
		# https://github.com/llvm/llvm-project
		# LLVM_ENABLE_PROJECTS can include any of: clang, clang-tools-extra, cross-project-tests, flang, libc, libclc, lld, lldb, mlir, openmp, polly, or pstl.
		# LLVM_ENABLE_RUNTIMES can include any of libcxx, libcxxabi, libunwind, compiler-rt, libc or openmp.
		# deploy "-D" "LLVM_ENABLE_PROJECTS:STRING" "clang;clang-tools-extra;lld;lldb;polly"
		# deploy "-D" "LLVM_ENABLE_PROJECTS:STRING" "clang;clang-tools-extra;lld;lldb"
		# deploy "-D" "LLVM_ENABLE_PROJECTS:STRING" "clang;clang-tools-extra;lld"
		# deploy "-D" "LLVM_ENABLE_PROJECTS:STRING" "llvm;clang;clang-tools-extra;lld;polly"
		# deploy "-D" "LLVM_ENABLE_PROJECTS:STRING" "all"
		# deploy "-D" "LLVM_ENABLE_PROJECTS:STRING" "llvm;clang;clang-tools-extra;lld"

		# deploy "-D" "CMAKE_CXX_LINK_FLAGS:STRING" "-l${LIBCXX_PREFIX}c++ -lc++abi -latomic -L${TOOL_LIB_ATOMIC_PATH} -L$KISS_ROOT/$INSTALL_PREFIX/lib -Wl,-rpath='\\\$ORIGIN/../lib'"
		# deploy "-D" "CMAKE_CXX_LINK_FLAGS:STRING" "-l${LIBCXX_PREFIX}c++ -lc++abi -latomic -L${TOOL_LIB_ATOMIC_PATH} -L$KISS_ROOT/$INSTALL_PREFIX/lib"
		# deploy "-D" "CMAKE_CXX_LINK_FLAGS:STRING" "-l${LIBCXX_PREFIX}c++ -lc++abi -L$KISS_ROOT/$INSTALL_PREFIX/lib -Wl,-rpath='\\\$ORIGIN/../lib'"

		# deploy "-D" "CMAKE_C_LINK_FLAGS:STRING"         "$ldflags"
		deploy "-D" "CMAKE_C_LINK_FLAGS:STRING"           "$LDFLAGS"
		# deploy "-D" "CMAKE_CXX_LINK_FLAGS:STRING"       "$ldflags"
		deploy "-D" "CMAKE_CXX_LINK_FLAGS:STRING"         "$LDFLAGS"

		# deploy "-D" "CMAKE_EXE_LINKER_FLAGS"            "-L$KISS_ROOT/$INSTALL_PREFIX/lib -l${LIBCXX_PREFIX}c++"
		# deploy "-D" "CMAKE_EXE_LINKER_FLAGS"            "$ldflags"
		deploy "-D" "CMAKE_EXE_LINKER_FLAGS"              "$LDFLAGS"
		deploy "-D" "CMAKE_SHARED_LINKER_FLAGS"           "$LDFLAGS"
		deploy "-D" "CMAKE_MODULE_LINKER_FLAGS"           "$LDFLAGS"
		# deploy "-D" "CMAKE_EXE_LINKER_FLAGS" "$ldflags \
		# -nostdlib \
		# -nostartfiles \
		# -nodefaultlibs \
		# Scrt1.o \
		# crti.o \
		# crtn.o \
		# libclang_rt.builtins-x86_64.a \
		# clang_rt.crtbegin-x86_64.o \
		# clang_rt.crtend-x86_64.o \
		# "

		# libc.so \

		# TRUE for glibc?
		deploy "-D" "LIBOMP_USE_QUAD_PRECISION:BOOL"      "FALSE"

		# set(LIBOMPTARGET_BUILD_DEVICERTL_BCLIB TRUE CACHE BOOL
		#   "Can be set to false to disable building this library.")
		# deploy "-D" "LIBOMPTARGET_BUILD_DEVICERTL_BCLIB"   "FALSE"
		deploy "-D" "LIBOMPTARGET_BUILD_DEVICERTL_BCLIB"  "TRUE"
		deploy "-D" "LIBOMP_ARCH"                         "x86_64"
		deploy "-D" "OPENMP_ENABLE_OMPTARGET"             "FALSE"
		deploy "-D" "OPENMP_ENABLE_OMP_TOOLS"             "FALSE"
		deploy "-D" "OPENMP_ENABLE_LIBOMPTARGET_PROFILING" "OFF"
		deploy "-D" "OPENMP_ENABLE_LIBOMP_PROFILING"      "OFF"
		deploy "-D" "OPENMP_USE_LLVM_UNWINDER"            "ON"

		deploy "-D" "LIBOMP_ENABLE_SHARED"                "ON"
		deploy "-D" "LIBOMP_ENABLE_RTTI"                  "OFF"
		deploy "-D" "LIBOMP_OMPT_SUPPORT"                 "OFF"
		deploy "-D" "LIBOMP_LIBFLAGS"                     "-lm"


		# DOXYGEN_DOT_EXECUTABLE=     #/usr/bin/dot
		! command -v "${DOXYGEN_DOT_EXECUTABLE-}" > /dev/null 2>&1 ||
		deploy "-D" "DOXYGEN_DOT_EXECUTABLE:FILEPATH"     "$DOXYGEN_DOT_EXECUTABLE"

		# DOXYGEN_EXECUTABLE=         #/usr/bin/doxygen
		! command -v "${DOXYGEN_EXECUTABLE-}" > /dev/null 2>&1 ||
		deploy "-D" "DOXYGEN_EXECUTABLE:FILEPATH"         "$DOXYGEN_EXECUTABLE"
		# deploy "-Wno-dev"
		# echo "-Wno-dev \\"
		# CMAKE_OPTIONS="$CMAKE_OPTIONS    -Wno-dev \\$newline"
		deploy "-W" "no-dev"

		# [Rewrite/improve the docs for LLVM_NATIVE_TOOL_DIR](https://github.com/llvm/llvm-project/commit/4cda8e62671fd15b7ba14763b004199fdee9e18b)
		# [How To Cross-Compile Clang/LLVM using Clang/LLVM](https://llvm.org/docs/HowToCrossCompileLLVM.html)
		# You may also want to set the LLVM_NATIVE_TOOL_DIR option - pointing at a directory
		# with prebuilt LLVM tools (llvm-tblgen, clang-tblgen etc) for the build host,
		# allowing you to them reuse them if available.
		# LLVM_NATIVE_TOOL_ROOT == NATIVE_DIR
		# LLVM does not have LLVM_NATIVE_TOOL_ROOT
		deploy "-D" "LLVM_NATIVE_TOOL_DIR:PATH"           "$NATIVE_DIR/$INSTALL_PREFIX/bin"
		# Do we need this?
		[ -d "$NATIVE_DIR/$INSTALL_PREFIX/lib" ]       ||
			// as_own "$NATIVE_DIR" \
			\mkdir -p "$NATIVE_DIR/$INSTALL_PREFIX/lib"
		[ -d "$NATIVE_DIR/$INSTALL_PREFIX/lib/cmake" ] ||
			// as_own "$NATIVE_DIR" \
			\mkdir -p "$NATIVE_DIR/$INSTALL_PREFIX/lib/cmake"
		[ -d "$LLVM_NATIVE_TOOL_DIR" ]                 ||
			// as_own "$NATIVE_DIR" \
			\mkdir -p "$LLVM_NATIVE_TOOL_DIR"
	# -D LD_LIBRARY_PATH=$( \
	#   path_prepend LD_LIBRARY_PATH "$KISS_ROOT/$INSTALL_PREFIX/lib"
	#   path_prepend LD_LIBRARY_PATH "$DESTDIR/$INSTALL_PREFIX/lib"
	#   path_prepend LD_LIBRARY_PATH "$DESTDIR/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE"
	#   path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/lib"
	#   path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE"
	#   path_prepend LD_LIBRARY_PATH "$NATIVE_DIR/$INSTALL_PREFIX/lib"
	#   path_prepend LD_LIBRARY_PATH "$NATIVE_DIR/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE"
	#   path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/NATIVE/lib"
	#   path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/NATIVE/lib/$LLVM_TARGET_TRIPLE"
	#   printf '%s' "$LD_LIBRARY_PATH"
	#   ) \
	# "
	# -D LLVM_TOOL_COMPILER_RT_BUILD:BOOL=ON; \
	# -D LLVM_TOOL_LIBCXX_BUILD:BOOL=ON; \
	# -D LLVM_TOOL_LIBCXXABI_BUILD:BOOL=ON; \
	# -D LLVM_TOOL_LIBUNWIND_BUILD:BOOL=ON; \
	# -D CLANG_INCLUDE_TESTS:BOOL=ON; \
	# -D LLVM_INCLUDE_TESTS:BOOL=ON; \
	# -D LLVM_BUILD_TESTS:BOOL=ON \

		deploy "-D" "LD_LIBRARY_PATH" "\
$toolchain_prefix/lib/$LLVM_TARGET_TRIPLE:\
$toolchain_prefix/lib\
"
# $DESTDIR/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE:\
# $DESTDIR/$INSTALL_PREFIX/lib\
	# $KISS_ROOT/$INSTALL_PREFIX/lib"
	# $OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE:\
	# $OUTPUT_DIR/lib:\

		[ ! -z "${toolchain_prefix:+x}" ] &&
		[ -z "${toolchain_prefix##*"$DESTDIR"*}" ] && {
			deploy "-D" "LLVM_TOOLS_BINARY_DIR:PATH"      "$SYSROOT/$INSTALL_PREFIX/bin"
			# Always according to current binaries of compilers/toolchain
			deploy "-D" "LLVM_CONFIG_PATH"                "$SYSROOT/$INSTALL_PREFIX/bin/llvm-config"
			# deploy "-D" "LLVM_NATIVE_TOOL_DIR"          "$NATIVE_DIR/$INSTALL_PREFIX/bin"
			# Always according to current source of target and might be prebuilt
			deploy "-D" "LLVM_TABLEGEN"                   "$SYSROOT/$INSTALL_PREFIX/bin/llvm-tblgen"
			# Always according to current source of target
			deploy "-D" "CLANG_TABLEGEN"                  "$SYSROOT/$INSTALL_PREFIX/bin/clang-tblgen"
		} || {
			deploy "-D" "LLVM_CONFIG_PATH"                "$toolchain_prefix/bin/llvm-config"
			# deploy "-D" "LLVM_CONFIG_PATH"              "/$INSTALL_PREFIX/bin/llvm-config"
			deploy "-D" "LLVM_TOOLS_BINARY_DIR:PATH"      "$OUTPUT_DIR/bin"
			# For bypassing llvm-tblgen and clang-tblgen
			# LLVM_NATIVE_TOOL_DIR
			# LLVM_TABLEGEN
			// war '$PATH' "$PATH"
			// war '$LLVM_TABLEGEN' "${LLVM_TABLEGEN-}"
			# deploy "-D" "LLVM_NATIVE_TOOL_DIR" "$OUTPUT_DIR/bin"
			[ ! -z "${LLVM_TABLEGEN:+x}" ] &&
			# It might has dots in the path
			# [ -z "${LLVM_TABLEGEN##*"$OUTPUT_DIR/bin/llvm-tblgen"*}" ] &&
			[ -z "${LLVM_TABLEGEN##*"$OUTPUT_DIR"*}" ] && {
				# This will change LLVM_TABLEGEN selection
				# deploy "-D" "LLVM_NATIVE_TOOL_DIR"      "$OUTPUT_DIR/bin"
				deploy "-D" "LLVM_TABLEGEN:STRING"        "$OUTPUT_DIR/bin/llvm-tblgen"
				# deploy "-D" "LLVM_CONFIG_PATH"           "/$INSTALL_PREFIX/bin/llvm-config"
				deploy "-D" "LLVM_TOOLS_BINARY_DIR:PATH"  "$OUTPUT_DIR/bin"
			} || {
				# deploy "-D" "LLVM_TABLEGEN:STRING" "/$INSTALL_PREFIX/bin/llvm-tblgen"
				# CMake Error: The inter-target dependency graph contains the following strongly connected component (cycle):
				#   "llvm-config" of type EXECUTABLE
				#     depends on "NativeLLVMConfig" (strong)
				#   "NativeLLVMConfig" of type UTILITY
				#     depends on "llvm-config" (strong)
				# At least one of these targets is not a STATIC_LIBRARY.  Cyclic dependencies are allowed only among static libraries.

				# [ -f "$OUTPUT_DIR/bin/llvm-config" ] || {
				#   [ -f "$DESTDIR/$INSTALL_PREFIX/bin/llvm-config" ] &&
				#   deploy "-D" "LLVM_CONFIG_PATH" "$DESTDIR/$INSTALL_PREFIX/bin/llvm-config" ||
				#   deploy "-D" "LLVM_CONFIG_PATH" "/$INSTALL_PREFIX/bin/llvm-config"
				# }
				:
			}
			// war '$CLANG_TABLEGEN' "${CLANG_TABLEGEN-}"
			[ ! -z "${CLANG_TABLEGEN:+x}" ] &&
			# It might has dots in the path
			# [ -z "${CLANG_TABLEGEN##*"$OUTPUT_DIR/bin/clang-tblgen"*}" ] && {
			[ -z "${CLANG_TABLEGEN##*"$OUTPUT_DIR"*}" ] && {
				# deploy "-D" "LLVM_NATIVE_TOOL_DIR"      "$OUTPUT_DIR/bin"
				deploy "-D" "CLANG_TABLEGEN:STRING"       "$OUTPUT_DIR/bin/clang-tblgen"
				# Export CLANG_TABLEGEN_EXE for use by flang docs.
				# deploy "-D" "CLANG_TABLEGEN_EXE:INTERNAL" "$OUTPUT_DIR/bin/clang-tblgen"
			} || {
				// log '$CLANG_TABLEGEN' "${CLANG_TABLEGEN-}"
				# deploy "-D" "CLANG_TABLEGEN:STRING" "/$INSTALL_PREFIX/bin/clang-tblgen"
				# Export CLANG_TABLEGEN_EXE for use by flang docs.
				# deploy "-D" "CLANG_TABLEGEN_EXE:INTERNAL" "/$INSTALL_PREFIX/bin/clang-tblgen"
				:
			}
		}

		# deploy "-D" "CROSS_TOOLCHAIN_FLAGS_LLVM_NATIVE:STRING"  ""
		deploy_combine "-D" "CROSS_TOOLCHAIN_FLAGS_LLVM_NATIVE" "\
-D LLVM_DIR=$OUTPUT_DIR/NATIVE/lib/cmake/llvm; \
-D CMAKE_C_FLAGS=$cflags; \
-D CMAKE_CXX_FLAGS=$cxxflags; \
-D CMAKE_CPP_FLAGS=$cxxflags; \
-D LLVM_NATIVE_TOOL_DIR=$LLVM_NATIVE_TOOL_DIR; \
-D LLVM_CONFIG_PATH=$LLVM_NATIVE_TOOL_DIR/llvm-config \
-D LLVM_TABLEGEN=$LLVM_NATIVE_TOOL_DIR/llvm-tblgen; \
-D CLANG_TABLEGEN=$LLVM_NATIVE_TOOL_DIR/clang-tblgen; \
-D LIBCXX_HARDENING_MODE:STRING=$LIBCXX_HARDENING_MODE; \
-D CLANG_DEFAULT_LINKER:STRING=ld.lld; \
-D LD_LIBRARY_PATH=$NATIVE_LD_LIBRARY_PATH; \
-D CMAKE_EXE_LINKER_FLAGS:STRING=$LDFLAGS; \
-D CMAKE_MODULE_LINKER_FLAGS:STRING=$LDFLAGS; \
-D CMAKE_SHARED_LINKER_FLAGS:STRING=$LDFLAGS; \
-D CMAKE_BUILD_TYPE=Release; \
-D CLANG_VERSION=$version_target; \
-D CMAKE_SYSROOT_COMPILE=$KISS_ROOT; \
-D CMAKE_SYSROOT=$KISS_ROOT; \
-D _CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES_INIT=; \
-D LLDB_ENABLE_PYTHON:INTERNAL=0 \
" "permanent" \
"$LLVM_TARGET_TRIPLE" "BUILTINS" "RUNTIMES" "BOOTSTRAP"

	# -D LIBCXX_ENABLE_ASSERTIONS:BOOL=ON; \
	# -D LLVM_DISABLE_ABI_BREAKING_CHECKS_ENFORCING:INTERNAL=1; \

		list_contains "$color_config" $TOOLCHAIN_LIST || {
			! // || / `merge_cache "$color_config" $TOOLCHAIN_LIST |
				awk -v rs="$RS" -v fs="$FS" 'BEGIN { FS = fs; RS = rs } \
			END { print "TOOLCHAIN_FILES=\""$1"\"; TOOLCHAIN_LIST=\""$2"\"" }' ||
			printf '%s\n' "return 1"`

			deploy "-D" "CMAKE_TOOLCHAIN_FILE" "$TOOLCHAIN_FILES"
		}

		list_contains "$crosscompiling_cmake" $TOOLCHAIN_LIST || {
			! // || / `merge_cache "$crosscompiling_cmake" $TOOLCHAIN_LIST |
				awk -v rs="$RS" -v fs="$FS" 'BEGIN { FS = fs; RS = rs } \
			END { print "TOOLCHAIN_FILES=\""$1"\"; TOOLCHAIN_LIST=\""$2"\"" }' ||
			printf '%s\n' "return 1"`

			deploy "-D" "CMAKE_TOOLCHAIN_FILE"            "$TOOLCHAIN_FILES"
		}
	}

	// common_options_init "$TOOLCHAIN_PREFIX"

	# THe thing is the sequence, not the existence
	fix_cmakecxxcompiler() {
		local output_dir="$1"
		local target_file
		for target_file in $(find "$output_dir" -name CMakeCXXCompiler.cmake); do
			# sed \
			# 	-e "s#;$KISS_ROOT/include\$##g" \
			# 	-e "s#;$KISS_ROOT/usr/include\$##g" \
			# 	-e "s#;$KISS_ROOT/usr/local/include\$##g" \
			# 	< "$target_file" > _
			# mv -f _ "$target_file"
			# // log "$target_file" "'$KISS_ROOT/usr/include' cleared"
			local recommended_cxx_implicit_include="$(printf '%s' "$CPLUS_INCLUDE_PATH" | tr ':' ';')"
			local key_value="$recommended_cxx_implicit_include"

			local key_type="STRING"
			local key_name="CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES"

			local new_entry=
			new_entry="$(// delegate -- entry_template "$key_type" "$key_name" \
				"$key_value" "permanent")"

			local item="$(awk -v key_name="$key_name" "\$3 == key_name { print }" < "$target_file")"

			sed -i -e "/\b$key_name\b/d" "$target_file" ||
				// die '$new_entry' "'$new_entry' removing failed"

			printf '%s\n' "$new_entry" >> "$target_file" ||
			  // die '$new_entry' "'$new_entry' insert failed"

			# update_builtins_flags "$target_file" \
			# 	"-D" "CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES" "$recommended_cxx_implicit_include" "permanent"

			// log "The '$KISS_ROOT/usr/include' location in${newline}\
				CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES has been reset in" "$target_file"
		done
	}

	fix_cmakecxxcompiler "$OUTPUT_DIR"

	target_flags_updated() {
		local toolchain_prefix="$1"
		local sysroot="$(// delegate -- to_sysroot "$toolchain_prefix")"
		local version_system="$(// delegate to_version "$sysroot/$INSTALL_PREFIX")"
		local resource_dir="$sysroot/$INSTALL_PREFIX/lib/clang/$version_system"

		# local resource_dir="$RESOURCE_DIR"

		# 0 means true
		local updated=0

		{
			[ ! -z "${RUNTIMES_TARGET_CMAKE_C_FLAGS:+x}" ] &&
			[ -z "${RUNTIMES_TARGET_CMAKE_C_FLAGS##*"-resource-dir=$resource_dir"*}" ]
		} && {
			[ ! -z "${RUNTIMES_TARGET_CMAKE_CXX_FLAGS:+x}" ] &&
			[ -z "${RUNTIMES_TARGET_CMAKE_CXX_FLAGS##*"-resource-dir=$resource_dir"*}" ]
		} && {
			[ ! -z "${BUILTINS_TARGET_CMAKE_LDFLAGS:+x}" ] &&
			[ -z "${BUILTINS_TARGET_CMAKE_LDFLAGS##*"-resource-dir=$resource_dir"*}" ]
		} ||
			updated=1

		return $updated
	}

	builtins_target_flags() {
		_level_2
		local toolchain_prefix="$1"
		# local runtimes_individual="${2-}"
		local sysroot="$(// delegate -- to_sysroot "$toolchain_prefix")"
		local version_system="$(// delegate to_version "$sysroot/$INSTALL_PREFIX")"
		# local toolchain_version="$(// delegate to_version "$toolchain_prefix")"
		local resource_dir="$sysroot/$INSTALL_PREFIX/lib/clang/$version_system"

		[ ! -z "${cflags:+x}" ] && [ -z "${cflags##*"-fPIC"*}" ] ||
			// die '-fPIC' "should be included in \$cflags"

		[ ! -z "${cflags:+x}" ] && [ -z "${cflags##*"--sysroot=${KISS_ROOT}"*}" ] ||
			// die "--sysroot=${KISS_ROOT}" "should be included in \$cflags"

		# local resource_dir="$DESTDIR/$INSTALL_PREFIX/lib/clang/$version_target"
		# [ ! -z "${toolchain_prefix:+x}" ] &&
		# [ -z "${toolchain_prefix##*"$DESTDIR"*}" ] ||
		# local resource_dir="$RESOURCE_DIR"

		[ -d "$RESOURCE_DIR" ] || // die '$RESOURCE_DIR' "does not exist '$RESOURCE_DIR'"
		[ -d "$resource_dir" ]      || // die '$resource_dir' "does not exist '$resource_dir'"
		[ -z "${resource_dir##*"$RESOURCE_DIR"*}" ] || {

			[ "${RESOURCE_DIR##*/}" = "$version_system" ] || {
				// war '$RESOURCE_DIR' "$RESOURCE_DIR"
				// war '$resource_dir' "$resource_dir"
				// war '$version_system' "$version_system"
				// die 'FATAL' "builtins resource version should be equal to toolchain version"
			}
		}

		# -resource-dir=$RESOURCE_DIR \
		# -B$BINDIR_HOST \
		RUNTIMES_TARGET_CMAKE_C_FLAGS=" \
-isystem $resource_dir/include \
-isystem $SYSROOT/$INSTALL_PREFIX/include \
"
		# case "$SYSROOT" in *"$DESTDIR"*)
		case "$RUNTIMES_TARGET_CMAKE_C_FLAGS" in *"-isystem $XHOST_PREFIX/include"*)
			;;
		*)
			RUNTIMES_TARGET_CMAKE_C_FLAGS="$RUNTIMES_TARGET_CMAKE_C_FLAGS \
-isystem $XHOST_PREFIX/include \
"
		esac
		# esac

		# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/llvm_libc_wrappers \

		# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/openmp_wrappers \
		# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/cuda_wrappers \
		# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/ppc_wrappers \
		# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include \
		# -isystem $OUTPUT_DIR/runtimes/runtimes-bins/pstl/generated_headers \
		# -isystem $MAKE_DIR/pstl/include \
		# -isystem $MAKE_DIR/clang/lib/Headers \
		#
		# -isystem $KISS_ROOT/$INSTALL_PREFIX/include \
		# -fPIC --sysroot=${KISS_ROOT} \

		RUNTIMES_TARGET_CMAKE_C_FLAGS=" \
$RUNTIMES_TARGET_CMAKE_C_FLAGS \
$cflags \
-resource-dir=$resource_dir \
-B$toolchain_prefix/bin \
"

		export RUNTIMES_TARGET_CMAKE_C_FLAGS
		# deploy "-D" "ENV{RUNTIMES_TARGET_CMAKE_C_FLAGS}" "$RUNTIMES_TARGET_CMAKE_C_FLAGS"
		# deploy "-D" "ENV{RUNTIMES_x86_64-linux-musl_RUNTIMES_TARGET_CMAKE_C_FLAGS}" "$RUNTIMES_TARGET_CMAKE_C_FLAGS"
		# deploy "-D" "ENV{BUILTINS_x86_64-linux-musl_RUNTIMES_TARGET_CMAKE_C_FLAGS}" "$RUNTIMES_TARGET_CMAKE_C_FLAGS"
		// log '$RUNTIMES_TARGET_CMAKE_C_FLAGS' "$RUNTIMES_TARGET_CMAKE_C_FLAGS"

		[ ! -z "${cxxflags:+x}" ] && [ -z "${cxxflags##*"-D _LIBCPP_STD_VER=$standard_version_number"*}" ] ||
			// die "-D _LIBCPP_STD_VER=$standard_version_number" "should be included in \$cxxflags"

		# -resource-dir=$RESOURCE_DIR \
		# -B$BINDIR_HOST \

		RUNTIMES_TARGET_CMAKE_CXX_FLAGS=""

#       RUNTIMES_TARGET_CMAKE_CXX_FLAGS=" \
# -isystem $toolchain_prefix/include/c++/v1 \
# "
#
#       case "$toolchain_prefix" in
#           *"$DESTDIR/$INSTALL_PREFIX"*)
#
#           RUNTIMES_TARGET_CMAKE_CXX_FLAGS=" \
# -isystem $toolchain_prefix/include/c++/v1 \
# -isystem $resource_dir/include \
# -isystem $toolchain_prefix/include \
# "
# # -isystem $KISS_ROOT/$INSTALL_PREFIX/include/c++/v1 \
# # -isystem $KISS_ROOT/$INSTALL_PREFIX/include \
# ;;
#           *"$KISS_ROOT/$INSTALL_PREFIX"*)
#           RUNTIMES_TARGET_CMAKE_CXX_FLAGS=" \
# -isystem $KISS_ROOT/$INSTALL_PREFIX/include/c++/v1 \
# -isystem $resource_dir/include \
# -isystem $toolchain_prefix/include \
# "
#       esac

		# case "$toolchain_prefix" in *"$DESTDIR/$INSTALL_PREFIX"*)
#       case "$toolchain_prefix" in *"$KISS_ROOT/$INSTALL_PREFIX"*)
#           # [ ! -z "${runtimes_individual:+x}" ] ||
#           RUNTIMES_TARGET_CMAKE_CXX_FLAGS=" \
# ${RUNTIMES_TARGET_CMAKE_CXX_FLAGS-} \
# -isystem $KISS_ROOT/$INSTALL_PREFIX/include/c++/v1 \
# "
#       esac
		# Did it in config_site
		# [ -d "$DESTDIR/$INSTALL_PREFIX/include/c++/v1" ] ||
		#   as_own "$DESTDIR" \mkdir -p "$DESTDIR/$INSTALL_PREFIX/include/c++/v1"

		# ! empty "$DESTDIR/$INSTALL_PREFIX/include/c++/v1" ||
		# {
		#   as_own "$DESTDIR" rsync -aq "$KISS_ROOT/$INSTALL_PREFIX/include/c++/v1/." "$DESTDIR/$INSTALL_PREFIX/include/c++/v1/"
		#   as_own "$DESTDIR" sync
		# }

		RUNTIMES_TARGET_CMAKE_CXX_FLAGS=" \
${RUNTIMES_TARGET_CMAKE_CXX_FLAGS-} \
-isystem $resource_dir/include \
-isystem $SYSROOT/$INSTALL_PREFIX/include \
"
# -isystem $OUTPUT_DIR/lib/clang/$version_system/include \
# -isystem $resource_dir/include \

		# case "$SYSROOT" in *"$DESTDIR"*)
		case "$RUNTIMES_TARGET_CMAKE_CXX_FLAGS" in *"-isystem $XHOST_PREFIX/include"*)
			;;
		*)
			RUNTIMES_TARGET_CMAKE_CXX_FLAGS=" \
$RUNTIMES_TARGET_CMAKE_CXX_FLAGS \
-isystem $XHOST_PREFIX/include \
"
		esac
		# esac

		RUNTIMES_TARGET_CMAKE_CXX_FLAGS=" \
$RUNTIMES_TARGET_CMAKE_CXX_FLAGS \
$cxxflags \
-resource-dir=$resource_dir \
-B$toolchain_prefix/bin \
"

		# $cflags \
		# -isystem $DESTDIR/$INSTALL_PREFIX/include/c++/v1 \

		# -isystem $OUTPUT_DIR/include/$LLVM_DEFAULT_TARGET_TRIPLE/c++/v1 \
		# -isystem $DESTDIR/$INSTALL_PREFIX/lib/clang/$version_target_major/include/c++/v1 \
		# -isystem $OUTPUT_DIR/include/c++/v1 \
		# -isystem $MAKE_DIR/libcxx/include \
		#
		# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/llvm_libc_wrappers \
		#
		# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/openmp_wrappers \
		# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/cuda_wrappers \
		# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include/ppc_wrappers \
		# -isystem $OUTPUT_DIR/lib/clang/$version_target_major/include \
		# -isystem $OUTPUT_DIR/runtimes/runtimes-bins/pstl/generated_headers \
		# -isystem $MAKE_DIR/pstl/include \
		# -isystem $MAKE_DIR/clang/lib/Headers \
		#
		# ignoring nonexistent directory "/tmp/root/kiss/proc/make/llvm/objects/include/$LLVM_DEFAULT_TARGET_TRIPLE/c++/v1"
		# ignoring nonexistent directory "/working/kiss/proc/pkg/llvm/usr/lib/clang/18/include/c++/v1"
		# ignoring nonexistent directory "/tmp/root/kiss/proc/make/llvm/objects/include/c++/v1"
		# ignoring nonexistent directory "/tmp/root/kiss/proc/make/llvm/objects/runtimes/runtimes-bins/pstl/generated_headers"
		# ignoring duplicate directory "/opt/kiss/usr/include"
		# ignoring duplicate directory "/working/kiss/proc/pkg/llvm/usr/include"

		# -isystem $KISS_ROOT/$INSTALL_PREFIX/include \
		# -D_LIBCPP_STD_VER=$standard_version_number \
		# -fPIC --sysroot=${KISS_ROOT} \

		export RUNTIMES_TARGET_CMAKE_CXX_FLAGS
		# deploy "-D" "ENV{RUNTIMES_TARGET_CMAKE_CXX_FLAGS}" "$RUNTIMES_TARGET_CMAKE_CXX_FLAGS"
		# deploy "-D" "ENV{RUNTIMES_x86_64-linux-musl_RUNTIMES_TARGET_CMAKE_CXX_FLAGS}" "$RUNTIMES_TARGET_CMAKE_CXX_FLAGS"
		# deploy "-D" "ENV{BUILTINS_x86_64-linux-musl_RUNTIMES_TARGET_CMAKE_CXX_FLAGS}" "$RUNTIMES_TARGET_CMAKE_CXX_FLAGS"
		// log '$RUNTIMES_TARGET_CMAKE_CXX_FLAGS' "$RUNTIMES_TARGET_CMAKE_CXX_FLAGS"

		# -resource-dir=$RESOURCE_DIR \
		# -Wl,-L $RESOURCE_DIR/lib/linux \
		# -Wl,-L $SYSROOT_LIB \
		BUILTINS_TARGET_CMAKE_LDFLAGS=" \
-resource-dir=$resource_dir \
-L $OUTPUT_DIR/lib/clang/$version_system/lib/$LLVM_TARGET_TRIPLE \
-L $OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE \
-Wl,-rpath=XORIGIN/../lib/$LLVM_TARGET_TRIPLE \
"
		[ ! -d "$resource_dir/lib/linux" ] ||
		BUILTINS_TARGET_CMAKE_LDFLAGS=" $BUILTINS_TARGET_CMAKE_LDFLAGS \
-L $resource_dir/lib/$LLVM_DEFAULT_TARGET_TRIPLE \
-Wl,-rpath=XORIGIN/../lib/clang/$version_target/lib/$LLVM_TARGET_TRIPLE \
-L $resource_dir/lib/linux \
-Wl,-rpath=XORIGIN/../lib/clang/$version_target/lib/linux \
"
		[ ! -d "$SYSROOT/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE" ] ||
		BUILTINS_TARGET_CMAKE_LDFLAGS=" $BUILTINS_TARGET_CMAKE_LDFLAGS \
-L $SYSROOT/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE \
"
		BUILTINS_TARGET_CMAKE_LDFLAGS=" $BUILTINS_TARGET_CMAKE_LDFLAGS \
-L $SYSROOT/$INSTALL_PREFIX/lib \
-Wl,-rpath=XORIGIN/../lib \
$ldflags \
"
		# $ldflags \

		export BUILTINS_TARGET_CMAKE_LDFLAGS
		# deploy "-D" "ENV{BUILTINS_TARGET_CMAKE_LDFLAGS}" "$BUILTINS_TARGET_CMAKE_LDFLAGS"
		# deploy "-D" "ENV{BUILTINS_x86_64-linux-musl_BUILTINS_TARGET_CMAKE_LDFLAGS}" "$BUILTINS_TARGET_CMAKE_LDFLAGS"
		# deploy "-D" "ENV{RUNTIMES_x86_64-linux-musl_BUILTINS_TARGET_CMAKE_LDFLAGS}" "$BUILTINS_TARGET_CMAKE_LDFLAGS"
		// log '$BUILTINS_TARGET_CMAKE_LDFLAGS' "$BUILTINS_TARGET_CMAKE_LDFLAGS"

	}

	compiler_rt_library() {
		# /tmp/root/kiss/objects/llvm/tools/clang/stage2-bins/./lib/clang/18/lib/linux/libclang_rt.builtins-x86_64.a
		COMPILER_RT_LIBRARY_builtins_x86_64-linux-musl:INTERNAL=
	}

	target_flags_updated "$TOOLCHAIN_PREFIX" ||
		// builtins_target_flags "$TOOLCHAIN_PREFIX"
		# // builtins_target_flags "$KISS_ROOT/$INSTALL_PREFIX" "runtimes_individual"

	# /usr/bin/ash: eval: /usr/bin/cmake: Argument list too long
	runtimes_use_intermediate_flags() {
		_level_2
		# local target="$1"
		# shift 1
		# local toolchain_prefix="$1"
		local toolchain_prefix="$1"
		local sysroot="$(// delegate -- to_sysroot "$toolchain_prefix")"
		local version_system="$(// delegate to_version "$sysroot/$INSTALL_PREFIX")"
		# local toolchain_version="$(// delegate to_version "$toolchain_prefix")"
		# local runtimes_individual="${2-}"

		local triple="$LLVM_TARGET_TRIPLE"
		deploy "-D" "LLVM_BUILD_RUNTIMES" "ON"

		# Looks weird, just try it
		# deploy "-D" "COMPILER_RT_STANDALONE_BUILD" "ON"
		# # In tree build (bootstrap build)
		# deploy "-D" "LLVM_RUNTIMES_BUILD" "OFF"

		deploy "-D" "BUILTINS_${triple}_CROSS_TOOLCHAIN_FLAGS_LLVM_NATIVE" "\
-D LLVM_DIR=$OUTPUT_DIR/NATIVE/lib/cmake/llvm; \
-D CMAKE_C_FLAGS=$cflags; \
-D CMAKE_CXX_FLAGS=$cxxflags; \
-D CMAKE_CPP_FLAGS=$cxxflags; \
-D LLVM_NATIVE_TOOL_DIR=$LLVM_NATIVE_TOOL_DIR; \
-D LLVM_CONFIG_PATH=$LLVM_NATIVE_TOOL_DIR/llvm-config; \
-D LLVM_TABLEGEN=$LLVM_NATIVE_TOOL_DIR/llvm-tblgen; \
-D CLANG_TABLEGEN=$LLVM_NATIVE_TOOL_DIR/clang-tblgen; \
-D LIBCXX_HARDENING_MODE:STRING=$LIBCXX_HARDENING_MODE; \
-D CLANG_DEFAULT_LINKER:STRING=ld.lld; \
-D LD_LIBRARY_PATH=$NATIVE_LD_LIBRARY_PATH; \
-D CMAKE_EXE_LINKER_FLAGS:STRING=$LDFLAGS; \
-D CMAKE_MODULE_LINKER_FLAGS:STRING=$LDFLAGS; \
-D CMAKE_SHARED_LINKER_FLAGS:STRING=$LDFLAGS; \
-D CMAKE_BUILD_TYPE=Release; \
-D CLANG_VERSION=$version_target; \
-D CMAKE_SYSROOT_COMPILE=$KISS_ROOT; \
-D CMAKE_SYSROOT=$KISS_ROOT; \
-D _CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES_INIT=; \
-D LLDB_ENABLE_PYTHON:INTERNAL=0 \
"
	# -D LIBCXX_ENABLE_ASSERTIONS:BOOL=ON; \
	# -D LLVM_DISABLE_ABI_BREAKING_CHECKS_ENFORCING:INTERNAL=1; \
	# -D LD_LIBRARY_PATH=$( \
	#   path_prepend LD_LIBRARY_PATH "$KISS_ROOT/$INSTALL_PREFIX/lib"
	#   path_prepend LD_LIBRARY_PATH "$DESTDIR/$INSTALL_PREFIX/lib"
	#   path_prepend LD_LIBRARY_PATH "$DESTDIR/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE"
	#   path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/lib"
	#   path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE"
	#   path_prepend LD_LIBRARY_PATH "$LLVM_NATIVE_TOOL_DIR/../lib"
	#   path_prepend LD_LIBRARY_PATH "$LLVM_NATIVE_TOOL_DIR/../lib/$LLVM_TARGET_TRIPLE"
	#   path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/NATIVE/lib"
	#   path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/NATIVE/lib/$LLVM_TARGET_TRIPLE"
	#   printf '%s' "$LD_LIBRARY_PATH"
	#   ) \
	# "
		deploy "-D" "RUNTIMES_${triple}_CROSS_TOOLCHAIN_FLAGS_LLVM_NATIVE" "\
-D LLVM_DIR=$OUTPUT_DIR/NATIVE/lib/cmake/llvm; \
-D CMAKE_C_FLAGS=$cflags; \
-D CMAKE_CXX_FLAGS=$cxxflags; \
-D CMAKE_CPP_FLAGS=$cxxflags; \
-D LLVM_NATIVE_TOOL_DIR=$LLVM_NATIVE_TOOL_DIR; \
-D LLVM_CONFIG_PATH=$LLVM_NATIVE_TOOL_DIR/llvm-config; \
-D LLVM_TABLEGEN=$LLVM_NATIVE_TOOL_DIR/llvm-tblgen; \
-D CLANG_TABLEGEN=$LLVM_NATIVE_TOOL_DIR/clang-tblgen; \
-D LIBCXX_HARDENING_MODE:STRING=$LIBCXX_HARDENING_MODE; \
-D CLANG_DEFAULT_LINKER:STRING=ld.lld; \
-D LD_LIBRARY_PATH=$NATIVE_LD_LIBRARY_PATH; \
-D CMAKE_EXE_LINKER_FLAGS:STRING=$LDFLAGS; \
-D CMAKE_MODULE_LINKER_FLAGS:STRING=$LDFLAGS; \
-D CMAKE_SHARED_LINKER_FLAGS:STRING=$LDFLAGS; \
-D CMAKE_BUILD_TYPE=Release; \
-D CLANG_VERSION=$version_target; \
-D CMAKE_SYSROOT_COMPILE=$KISS_ROOT; \
-D CMAKE_SYSROOT=$KISS_ROOT; \
-D _CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES_INIT=; \
-D LLDB_ENABLE_PYTHON:INTERNAL=0 \
"
	# -D LIBCXX_ENABLE_ASSERTIONS:BOOL=ON; \
	# -D LLVM_DISABLE_ABI_BREAKING_CHECKS_ENFORCING:INTERNAL=1; \
	# -D LD_LIBRARY_PATH=$( \
	#   path_prepend LD_LIBRARY_PATH "$KISS_ROOT/$INSTALL_PREFIX/lib"
	#   path_prepend LD_LIBRARY_PATH "$DESTDIR/$INSTALL_PREFIX/lib"
	#   path_prepend LD_LIBRARY_PATH "$DESTDIR/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE"
	#   path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/lib"
	#   path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE"
	#   path_prepend LD_LIBRARY_PATH "$LLVM_NATIVE_TOOL_DIR/../lib"
	#   path_prepend LD_LIBRARY_PATH "$LLVM_NATIVE_TOOL_DIR/../lib/$LLVM_TARGET_TRIPLE"
	#   path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/NATIVE/lib"
	#   path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/NATIVE/lib/$LLVM_TARGET_TRIPLE"
	#   printf '%s' "$LD_LIBRARY_PATH"
	#   ) \
	# "

	# No NATIVE
		deploy "-D" "BUILTINS_${triple}_LD_LIBRARY_PATH" "\
$SYSROOT/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE:\
$SYSROOT/$INSTALL_PREFIX/lib\
"
# $DESTDIR/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE:\
# $DESTDIR/$INSTALL_PREFIX/lib\
# $OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE:\
# $OUTPUT_DIR/lib:\
	# $DESTDIR/$INSTALL_PREFIX/lib:\
	# $KISS_ROOT/$INSTALL_PREFIX/lib"
	# No NATIVE
		deploy "-D" "RUNTIMES_${triple}_LD_LIBRARY_PATH" "\
$SYSROOT/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE:\
$SYSROOT/$INSTALL_PREFIX/lib\
"
# $DESTDIR/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE:\
# $DESTDIR/$INSTALL_PREFIX/lib\
# $OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE:\
# $OUTPUT_DIR/lib:\
	# $DESTDIR/$INSTALL_PREFIX/lib:\
	# $KISS_ROOT/$INSTALL_PREFIX/lib"

		[ ! -z "${toolchain_prefix##*"$DESTDIR"*}" ] || {
			deploy "-D" "BUILTINS_${triple}_PRINT_RTLIB_FILE_NAME"      "ON"
			deploy "-D" "RUNTIMES_${triple}_PRINT_RTLIB_FILE_NAME"      "ON"
		}

		[ "$libname" != "x86_64" ] || {
			deploy "-D" "BUILTINS_${triple}_CAN_TARGET_x86_64"          "ON"
			deploy "-D" "RUNTIMES_${triple}_CAN_TARGET_x86_64"          "ON"
		}

		deploy "-D" "BUILTINS_${triple}_COMPILER_RT_HAS_GCC_LIB:BOOL"   "OFF"
		deploy "-D" "BUILTINS_${triple}_COMPILER_RT_HAS_GCC_S_LIB:BOOL" "OFF"

		deploy "-D" "RUNTIMES_${triple}_COMPILER_RT_HAS_GCC_LIB:BOOL"   "OFF"
		deploy "-D" "RUNTIMES_${triple}_COMPILER_RT_HAS_GCC_S_LIB:BOOL" "OFF"

		deploy "-D" "BUILTINS_${triple}_OS_NAME"                        "$($KISS_ROOT/usr/bin/uname)"
		deploy "-D" "RUNTIMES_${triple}_OS_NAME"                        "$($KISS_ROOT/usr/bin/uname)"

		# deploy "-D" "BUILTINS_${triple}_LLVM_USE_SANITIZER" "Address;Undefined"
		# deploy "-D" "RUNTIMES_${triple}_LLVM_USE_SANITIZER" "Address;Undefined"
		deploy "-D" "BUILTINS_${triple}_LLVM_USE_SANITIZER"             "$LLVM_USE_SANITIZER"
		deploy "-D" "RUNTIMES_${triple}_LLVM_USE_SANITIZER"             "$LLVM_USE_SANITIZER"

		deploy "-D" "BUILTINS_${triple}_LIBCXX_ENABLE_PARALLEL_ALGORITHMS" "ON"
		deploy "-D" "RUNTIMES_${triple}_LIBCXX_ENABLE_PARALLEL_ALGORITHMS" "ON"

		deploy "-D" "BUILTINS_${triple}_CLANG_CONFIG_FILE_SYSTEM_DIR"   "/etc/clang/$version_target"
		deploy "-D" "RUNTIMES_${triple}_CLANG_CONFIG_FILE_SYSTEM_DIR"   "/etc/clang/$version_target"

		deploy "-D" "BUILTINS_${triple}_CMAKE_BUILD_WITH_INSTALL_RPATH" "ON"
		deploy "-D" "RUNTIMES_${triple}_CMAKE_BUILD_WITH_INSTALL_RPATH" "ON"

		deploy "-D" "BUILTINS_${triple}_LIBCXXABI_HAS_CXA_THREAD_ATEXIT_IMPL:INTERNAL" "0"
		deploy "-D" "RUNTIMES_${triple}_LIBCXXABI_HAS_CXA_THREAD_ATEXIT_IMPL:INTERNAL" "0"

		modules_prepare
		deploy "-D" "BUILTINS_${triple}_CMAKE_MODULE_PATH"              "$CMAKE_MODULE_PATH"
		deploy "-D" "RUNTIMES_${triple}_CMAKE_MODULE_PATH"              "$CMAKE_MODULE_PATH"

		deploy "-D" "BUILTINS_${triple}_CCACHE_PROGRAM"                 "$CCACHE_PROGRAM"
		deploy "-D" "RUNTIMES_${triple}_CCACHE_PROGRAM"                 "$CCACHE_PROGRAM"

		deploy "-D" "BUILTINS_${triple}_LLVM_CCACHE_MAXSIZE:STRING"     "16GB"
		deploy "-D" "BUILTINS_${triple}_LLVM_CCACHE_DIR:PATH"           "$CCACHE_DIR"

		deploy "-D" "RUNTIMES_${triple}_LLVM_CCACHE_MAXSIZE:STRING"     "16GB"
		deploy "-D" "RUNTIMES_${triple}_LLVM_CCACHE_DIR:PATH"           "$CCACHE_DIR"

		[ ! -z "${CCACHE_NOHASHDIR+x}" ] && {
			deploy "-D" "BUILTINS_${triple}_LLVM_CCACHE_PARAMS:STRING"  "CCACHE_CPP2= CCACHE_NOHASHDIR=" ||
			deploy "-D" "RUNTIMES_${triple}_LLVM_CCACHE_PARAMS:STRING"  "CCACHE_CPP2= CCACHE_NOHASHDIR="
		} || {
			deploy "-D" "BUILTINS_${triple}_LLVM_CCACHE_PARAMS:STRING"  "CCACHE_CPP2= CCACHE_HASHDIR="
			deploy "-D" "RUNTIMES_${triple}_LLVM_CCACHE_PARAMS:STRING"  "CCACHE_CPP2= CCACHE_HASHDIR="
		}

		deploy "-D" "BUILTINS_${triple}_ENABLE_LINKER_BUILD_ID:BOOL"    "OFF"
		deploy "-D" "RUNTIMES_${triple}_ENABLE_LINKER_BUILD_ID:BOOL"    "OFF"

		deploy "-D" "BUILTINS_${triple}_COMPILER_RT_ENABLE_STATIC_UNWINDER" "ON"
		deploy "-D" "RUNTIMES_${triple}_COMPILER_RT_ENABLE_STATIC_UNWINDER" "ON"

		deploy "-D" "BUILTINS_${triple}_LLVM_NATIVE_TOOL_DIR:PATH"      "$NATIVE_DIR/$INSTALL_PREFIX/bin"
		deploy "-D" "RUNTIMES_${triple}_LLVM_NATIVE_TOOL_DIR:PATH"      "$NATIVE_DIR/$INSTALL_PREFIX/bin"

		deploy "-D" "BUILTINS_${triple}_BUILD_SHARED_LIBS:BOOL"         "ON"
		deploy "-D" "RUNTIMES_${triple}_BUILD_SHARED_LIBS:BOOL"         "ON"

		deploy "-D" "BUILTINS_${triple}_COMPILER_RT_HAS_SANITIZER_COMMON:BOOL" "ON"
		deploy "-D" "RUNTIMES_${triple}_COMPILER_RT_HAS_SANITIZER_COMMON:BOOL" "ON"

		deploy "-D" "BUILTINS_${triple}_COMPILER_RT_INCLUDE_TESTS"      "ON"
		deploy "-D" "RUNTIMES_${triple}_COMPILER_RT_INCLUDE_TESTS"      "ON"

		deploy "-D" "BUILTINS_${triple}_LIBCXX_INCLUDE_TESTS:BOOL"      "ON"
		deploy "-D" "RUNTIMES_${triple}_LIBCXX_INCLUDE_TESTS:BOOL"      "ON"

		deploy "-D" "BUILTINS_${triple}_LIBCXX_ENABLE_STD_MODULES:BOOL" "ON"
		deploy "-D" "RUNTIMES_${triple}_LIBCXX_ENABLE_STD_MODULES:BOOL" "ON"

		deploy "-D" "BUILTINS_${triple}_LIBCXX_CONFIGURE_IDE:BOOL"      "ON"
		deploy "-D" "RUNTIMES_${triple}_LIBCXX_CONFIGURE_IDE:BOOL"      "ON"


		deploy "-D" "BUILTINS_${triple}_LIBCXXABI_INCLUDE_TESTS"        "ON"
		deploy "-D" "RUNTIMES_${triple}_LIBCXXABI_INCLUDE_TESTS"        "ON"

		deploy "-D" "BUILTINS_${triple}_CMAKE_POSITION_INDEPENDENT_CODE" "ON"
		deploy "-D" "RUNTIMES_${triple}_CMAKE_POSITION_INDEPENDENT_CODE" "ON"

		# CMake Error at /tmp/ei/kiss/make/llvm/libcxx/CMakeLists.txt:763 (message):
		#   LIBCXX_ENABLE_ASSERTIONS has been replaced by
		#   LIBCXX_HARDENING_MODE=hardened
		# For clang 19.0.0
		# Affect lldb-tblgen
		# deploy "-D" "BUILTINS_${triple}_LIBCXX_ENABLE_ASSERTIONS:BOOL" "ON"
		# deploy "-D" "RUNTIMES_${triple}_LIBCXX_ENABLE_ASSERTIONS:BOOL" "ON"

		deploy "-D" "BUILTINS_${triple}_LIBCXX_HARDENING_MODE:STRING"    "$LIBCXX_HARDENING_MODE"
		deploy "-D" "RUNTIMES_${triple}_LIBCXX_HARDENING_MODE:STRING"    "$LIBCXX_HARDENING_MODE"

		# deploy "-D" "BUILTINS_${triple}_COMPILER_RT_HAS_GWP_ASAN"      "ON"
		# deploy "-D" "RUNTIMES_${triple}_COMPILER_RT_HAS_GWP_ASAN"      "ON"

		deploy "-D" "BUILTINS_${triple}_COMPILER_RT_BUILD_GWP_ASAN"      "ON"
		deploy "-D" "RUNTIMES_${triple}_COMPILER_RT_BUILD_GWP_ASAN"      "ON"

		# deploy "-D" "BUILTINS_${triple}_COMPILER_RT_EMULATOR"          "ON"
		# deploy "-D" "RUNTIMES_${triple}_COMPILER_RT_EMULATOR"          "ON"

		deploy "-D" "BUILTINS_${triple}_COMPILER_RT_EMULATOR"            "OFF"
		deploy "-D" "RUNTIMES_${triple}_COMPILER_RT_EMULATOR"            "OFF"

		deploy "-D" "BUILTINS_${triple}_LLVM_BUILD_EXTERNAL_COMPILER_RT" "OFF"
		deploy "-D" "RUNTIMES_${triple}_LLVM_BUILD_EXTERNAL_COMPILER_RT" "OFF"

		deploy "-D" "LLVM_RUNTIMES_BUILD"                                "ON"
		deploy "-D" "COMPILER_RT_STANDALONE_BUILD"                       "OFF"

		deploy "-D" "BUILTINS_${triple}_LLVM_BUILD_TESTS"                "ON"
		deploy "-D" "RUNTIMES_${triple}_LLVM_BUILD_TESTS"                "ON"
		deploy "-D" "BUILTINS_${triple}_LLVM_INCLUDE_TESTS"              "ON"
		deploy "-D" "RUNTIMES_${triple}_LLVM_INCLUDE_TESTS"              "ON"

		# deploy "-D" "BUILTINS_${triple}_LLVM_CCACHE_BUILD"               "ON"
		# deploy "-D" "RUNTIMES_${triple}_LLVM_CCACHE_BUILD"               "ON"

		deploy "-D" "BUILTINS_${triple}_CMAKE_C_COMPILER_LAUNCHER"       "/usr/bin/ccache"
		deploy "-D" "BUILTINS_${triple}_CMAKE_CXX_COMPILER_LAUNCHER"     "/usr/bin/ccache"
		deploy "-D" "RUNTIMES_${triple}_CMAKE_C_COMPILER_LAUNCHER"       "/usr/bin/ccache"
		deploy "-D" "RUNTIMES_${triple}_CMAKE_CXX_COMPILER_LAUNCHER"     "/usr/bin/ccache"
		# :)
		# deploy "-D" "llvm-min-tblgen_${triple}_CMAKE_POLICY_DEFAULT_CMP0114" "NEW"
		deploy "-D" "BUILTINS_${triple}_CMAKE_POLICY_DEFAULT_CMP0002:STRING" "NEW"
		deploy "-D" "BUILTINS_${triple}_CMAKE_POLICY_DEFAULT_CMP0003:STRING" "NEW"
		deploy "-D" "BUILTINS_${triple}_CMAKE_POLICY_DEFAULT_CMP0056:STRING" "NEW"
		deploy "-D" "BUILTINS_${triple}_CMAKE_POLICY_DEFAULT_CMP0057:STRING" "NEW"
		deploy "-D" "BUILTINS_${triple}_CMAKE_POLICY_DEFAULT_CMP0058:STRING" "NEW"
		deploy "-D" "BUILTINS_${triple}_CMAKE_POLICY_DEFAULT_CMP0011:STRING" "NEW"
		deploy "-D" "BUILTINS_${triple}_CMAKE_POLICY_DEFAULT_CMP0076:STRING" "NEW"

		deploy "-D" "RUNTIMES_${triple}_CMAKE_POLICY_DEFAULT_CMP0002:STRING" "NEW"
		deploy "-D" "RUNTIMES_${triple}_CMAKE_POLICY_DEFAULT_CMP0003:STRING" "NEW"
		deploy "-D" "RUNTIMES_${triple}_CMAKE_POLICY_DEFAULT_CMP0056:STRING" "NEW"
		deploy "-D" "RUNTIMES_${triple}_CMAKE_POLICY_DEFAULT_CMP0057:STRING" "NEW"
		deploy "-D" "RUNTIMES_${triple}_CMAKE_POLICY_DEFAULT_CMP0058:STRING" "NEW"
		deploy "-D" "RUNTIMES_${triple}_CMAKE_POLICY_DEFAULT_CMP0011:STRING" "NEW"
		deploy "-D" "RUNTIMES_${triple}_CMAKE_POLICY_DEFAULT_CMP0076:STRING" "NEW"

		deploy "-D" "BUILTINS_${triple}_CMAKE_POLICY_DEFAULT_CMP0114"        "NEW"
		deploy "-D" "RUNTIMES_${triple}_CMAKE_POLICY_DEFAULT_CMP0114"        "NEW"

		deploy "-D" "BUILTINS_${triple}_CMAKE_CXX_STANDARD"              "$LLVM_REQUIRED_CXX_STANDARD"
		deploy "-D" "RUNTIMES_${triple}_CMAKE_CXX_STANDARD"              "$LLVM_REQUIRED_CXX_STANDARD"

		deploy "-D" "BUILTINS_${triple}_CMAKE_INSTALL_LIBDIR"            "lib"
		deploy "-D" "BUILTINS_${triple}_CLANG_DEFAULT_LINKER"            "ld.lld"
		deploy "-D" "BUILTINS_${triple}_CLANG_DEFAULT_RTLIB"             "compiler-rt"
		deploy "-D" "BUILTINS_${triple}_CLANG_DEFAULT_UNWINDLIB"         "libunwind"

		deploy "-D" "RUNTIMES_${triple}_CMAKE_INSTALL_LIBDIR"            "lib"
		deploy "-D" "RUNTIMES_${triple}_CLANG_DEFAULT_LINKER"            "ld.lld"
		deploy "-D" "RUNTIMES_${triple}_CLANG_DEFAULT_RTLIB"             "compiler-rt"
		deploy "-D" "RUNTIMES_${triple}_CLANG_DEFAULT_UNWINDLIB"         "libunwind"

		deploy "-D" "RUNTIMES_${triple}_COMPILER_RT_DEFAULT_TARGET_ARCH" "$libname"
		deploy "-D" "BUILTINS_${triple}_COMPILER_RT_DEFAULT_TARGET_ARCH" "$libname"

		deploy "-D" "RUNTIMES_${triple}_COMPILER_RT_BUILD_PROFILE"       "OFF"
		deploy "-D" "BUILTINS_${triple}_COMPILER_RT_BUILD_PROFILE"       "OFF"

		deploy "-D" "BUILTINS_${triple}_COMPILER_RT_BUILD_SANITIZERS:BOOL" "ON"
		deploy "-D" "RUNTIMES_${triple}_COMPILER_RT_BUILD_SANITIZERS:BOOL" "ON"

		deploy "-D" "RUNTIMES_${triple}_COMPILER_RT_BUILD_XRAY"          "OFF"
		deploy "-D" "BUILTINS_${triple}_COMPILER_RT_BUILD_XRAY"          "OFF"
		deploy "-D" "RUNTIMES_${triple}_COMPILER_RT_BUILD_LIBFUZZER"     "OFF"
		deploy "-D" "BUILTINS_${triple}_COMPILER_RT_BUILD_LIBFUZZER"     "OFF"
		deploy "-D" "RUNTIMES_${triple}_COMPILER_RT_BUILD_MEMPROF"       "OFF"
		deploy "-D" "BUILTINS_${triple}_COMPILER_RT_BUILD_MEMPROF"       "OFF"
		deploy "-D" "RUNTIMES_${triple}_COMPILER_RT_BUILD_ORC"           "OFF"
		deploy "-D" "BUILTINS_${triple}_COMPILER_RT_BUILD_ORC"           "OFF"
		deploy "-D" "RUNTIMES_${triple}_COMPILER_RT_ENABLE_CET"          "OFF"
		deploy "-D" "BUILTINS_${triple}_COMPILER_RT_ENABLE_CET"          "OFF"

		deploy "-D" "RUNTIMES_${triple}_COMPILER_RT_BUILD_CRT"           "ON"
		deploy "-D" "RUNTIMES_${triple}_COMPILER_RT_BUILD_BUILTINS"      "OFF"
		deploy "-D" "RUNTIMES_${triple}_CMAKE_CXX_COMPILER_WORKS"        "ON"
		deploy "-D" "RUNTIMES_${triple}_CMAKE_C_COMPILER_WORKS"          "ON"
		deploy "-D" "RUNTIMES_${triple}_CMAKE_ASM_COMPILER_WORKS"        "ON"
		deploy "-D" "RUNTIMES_${triple}_LIBCXXABI_USE_LLVM_UNWINDER"     "ON"

		deploy "-D" "BUILTINS_${triple}_LLVM_LIBGCC_EXPLICIT_OPT_IN"     "ON"
		deploy "-D" "RUNTIMES_${triple}_LLVM_LIBGCC_EXPLICIT_OPT_IN"     "ON"

		deploy "-D" "RUNTIMES_${triple}_COMPILER_RT_USE_LLVM_UNWINDER:BOOL" "ON"
		deploy "-D" "RUNTIMES_${triple}_COMPILER_RT_USE_BUILTINS_LIBRARY" "ON"
		deploy "-D" "RUNTIMES_${triple}_DEFAULT_COMPILER_RT_USE_BUILTINS_LIBRARY" "ON"

		deploy "-D" "BUILTINS_${triple}_CMAKE_CXX_COMPILER_WORKS"         "ON"
		deploy "-D" "BUILTINS_${triple}_CMAKE_C_COMPILER_WORKS"           "ON"
		deploy "-D" "BUILTINS_${triple}_CMAKE_ASM_COMPILER_WORKS"         "ON"
		deploy "-D" "BUILTINS_${triple}_LIBCXXABI_USE_LLVM_UNWINDER"      "ON"

		deploy "-D" "BUILTINS_${triple}_COMPILER_RT_USE_LLVM_UNWINDER:BOOL" "ON"
		deploy "-D" "BUILTINS_${triple}_COMPILER_RT_USE_BUILTINS_LIBRARY" "ON"
		deploy "-D" "BUILTINS_${triple}_DEFAULT_COMPILER_RT_USE_BUILTINS_LIBRARY" "ON"

		deploy "-D" "RUNTIMES_${triple}_LLVM_ENABLE_PER_TARGET_RUNTIME_DIR" "${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default}"
		deploy "-D" "BUILTINS_${triple}_LLVM_ENABLE_PER_TARGET_RUNTIME_DIR" "${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default}"

		# deploy "-D" "BUILTINS_${triple}_LLVM_BINARY_DIR"                "/$INSTALL_PREFIX"

		deploy "-D" "BUILTINS_${triple}_CMAKE_C_COMPILER_TARGET"          "$LLVM_TARGET_TRIPLE"
		deploy "-D" "RUNTIMES_${triple}_CMAKE_C_COMPILER_TARGET"          "$LLVM_TARGET_TRIPLE"

		deploy "-D" "BUILTINS_${triple}_CMAKE_CXX_COMPILER_TARGET"        "$LLVM_TARGET_TRIPLE"
		deploy "-D" "RUNTIMES_${triple}_CMAKE_CXX_COMPILER_TARGET"        "$LLVM_TARGET_TRIPLE"

		deploy "-D" "BUILTINS_${triple}_CMAKE_CPP_COMPILER_TARGET"        "$LLVM_TARGET_TRIPLE"
		deploy "-D" "RUNTIMES_${triple}_CMAKE_CPP_COMPILER_TARGET"        "$LLVM_TARGET_TRIPLE"

		deploy "-D" "BUILTINS_${triple}_CMAKE_ASM_COMPILER_TARGET"        "$LLVM_TARGET_TRIPLE"
		deploy "-D" "RUNTIMES_${triple}_CMAKE_ASM_COMPILER_TARGET"        "$LLVM_TARGET_TRIPLE"

		[ "$libname" != "x86_64" ] || {
			deploy "-D" "BUILTINS_${triple}_HAS_i386_DEF:INTERNAL"        "0"
			deploy "-D" "RUNTIMES_${triple}_HAS_i386_DEF:INTERNAL"        "0"
		}

		deploy "-D" "BUILTINS_${triple}_LLVM_RUNTIME_TARGETS"             "$LLVM_TARGET_TRIPLE"
		deploy "-D" "RUNTIMES_${triple}_LLVM_RUNTIME_TARGETS"             "$LLVM_TARGET_TRIPLE"

		# deploy "-D" "BUILTINS_${triple}_CMAKE_CXX_COMPILER_ID"          "Clang"
		# deploy "-D" "RUNTIMES_${triple}_CMAKE_CXX_COMPILER_ID"          "Clang"

		deploy "-D" "BUILTINS_${triple}_LLVM_TARGET_TRIPLE"               "$LLVM_TARGET_TRIPLE"
		deploy "-D" "RUNTIMES_${triple}_LLVM_TARGET_TRIPLE"               "$LLVM_TARGET_TRIPLE"
		# deploy "-D" "BUILTINS_${triple}_LIBUNWIND_TARGET_TRIPLE"        "$LLVM_TARGET_TRIPLE"
		# deploy "-D" "RUNTIMES_${triple}_LIBUNWIND_TARGET_TRIPLE"        "$LLVM_TARGET_TRIPLE"
		# deploy "-D" "BUILTINS_${triple}_LIBCXXABI_TARGET_TRIPLE"        "$LLVM_TARGET_TRIPLE"
		# deploy "-D" "RUNTIMES_${triple}_LIBCXXABI_TARGET_TRIPLE"        "$LLVM_TARGET_TRIPLE"
		deploy "-D" "BUILTINS_${triple}_LLVM_TARGET_TRIPLE_ENV"           "$LLVM_TARGET_TRIPLE"
		deploy "-D" "RUNTIMES_${triple}_LLVM_TARGET_TRIPLE_ENV"           "$LLVM_TARGET_TRIPLE"

		deploy "-D" "BUILTINS_${triple}_LLVM_BUILD_RUNTIMES"              "ON"
		deploy "-D" "RUNTIMES_${triple}_LLVM_BUILD_RUNTIMES"              "ON"

		# Looks weird, just try it
		# deploy "-D" "BUILTINS_${triple}_LLVM_RUNTIMES_BUILD"            "OFF"
		deploy "-D" "BUILTINS_${triple}_LLVM_RUNTIMES_BUILD" "ON"
		# deploy "-D" "BUILTINS_${triple}_COMPILER_RT_STANDALONE_BUILD"   "ON"
		deploy "-D" "BUILTINS_${triple}_COMPILER_RT_STANDALONE_BUILD"     "OFF"

		# deploy "-D" "RUNTIMES_${triple}_LLVM_RUNTIMES_BUILD"            "OFF"
		deploy "-D" "RUNTIMES_${triple}_LLVM_RUNTIMES_BUILD"              "ON"
		# deploy "-D" "BUILTINS_${triple}_COMPILER_RT_STANDALONE_BUILD"   "ON"
		deploy "-D" "BUILTINS_${triple}_COMPILER_RT_STANDALONE_BUILD"     "OFF"

		deploy "-D" "BUILTINS_${triple}_RUNTIMES_BUILD_BUILTINS"          "ON"
		deploy "-D" "RUNTIMES_${triple}_RUNTIMES_BUILD_BUILTINS"          "ON"

		# deploy "-D" "BUILTINS_${triple}_CLANG_RESOURCE_DIR:STRING"      "../lib/clang/$version_system"
		# deploy "-D" "RUNTIMES_${triple}_CLANG_RESOURCE_DIR:STRING"      "../lib/clang/$version_system"

		# deploy "-D" "BUILTINS_${triple}_CLANG_RESOURCE_DIR:STRING"      "../lib/clang/$version_target"
		# deploy "-D" "RUNTIMES_${triple}_CLANG_RESOURCE_DIR:STRING"      "../lib/clang/$version_target"

		# [ ! -z  "${toolchain_prefix##*"$DESTDIR"*}" ] && {
		# 	deploy "-D" "BUILTINS_${triple}_CMAKE_INSTALL_RPATH:PATH"     "XORIGIN/../lib/llvm/$version_xhost"
		# 	deploy "-D" "RUNTIMES_${triple}_CMAKE_INSTALL_RPATH:PATH"     "XORIGIN/../lib/llvm/$version_xhost"
		# } || {
			deploy "-D" "BUILTINS_${triple}_CMAKE_INSTALL_RPATH:PATH"     "XORIGIN/../lib/llvm/$version_target"
			deploy "-D" "RUNTIMES_${triple}_CMAKE_INSTALL_RPATH:PATH"     "XORIGIN/../lib/llvm/$version_target"
		# }

		deploy "-D" "BUILTINS_${triple}_CLANG_RESOURCE_DIR:STRING"        "../lib/clang/$version_target" "permanent"
		deploy "-D" "RUNTIMES_${triple}_CLANG_RESOURCE_DIR:STRING"        "../lib/clang/$version_target" "permanent"

		# deploy "-D" "BUILTINS_${triple}_COMPILER_RESOURCE_DIR:STRING"   "$RESOURCE_DIR"
		# deploy "-D" "RUNTIMES_${triple}_COMPILER_RESOURCE_DIR:STRING"   "$RESOURCE_DIR"

		# deploy "-D" "BUILTINS_${triple}_COMPILER_RESOURCE_DIR:STRING"   "$DESTDIR/$INSTALL_PREFIX/lib/clang/$version_system"
		# deploy "-D" "RUNTIMES_${triple}_COMPILER_RESOURCE_DIR:STRING"   "$DESTDIR/$INSTALL_PREFIX/lib/clang/$version_system"

		deploy "-D" "BUILTINS_${triple}_COMPILER_RESOURCE_DIR:STRING"     "$SYSROOT/$INSTALL_PREFIX/lib/clang/$version_target" "permanent"
		deploy "-D" "RUNTIMES_${triple}_COMPILER_RESOURCE_DIR:STRING"     "$SYSROOT/$INSTALL_PREFIX/lib/clang/$version_target" "permanent"

		# Conflicts with _LIBCPP_HAS_MUSL_LIBC
		# deploy "-D" "BUILTINS_${triple}_LIBCXX_ENABLE_WIDE_CHARACTERS"  "OFF"
		# deploy "-D" "RUNTIMES_${triple}_LIBCXX_ENABLE_WIDE_CHARACTERS"  "OFF"

		deploy "-D" "BUILTINS_${triple}_COMPILER_RT_BUILD_BUILTINS"       "OFF"

		# Disable libgcc_s
		deploy "-D" "BUILTINS_${triple}_LIBUNWIND_USE_COMPILER_RT"        "ON"
		deploy "-D" "BUILTINS_${triple}_LLVM_ENABLE_BACKTRACES"           "ON"
		deploy "-D" "BUILTINS_${triple}_Backtrace_INCLUDE_DIR"            "$SYSROOT/$INSTALL_PREFIX/include"
		deploy "-D" "BUILTINS_${triple}_Backtrace_LIBRARY"                "$SYSROOT_LIB/libexecinfo.so"
		deploy "-D" "BUILTINS_${triple}_ICONV_LIBRARY_PATH"               "$SYSROOT_LIB/libc.so"
		deploy "-D" "BUILTINS_${triple}_COMPILER_RT_HAS_LIBEXECINFO"      "ON"
		# Disable libgcc_s
		deploy "-D" "BUILTINS_${triple}_LIBCXXABI_USE_COMPILER_RT"        "ON"
		# Disable libgcc_s
		deploy "-D" "BUILTINS_${triple}_LIBCXX_USE_COMPILER_RT"           "ON"

		# Disable libgcc_s
		deploy "-D" "RUNTIMES_${triple}_LIBUNWIND_USE_COMPILER_RT"        "ON"
		deploy "-D" "RUNTIMES_${triple}_LLVM_ENABLE_BACKTRACES"           "ON"
		deploy "-D" "RUNTIMES_${triple}_Backtrace_INCLUDE_DIR"            "$SYSROOT/$INSTALL_PREFIX/include"
		deploy "-D" "RUNTIMES_${triple}_Backtrace_LIBRARY"                "$SYSROOT_LIB/libexecinfo.so"
		deploy "-D" "RUNTIMES_${triple}_ICONV_LIBRARY_PATH"               "$SYSROOT_LIB/libc.so"
		deploy "-D" "RUNTIMES_${triple}_COMPILER_RT_HAS_LIBEXECINFO"      "ON"
		# Disable libgcc_s
		deploy "-D" "RUNTIMES_${triple}_LIBCXXABI_USE_COMPILER_RT"        "ON"
		# Disable libgcc_s
		deploy "-D" "RUNTIMES_${triple}_LIBCXX_USE_COMPILER_RT"           "ON"

		# COMPILER_RT_DEFAULT_TARGET_ONLY is deduced somewhare, look into
		# llvm/runtimes/CMakeLists.txt
		# compiler-rt/cmake/Modules/CompilerRTUtils.cmake
		deploy "-D" "RUNTIMES_${triple}_COMPILER_RT_DEFAULT_TARGET_TRIPLE" "$LLVM_TARGET_TRIPLE"
		deploy "-D" "BUILTINS_${triple}_COMPILER_RT_DEFAULT_TARGET_TRIPLE" "$LLVM_TARGET_TRIPLE"

		deploy "-D" "BUILTINS_${triple}_CMAKE_BUILD_TYPE"                 "Release"
		# deploy "-D" "BUILTINS_${triple}_LLVM_DISABLE_ABI_BREAKING_CHECKS_ENFORCING:INTERNAL" "1"
		deploy "-D" "BUILTINS_${triple}_LLVM_ENABLE_PER_TARGET_RUNTIME_DIR" \
			"${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default}"

		deploy "-D" "RUNTIMES_${triple}_CMAKE_BUILD_TYPE"                 "Release"
		# deploy "-D" "RUNTIMES_${triple}_LLVM_DISABLE_ABI_BREAKING_CHECKS_ENFORCING:INTERNAL" "1"
		deploy "-D" "RUNTIMES_${triple}_LLVM_ENABLE_PER_TARGET_RUNTIME_DIR" \
			"${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default}"


		deploy "-D" "BUILTINS_${triple}_LIBUNWIND_ENABLE_SHARED"          "ON"
		deploy "-D" "BUILTINS_${triple}_CXX_SUPPORTS_FNO_EXCEPTIONS_FLAG:INTERNAL" "1"
		deploy "-D" "BUILTINS_${triple}_CXX_SUPPORTS_FUNWIND_TABLES_FLAG:INTERNAL" "1"

		deploy "-D" "RUNTIMES_${triple}_LIBUNWIND_ENABLE_SHARED"          "ON"
		deploy "-D" "RUNTIMES_${triple}_CXX_SUPPORTS_FNO_EXCEPTIONS_FLAG:INTERNAL" "1"
		deploy "-D" "RUNTIMES_${triple}_CXX_SUPPORTS_FUNWIND_TABLES_FLAG:INTERNAL" "1"

		deploy "-D" "BUILTINS_${triple}_LIBCXXABI_STATICALLY_LINK_UNWINDER_IN_STATIC_LIBRARY" "OFF"
		deploy "-D" "BUILTINS_${triple}_LIBCXXABI_STATICALLY_LINK_UNWINDER_IN_SHARED_LIBRARY" "OFF"
		deploy "-D" "RUNTIMES_${triple}_LIBCXXABI_STATICALLY_LINK_UNWINDER_IN_STATIC_LIBRARY" "OFF"
		deploy "-D" "RUNTIMES_${triple}_LIBCXXABI_STATICALLY_LINK_UNWINDER_IN_SHARED_LIBRARY" "OFF"

		target_flags_updated "$toolchain_prefix" ||
			// builtins_target_flags "$toolchain_prefix"
			# // builtins_target_flags "$toolchain_prefix" "$runtimes_individual"

		# deploy "-D" "RUNTIES_C_FLAGS"   "${CMAKE_C_FLAGS}   --sysroot=${KISS_ROOT}"
		# deploy "-D" "RUNTIES_CXX_FLAGS" "${CMAKE_CXX_FLAGS} --sysroot=${KISS_ROOT}"
		# deploy "-D" "RUNTIES_ASM_FLAGS" "${CMAKE_ASM_FLAGS} --sysroot=${KISS_ROOT}"

		# deploy "-D" "BUILTINS_${triple}_CMAKE_C_FLAGS"                  "\$ENV{RUNTIMES_TARGET_CMAKE_C_FLAGS}"
		deploy "-D" "BUILTINS_${triple}_CMAKE_C_FLAGS"                    "$RUNTIMES_TARGET_CMAKE_C_FLAGS"

		# deploy "-D" "RUNTIMES_${triple}_CMAKE_C_FLAGS"                  "\$ENV{RUNTIMES_TARGET_CMAKE_C_FLAGS}"
		deploy "-D" "RUNTIMES_${triple}_CMAKE_C_FLAGS"                    "$RUNTIMES_TARGET_CMAKE_C_FLAGS"

# For clang/lib/Lex
		deploy "-D" "BUILTINS_${triple}_CMAKE_CXX_FLAGS"                  "$RUNTIMES_TARGET_CMAKE_CXX_FLAGS"

#       deploy "-D" "BUILTINS_${triple}_CMAKE_CXX_FLAGS" "\
# -isystem $SYSROOT/$INSTALL_PREFIX/include/$LLVM_TARGET_TRIPLE/c++/v1 \
# -isystem $SYSROOT/$INSTALL_PREFIX/include/c++/v1 $RUNTIMES_TARGET_CMAKE_CXX_FLAGS"

			# "-isystem $DESTDIR/$INSTALL_PREFIX/include/c++/v1 \$ENV{RUNTIMES_TARGET_CMAKE_CXX_FLAGS}"
		# deploy "-D" "BUILTINS_${triple}_CMAKE_CXX_FLAGS" \
		# "-isystem $KISS_ROOT/$INSTALL_PREFIX/include/c++/v1 \$CMAKE_CXX_FLAGS"


		# runtimes/CMakeLists.txt
		# set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -nostdinc++")
		# No, no "-isystem $DESTDIR/$INSTALL_PREFIX/include/c++/v1" here
		# deploy "-D" "RUNTIMES_${triple}_CMAKE_CXX_FLAGS"                "\$ENV{RUNTIMES_TARGET_CMAKE_CXX_FLAGS}"

		deploy "-D" "RUNTIMES_${triple}_CMAKE_CXX_FLAGS"                  "$RUNTIMES_TARGET_CMAKE_CXX_FLAGS"

		# After setting compiler to /usr/lib/ccache/bin/clang++
	#   deploy "-D" "RUNTIMES_${triple}_CMAKE_CXX_FLAGS" "\
	# -isystem $DESTDIR/$INSTALL_PREFIX/include/$LLVM_TARGET_TRIPLE/c++/v1 \
	# -isystem $DESTDIR/$INSTALL_PREFIX/include/c++/v1 $RUNTIMES_TARGET_CMAKE_CXX_FLAGS"

		# No -lc++ -lc++abi
		deploy "-D" "BUILTINS_${triple}_CMAKE_EXE_LINKER_FLAGS"           "${BUILTINS_TARGET_CMAKE_LDFLAGS}"
		deploy "-D" "BUILTINS_${triple}_CMAKE_SHARED_LINKER_FLAGS"        "${BUILTINS_TARGET_CMAKE_LDFLAGS}"
		deploy "-D" "BUILTINS_${triple}_CMAKE_MODULE_LINKER_FLAGS"        "${BUILTINS_TARGET_CMAKE_LDFLAGS}"

		# Has -lc++ -lc++abi
		# deploy "-D" "BUILTINS_${triple}_CMAKE_EXE_LINKER_FLAGS"         "$LDFLAGS_NO_LIBUNWIND"
		# deploy "-D" "BUILTINS_${triple}_CMAKE_SHARED_LINKER_FLAGS"      "$LDFLAGS_NO_LIBUNWIND"
		# deploy "-D" "BUILTINS_${triple}_CMAKE_MODULE_LINKER_FLAGS"      "$LDFLAGS_NO_LIBUNWIND"

		# No -lc++ -lc++abi
		deploy "-D" "RUNTIMES_${triple}_CMAKE_EXE_LINKER_FLAGS"           "${BUILTINS_TARGET_CMAKE_LDFLAGS}"
		deploy "-D" "RUNTIMES_${triple}_CMAKE_SHARED_LINKER_FLAGS"        "${BUILTINS_TARGET_CMAKE_LDFLAGS}"
		deploy "-D" "RUNTIMES_${triple}_CMAKE_MODULE_LINKER_FLAGS"        "${BUILTINS_TARGET_CMAKE_LDFLAGS}"

		# Has -lc++ -lc++abi
		# deploy "-D" "RUNTIMES_${triple}_CMAKE_EXE_LINKER_FLAGS"         "$LDFLAGS_NO_LIBUNWIND"
		# deploy "-D" "RUNTIMES_${triple}_CMAKE_SHARED_LINKER_FLAGS"      "$LDFLAGS_NO_LIBUNWIND"
		# deploy "-D" "RUNTIMES_${triple}_CMAKE_MODULE_LINKER_FLAGS"      "$LDFLAGS_NO_LIBUNWIND"

		#   deploy "-D" "CMAKE_ARGS" " \
		# -DLLVM_TARGET_TRIPLE=\$LLVM_TARGET_TRIPLE; \
		# -DCMAKE_C_FLAGS=\${RUNTIMES_TARGET_CMAKE_C_FLAGS} -fstack-protector-strong -Wformat \
		# -Werror=format-security -Wno-unused-command-line-argument -Wdate-time -D_FORTIFY_SOURCE=2; \
		# -DCMAKE_CXX_FLAGS=\${RUNTIMES_TARGET_CMAKE_CXX_FLAGS} -fstack-protector-strong -Wformat \
		# -Werror=format-security -Wno-unused-command-line-argument -Wdate-time -D_FORTIFY_SOURCE=2; \
		# -DCMAKE_EXE_LINKER_FLAGS=\${LDFLAGS}; \
		# -DCMAKE_SHARED_LINKER_FLAGS=\${LDFLAGS}; \
		# -DCMAKE_MODULE_LINKER_FLAGS=\${LDFLAGS}; \
		# -DCMAKE_BUILD_TYPE=Release; \
		# -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=\${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default} \
		# "

		#   deploy "-D" "CMAKE_ARGS" " \
		# -DLLVM_TARGET_TRIPLE=\$LLVM_TARGET_TRIPLE; \
		# -DCMAKE_C_FLAGS=\${RUNTIMES_TARGET_CMAKE_C_FLAGS}; \
		# -DCMAKE_CXX_FLAGS=\${RUNTIMES_TARGET_CMAKE_CXX_FLAGS}; \
		# -DCMAKE_EXE_LINKER_FLAGS=\${LDFLAGS}; \
		# -DCMAKE_SHARED_LINKER_FLAGS=\${LDFLAGS}; \
		# -DCMAKE_MODULE_LINKER_FLAGS=\${LDFLAGS}; \
		# -DCMAKE_BUILD_TYPE=Release; \
		# -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=\${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default} \
		# "

		# // cue '$CMAKE_ARGS' "$CMAKE_ARGS"
		# deploy "-D" "BUILTINS_${triple}_CMAKE_ARGS"                     "\${CMAKE_ARGS}"
		# deploy "-D" "RUNTIMES_${triple}_CMAKE_ARGS"                     "\${CMAKE_ARGS}"
		# # deploy "-D" "LIBUNWIND_LINK_FLAGS"                            "$LDFLAGS -Wl,-z,relro -Wl,--build-id"
		deploy "-D" "LIBUNWIND_LINK_FLAGS"                                "$LDFLAGS_NO_LIBUNWIND"

		# // cue '$RUNTIMES_TARGET_CMAKE_C_FLAGS'                         "$RUNTIMES_TARGET_CMAKE_C_FLAGS"
		# // cue '$RUNTIMES_TARGET_CMAKE_CXX_FLAGS'                       "$RUNTIMES_TARGET_CMAKE_CXX_FLAGS"
		# // cue '$LIBUNWIND_LINK_FLAGS'                                  "$LIBUNWIND_LINK_FLAGS"

		deploy "-D" "LIBUNWIND_C_FLAGS:STRING"                            "$RUNTIMES_TARGET_CMAKE_C_FLAGS"
		deploy "-D" "LIBUNWIND_CXX_FLAGS:STRING"                          "$RUNTIMES_TARGET_CMAKE_CXX_FLAGS"
		deploy "-D" "LIBUNWIND_CPP_FLAGS:STRING"                          "$RUNTIMES_TARGET_CMAKE_CXX_FLAGS"
		deploy "-D" "LIBUNWIND_COMPILE_FLAGS:STRING"                      "$RUNTIMES_TARGET_CMAKE_C_FLAGS"

		# deploy "-D" "LIBCXXABI_C_FLAGS:STRING"                          "\${LIBUNWIND_C_FLAGS}"
		# deploy "-D" "LIBCXXABI_CXX_FLAGS:STRING"                        "\${LIBUNWIND_CXX_FLAGS}"
		# deploy "-D" "LIBCXXABI_CPP_FLAGS:STRING"                        "\${LIBUNWIND_CXX_FLAGS}"
		# deploy "-D" "LIBCXXABI_COMPILE_FLAGS:STRING"                    "\${LIBUNWIND_CXX_FLAGS}"
		# deploy "-D" "LIBCXXABI_LINK_FLAGS"                              "\${LIBUNWIND_LINK_FLAGS}"
		# # deploy "-D" "LIBCXXABI_ADDITIONAL_COMPILE_FLAGS"              "\${LIBUNWIND_CXX_FLAGS}"

		# deploy "-D" "LIBCXX_C_FLAGS:STRING"                             "\${LIBUNWIND_C_FLAGS}"
		# deploy "-D" "LIBCXX_CXX_FLAGS:STRING"                           "\${LIBUNWIND_CXX_FLAGS}"
		# deploy "-D" "LIBCXX_CPP_FLAGS:STRING"                           "\${LIBUNWIND_CXX_FLAGS}"
		# deploy "-D" "LIBCXX_COMPILE_FLAGS:STRING"                       "\${LIBUNWIND_CXX_FLAGS}"
		# deploy "-D" "LIBCXX_LINK_FLAGS"                                 "\${LIBUNWIND_LINK_FLAGS}"
		# # deploy "-D" "LIBCXX_ADDITIONAL_COMPILE_FLAGS"                 "\${LIBUNWIND_CXX_FLAGS}"
		#
		# /usr/bin/ash: eval: syntax error: bad substitution
		# deploy "-D" "RUNTIMES_${triple}_LIBOMP_CFLAGS"                  "\${$RUNTIMES_TARGET_CMAKE_C_FLAGS}"
		# deploy "-D" "RUNTIMES_${triple}_LIBOMP_CFLAGS"                  "\${RUNTIMES_TARGET_CMAKE_C_FLAGS}"
		deploy "-D" "RUNTIMES_${triple}_LIBOMP_CXXFLAGS" "\
-isystem $SYSROOT/$INSTALL_PREFIX/include/$LLVM_TARGET_TRIPLE/c++/v1 \
-isystem $SYSROOT/$INSTALL_PREFIX/include/c++/v1 \
$RUNTIMES_TARGET_CMAKE_CXX_FLAGS"
		deploy "-D" "RUNTIMES_${triple}_LIBOMP_CPPFLAGS" "\
-isystem $SYSROOT/$INSTALL_PREFIX/include/$LLVM_TARGET_TRIPLE/c++/v1 \
-isystem $SYSROOT/$INSTALL_PREFIX/include/c++/v1 \
$RUNTIMES_TARGET_CMAKE_CXX_FLAGS"
		# deploy "-D" "RUNTIMES_${triple}_LIBOMP_LDFLAGS"                 "\${BUILTINS_TARGET_CMAKE_LDFLAGS}"
		deploy "-D" "RUNTIMES_${triple}_LIBOMP_LDFLAGS"                   "$BUILTINS_TARGET_CMAKE_LDFLAGS"

		# /usr/bin/ash: eval: syntax error: bad substitution
		# deploy "-D" "BUILTINS_${triple}_LIBOMP_CFLAGS"                  "\${$RUNTIMES_TARGET_CMAKE_C_FLAGS}"
		# deploy "-D" "BUILTINS_${triple}_LIBOMP_CFLAGS"                  "\${RUNTIMES_TARGET_CMAKE_C_FLAGS}"
		deploy "-D" "BUILTINS_${triple}_LIBOMP_CXXFLAGS" "\
-isystem $SYSROOT/$INSTALL_PREFIX/include/$LLVM_TARGET_TRIPLE/c++/v1 \
-isystem $SYSROOT/$INSTALL_PREFIX/include/c++/v1 \
$RUNTIMES_TARGET_CMAKE_CXX_FLAGS"
		deploy "-D" "BUILTINS_${triple}_LIBOMP_CPPFLAGS" "\
-isystem $SYSROOT/$INSTALL_PREFIX/include/$LLVM_TARGET_TRIPLE/c++/v1 \
-isystem $SYSROOT/$INSTALL_PREFIX/include/c++/v1 \
$RUNTIMES_TARGET_CMAKE_CXX_FLAGS"
		# deploy "-D" "BUILTINS_${triple}_LIBOMP_LDFLAGS"                 "\${BUILTINS_TARGET_CMAKE_LDFLAGS}"
		deploy "-D" "BUILTINS_${triple}_LIBOMP_LDFLAGS"                   "$BUILTINS_TARGET_CMAKE_LDFLAGS"


		# # deploy "-D" "RUNTIMES_${triple}_LLVM_BINARY_DIR"              "/$INSTALL_PREFIX"

		deploy "-D" "BUILTINS_${triple}_LIBUNWIND_CFLAGS:STRING"          "$LIBUNWIND_C_FLAGS"
		deploy "-D" "RUNTIMES_${triple}_LIBUNWIND_CFLAGS:STRING"          "$LIBUNWIND_C_FLAGS"

		deploy "-D" "BUILTINS_${triple}_LIBUNWIND_CPPFLAGS:STRING"        "$LIBUNWIND_CXX_FLAGS"
		deploy "-D" "RUNTIMES_${triple}_LIBUNWIND_CPPFLAGS:STRING"        "$LIBUNWIND_CXX_FLAGS"

		deploy "-D" "BUILTINS_${triple}_LIBUNWIND_CXXFLAGS:STRING"        "$LIBUNWIND_CXX_FLAGS"
		deploy "-D" "RUNTIMES_${triple}_LIBUNWIND_CXXFLAGS:STRING"        "$LIBUNWIND_CXX_FLAGS"

		deploy "-D" "BUILTINS_${triple}_LIBUNWIND_COMPILE_FLAGS:STRING"   "$LIBUNWIND_C_FLAGS"
		deploy "-D" "RUNTIMES_${triple}_LIBUNWIND_COMPILE_FLAGS:STRING"   "$LIBUNWIND_C_FLAGS"

		[ "$libname" != "x86_64" ] || {
			deploy "-D" "BUILTINS_${triple}_LIBUNWIND_ADDITIONAL_COMPILE_FLAGS" "${LIBUNWIND_ADDITIONAL_COMPILE_FLAGS}"
			deploy "-D" "RUNTIMES_${triple}_LIBUNWIND_ADDITIONAL_COMPILE_FLAGS" "${LIBUNWIND_ADDITIONAL_COMPILE_FLAGS}"

			deploy "-D" "BUILTINS_${triple}_COMPILER_RT_ASAN_SHADOW_SCALE_DEFINITION" "${LIBUNWIND_ADDITIONAL_COMPILE_FLAGS}"
			deploy "-D" "RUNTIMES_${triple}_COMPILER_RT_ASAN_SHADOW_SCALE_DEFINITION" "${LIBUNWIND_ADDITIONAL_COMPILE_FLAGS}"
		}
		deploy "-D" "BUILTINS_${triple}_LIBUNWIND_LINK_FLAGS"             "$LDFLAGS_NO_LIBUNWIND"
		deploy "-D" "RUNTIMES_${triple}_LIBUNWIND_LINK_FLAGS"             "$LDFLAGS_NO_LIBUNWIND"

		# deploy "-D" "RUNTIMES_${triple}_LIBCXXABI_CFLAGS:STRING"        "\${LIBUNWIND_C_FLAGS}"
		# deploy "-D" "RUNTIMES_${triple}_LIBCXXABI_CPPFLAGS:STRING"      "\${LIBUNWIND_CXX_FLAGS}"
		# deploy "-D" "RUNTIMES_${triple}_LIBCXXABI_CXXFLAGS:STRING"      "\${LIBUNWIND_CXX_FLAGS}"
		# deploy "-D" "RUNTIMES_${triple}_LIBCXXABI_COMPILE_FLAGS:STRING" "\${LIBUNWIND_CXX_FLAGS}"
		# # deploy "-D" "RUNTIMES_${triple}_LIBCXXABI_ADDITIONAL_COMPILE_FLAGS" "\${LIBUNWIND_CXX_FLAGS}"
		# deploy "-D" "RUNTIMES_${triple}_LIBCXXABI_LINK_FLAGS"           "\${LIBUNWIND_LINK_FLAGS}"
		deploy "-D" "BUILTINS_${triple}_LIBCXXABI_ENABLE_STATIC_UNWINDER" "OFF"
		deploy "-D" "RUNTIMES_${triple}_LIBCXXABI_ENABLE_STATIC_UNWINDER" "OFF"

		# deploy "-D" "RUNTIMES_${triple}_LIBCXX_CFLAGS:STRING"           "\${LIBUNWIND_C_FLAGS}"
		# deploy "-D" "RUNTIMES_${triple}_LIBCXX_CPPFLAGS:STRING"         "\${LIBUNWIND_CXX_FLAGS}"
		# deploy "-D" "RUNTIMES_${triple}_LIBCXX_CXXFLAGS:STRING"         "\${LIBUNWIND_CXX_FLAGS}"
		# deploy "-D" "RUNTIMES_${triple}_LIBCXX_COMPILE_FLAGS:STRING"    "\${LIBUNWIND_CXX_FLAGS}"
		# # deploy "-D" "RUNTIMES_${triple}_LIBCXX_ADDITIONAL_COMPILE_FLAGS" "\${LIBUNWIND_CXX_FLAGS}"
		# deploy "-D" "RUNTIMES_${triple}_LIBCXX_LINK_FLAGS"              "\${LIBUNWIND_LINK_FLAGS}"
		deploy "-D" "BUILTINS_${triple}_LIBCXX_ENABLE_STATIC_ABI_LIBRARY" "ON"
		deploy "-D" "RUNTIMES_${triple}_LIBCXX_ENABLE_STATIC_ABI_LIBRARY" "ON"

		# deploy "-D" "RUNTIMES_${triple}_LIBOMP_CFLAGS:STRING"           "\${LIBUNWIND_C_FLAGS}"
		# deploy "-D" "RUNTIMES_${triple}_LIBOMP_CPPFLAGS:STRING"         "\${LIBUNWIND_CXX_FLAGS}"
		# deploy "-D" "RUNTIMES_${triple}_LIBOMP_CXXFLAGS:STRING"         "\${LIBUNWIND_CXX_FLAGS}"
		# deploy "-D" "RUNTIMES_${triple}_LIBOMP_COMPILE_FLAGS:STRING"    "\${LIBUNWIND_CXX_FLAGS}"
		deploy "-D" "BUILTINS_${triple}_LLVM_ENABLE_RUNTIMES"             "compiler-rt;libcxx;libcxxabi;libunwind"
		deploy "-D" "RUNTIMES_${triple}_LLVM_ENABLE_RUNTIMES"             "compiler-rt;libcxx;libcxxabi;libunwind"
		deploy "-D" "BUILTINS_${triple}_SANITIZER_CXX_ABI"                "libc++"
		deploy "-D" "RUNTIMES_${triple}_SANITIZER_CXX_ABI"                "libc++"
		deploy "-D" "BUILTINS_${triple}_SANITIZER_TEST_CXX"               "libc++"
		deploy "-D" "RUNTIMES_${triple}_SANITIZER_TEST_CXX"               "libc++"
		deploy "-D" "BUILTINS_${triple}_SANITIZER_CXX_ABI_INTREE"         "ON"
		deploy "-D" "RUNTIMES_${triple}_SANITIZER_CXX_ABI_INTREE"         "ON"
		deploy "-D" "BUILTINS_${triple}_SANITIZER_TEST_CXX_INTREE"        "ON"
		deploy "-D" "RUNTIMES_${triple}_SANITIZER_TEST_CXX_INTREE"        "ON"
		deploy "-D" "BUILTINS_${triple}_COMPILER_RT_CAN_EXECUTE_TESTS"    "ON"
		deploy "-D" "RUNTIMES_${triple}_COMPILER_RT_CAN_EXECUTE_TESTS"    "ON"
		deploy "-D" "BUILTINS_${triple}_LLVM_TOOLS_DIR"                   "${OUTPUT_DIR}/bin"
		deploy "-D" "RUNTIMES_${triple}_LLVM_TOOLS_DIR"                   "${OUTPUT_DIR}/bin"

	}

	runtimes_use_intermediate() {
		_level_2
		local toolchain_prefix="$1"
		local triple="$LLVM_TARGET_TRIPLE"

		# deploy "-D" "CMAKE_TOOLCHAIN_PREFIX" "$toolchain_prefix"
		deploy "-D" "CMAKE_TOOLCHAIN_PREFIX" "llvm-"

		# deploy "-D" "RUNTIMES_${triple}_CMAKE_LINKER:FILEPATH"          "$DESTDIR/$INSTALL_PREFIX/bin/lld"
		# deploy "-D" "RUNTIMES_${triple}_CMAKE_LINK_EXECUTABLE"          "$DESTDIR/$INSTALL_PREFIX/bin/lld"
		# deploy "-D" "RUNTIMES_${triple}_CLANG_DEFAULT_LINKER"           "ld.lld"
		# For llvm-config
		# runtimes_dir: "$DESTDIR/$INSTALL_PREFIX/lib/clang/$version_target/lib/x86_64-linux-musl"
		# deploy "-D" "RUNTIMES_${triple}_CMAKE_C_COMPILER:FILEPATH"      "$toolchain_prefix/bin/clang"
		deploy "-D" "RUNTIMES_${triple}_CMAKE_C_COMPILER:FILEPATH"        "/$INSTALL_PREFIX/lib/ccache/bin/clang"
		# deploy "-D" "RUNTIMES_${triple}_CMAKE_ASM_COMPILER:FILEPATH"    "$toolchain_prefix/bin/clang"
		deploy "-D" "RUNTIMES_${triple}_CMAKE_ASM_COMPILER:FILEPATH"      "/$INSTALL_PREFIX/lib/ccache/bin/clang"
		# deploy "-D" "RUNTIMES_${triple}_CMAKE_CXX_COMPILER:FILEPATH"    "$toolchain_prefix/bin/clang++"
		deploy "-D" "RUNTIMES_${triple}_CMAKE_CXX_COMPILER:FILEPATH"      "/$INSTALL_PREFIX/lib/ccache/bin/clang++"
		deploy "-D" "RUNTIMES_${triple}_CMAKE_CPP_COMPILER:FILEPATH"      "/$INSTALL_PREFIX/lib/ccache/bin/cpp"
		deploy "-D" "RUNTIMES_${triple}_CMAKE_AR:FILEPATH"                "$toolchain_prefix/bin/llvm-ar"
		deploy "-D" "RUNTIMES_${triple}_CMAKE_CXX_COMPILER_AR:FILEPATH"   "$toolchain_prefix/bin/llvm-ar"
		deploy "-D" "RUNTIMES_${triple}_CMAKE_AS:FILEPATH"                "$toolchain_prefix/bin/llvm-as"
		deploy "-D" "RUNTIMES_${triple}_CMAKE_LINKER:FILEPATH"            "$toolchain_prefix/bin/ld.lld"
		deploy "-D" "RUNTIMES_${triple}_LLVM_CONFIG_PATH:FILEPATH"        "$toolchain_prefix/bin/llvm-config"
		deploy "-D" "RUNTIMES_${triple}_CMAKE_RANLIB:FILEPATH"            "$toolchain_prefix/bin/llvm-ranlib"
		deploy "-D" "RUNTIMES_${triple}_CMAKE_CXX_COMPILER_RANLIB:FILEPATH" "$toolchain_prefix/bin/llvm-ranlib"

		deploy "-D" "RUNTIMES_${triple}_LLVM_CMAKE_DIR"                   "$toolchain_prefix/lib/cmake/llvm"

		deploy "-D" "RUNTIMES_${triple}_CMAKE_TOOLCHAIN_PREFIX"           "$CMAKE_TOOLCHAIN_PREFIX"
		deploy "-D" "RUNTIMES_${triple}_LLVM_ENABLE_LLD"                  "ON"

		# deploy "-D" "BUILTINS_${triple}_CMAKE_C_COMPILER:FILEPATH"      "$toolchain_prefix/bin/clang"
		deploy "-D" "BUILTINS_${triple}_CMAKE_C_COMPILER:FILEPATH"        "/$INSTALL_PREFIX/lib/ccache/bin/clang"
		# deploy "-D" "BUILTINS_${triple}_CMAKE_ASM_COMPILER:FILEPATH"    "$toolchain_prefix/bin/clang"
		deploy "-D" "BUILTINS_${triple}_CMAKE_ASM_COMPILER:FILEPATH"      "/$INSTALL_PREFIX/lib/ccache/bin/clang"
		# deploy "-D" "BUILTINS_${triple}_CMAKE_CXX_COMPILER:FILEPATH"    "$toolchain_prefix/bin/clang++"
		deploy "-D" "BUILTINS_${triple}_CMAKE_CXX_COMPILER:FILEPATH"      "/$INSTALL_PREFIX/lib/ccache/bin/clang++"
		deploy "-D" "BUILTINS_${triple}_CMAKE_CPP_COMPILER:FILEPATH"      "/$INSTALL_PREFIX/lib/ccache/bin/cpp"
		deploy "-D" "BUILTINS_${triple}_CMAKE_AR:FILEPATH"                "$toolchain_prefix/bin/llvm-ar"
		deploy "-D" "BUILTINS_${triple}_CMAKE_CXX_COMPILER_AR:FILEPATH"   "$toolchain_prefix/bin/llvm-ar"
		deploy "-D" "BUILTINS_${triple}_CMAKE_AS:FILEPATH"                "$toolchain_prefix/bin/llvm-as"
		deploy "-D" "BUILTINS_${triple}_CMAKE_LINKER:FILEPATH"            "$toolchain_prefix/bin/ld.lld"
		deploy "-D" "BUILTINS_${triple}_LLVM_CONFIG_PATH:FILEPATH"        "$toolchain_prefix/bin/llvm-config"
		deploy "-D" "BUILTINS_${triple}_CMAKE_RANLIB:FILEPATH"            "$toolchain_prefix/bin/llvm-ranlib"
		deploy "-D" "BUILTINS_${triple}_CMAKE_CXX_COMPILER_RANLIB:FILEPATH" "$toolchain_prefix/bin/llvm-ranlib"

		deploy "-D" "BUILTINS_${triple}_LLVM_CMAKE_DIR"                   "$toolchain_prefix/lib/cmake/llvm"

		deploy "-D" "BUILTINS_${triple}_CMAKE_TOOLCHAIN_PREFIX"           "$CMAKE_TOOLCHAIN_PREFIX"
		deploy "-D" "BUILTINS_${triple}_LLVM_ENABLE_LLD"                  "ON"

		deploy "-C" "$runtimes_cmake"
		deploy "-C" "$builtins_cmake"
	}


	# echo "Building for: $TARGET_ARCH"
	// log '$TARGET_ARCH' "$TARGET_ARCH"
	# echo "Building runtimes: $runtimes"
	// log '$runtimes' "$runtimes"

	prepare() {
		_level_2
		# default_prepare
		# This is not libraries of gcc, just a cheating?
		# \rm -rf "llvm-libgcc"

		cd "$MAKE_DIR/llvm"

		\rm -rf "tools/gold"
		\rm -rf "test/tools/gold"

		# Known broken test on musl
		\rm -v test/CodeGen/AArch64/wineh4.mir
		# https://github.com/llvm/llvm-project/issues/47657
		\rm -v test/ExecutionEngine/Interpreter/intrinsics.ll

		case "$CARCH" in
		x86)
			\rm -v test/Object/macho-invalid.test \
				test/tools/llvm-size/radix.test \
				unittests/Support/JSONTest.cpp
			sed -i "/JSONTest.cpp/d" \
				unittests/Support/CMakeLists.txt
			;;
		arm*)
			\rm -v test/tools/llvm-readobj/ELF/dependent-libraries.test \
				test/Object/macho-invalid.test \
				test/tools/llvm-size/radix.test \
				test/tools/gold/X86/split-dwarf.ll \
				test/ExecutionEngine/frem.ll \
				test/tools/llvm-dwarfdump/X86/prettyprint_types.s \
				test/tools/llvm-dwarfdump/X86/simplified-template-names.s \
				unittests/ExecutionEngine/Orc/OrcCAPITest.cpp \
				test/CodeGen/RISCV/rv32zbp.ll \
				test/CodeGen/RISCV/rv64zbp.ll
			sed -i "/OrcCAPITest.cpp/d" \
				unittests/ExecutionEngine/Orc/CMakeLists.txt
			;;
		esac

		# Known broken codegen for Hexagon target, reported upstream.
		# https://github.com/llvm/llvm-project/issues/48936
		\rm -v \
			test/CodeGen/Hexagon/csr-stubs-spill-threshold.ll \
			test/CodeGen/Hexagon/long-calls.ll \
			test/CodeGen/Hexagon/mlong-calls.ll \
			test/CodeGen/Hexagon/pic-regusage.ll \
			test/CodeGen/Hexagon/runtime-stkchk.ll \
			test/CodeGen/Hexagon/swp-memrefs-epilog.ll \
			test/CodeGen/Hexagon/vararg-formal.ll \
			test/tools/llvm-objcopy/MachO/universal-object.test \
			test/DebugInfo/X86/vla-multi.ll
		cd "$MAKE_DIR"
	}

	# [ -z "$1" ] || [ -z "$2" ] ||
	[ "$is_manually_dialed" -eq "0" ] ||
	// prepare 2>&1 || kill 0

	source_dir() {
		local source=
		# LLVM_SOURCE_DIR:STATIC=/tmp/$LOGNAME/kiss/proc/make/llvm/llvm
		source="$(grep LLVM_SOURCE_DIR "$OUTPUT_DIR/CMakeCache.txt" 2> /dev/null |
			awk -F = "{print \$2}")" 2> /dev/null || :
		printf "$RS%s" "${source##*/}"
	}

	clean_objects() {
		# [ "$(// delegate -- source_dir)" = "$1" ] &&
		#   find "$OUTPUT_DIR" -type f -name CMakeCache.txt -delete ||
		# find "$OUTPUT_DIR" -mindepth 1 -maxdepth 1 -exec \rm -rf {} +

		# find "$OUTPUT_DIR" \( -type f -o -type l \) -exec \rm -f "{}" +
		find "$OUTPUT_DIR" -mindepth 1 -delete
	}

	lib_linux_link_exists() {
		local libname="$1"
		local dest_dir="$2"
		{
			[ -h "$dest_dir/libclang_rt.builtins-$libname.a" ] &&
			[ -h "$dest_dir/clang_rt.crtbegin-$libname.o" ] &&
			[ -h "$dest_dir/clang_rt.crtend-$libname.o" ]
		}
	}

	builtins_exist() {
		local dest_dir="$1"
		{
			[ -f "$dest_dir/libclang_rt.builtins.a" ] &&
			[ -f "$dest_dir/clang_rt.crtbegin.o" ] &&
			[ -f "$dest_dir/clang_rt.crtend.o" ]
		}
	}

	builtins_valid() {
		local dest_dir="$1"
		local source_path_out="$2"
		{
			[ -f "$dest_dir/libclang_rt.builtins.a" ] &&
			[ -f "$dest_dir/clang_rt.crtbegin.o" ] &&
			[ -f "$dest_dir/clang_rt.crtend.o" ] &&
			! [ "$dest_dir/libclang_rt.builtins.a" -ot "$source_path_out/libclang_rt.builtins.a" ] &&
			! [ "$dest_dir/clang_rt.crtbegin.o"    -ot "$source_path_out/clang_rt.crtbegin.o" ] &&
			! [ "$dest_dir/clang_rt.crtend.o"      -ot "$source_path_out/clang_rt.crtend.o" ]
		}
	}

	# Usage:
	# builtins_mock_all "$libname" "$builtins_dest_dir"
	builtins_mock_all() {
		# x86_64
		local libname="$1"
		local dest_dir="$2"
		[ -z "${dest_dir##*"$LLVM_TARGET_TRIPLE"*}" ] || {
			[ "${dest_dir##*/}" = "linux" ] && return 0 ||
				// die '$dest_dir' "'$dest_dir' is invalid"
		}
		local source_path_out="$OUTPUT_DIR/lib/clang/$version_target/lib/$LLVM_TARGET_TRIPLE"
		! builtins_valid "$dest_dir" "$source_path_out" || ! empty "$dest_dir" ||
		// die 'empty' "function does not work"

		builtins_valid "$dest_dir" "$source_path_out" || {
			# empty "$source_path_out" && {
			builtins_exist "$source_path_out" || {
				[ -z "${PWD##*"$OUTPUT_DIR"*}" ] &&
				ninja install-compiler-rt ||
				ninja -C "$OUTPUT_DIR" install-compiler-rt
			}
			# ! empty "$source_path_out" ||
			builtins_exist "$source_path_out" ||
			// die '$source_path_out' "'$source_path_out' file does not exist"

			# ! empty "$dest_dir" ||
			builtins_exist "$dest_dir" ||
				{
					// as_own "$dest_dir" \
					rsync "$source_path_out/." "${dest_dir%/*}/" && // as_own "$dest_dir" sync; }

			# ! empty "$dest_dir" ||
			builtins_exist "$dest_dir" ||
				// die '$dest_dir' "'$dest_dir' file does not contain essential builtins"

			# ! empty "$dest_dir" &&
			builtins_valid "$dest_dir" "$source_path_out" ||
			{
				// as_own "$dest_dir" \
				rsync -aqz "$source_path_out/." "$dest_dir/" && // as_own "$dest_dir" sync; }

			builtins_exist "$dest_dir" ||
				// die '$dest_dir' "'$dest_dir' file does not contain essential builtins"
		}

		local lib_dir="${dest_dir%/$LLVM_TARGET_TRIPLE*}"
		# libclang_rt.asan-preinit.a
		# libclang_rt.asan.a
		# libclang_rt.asan.a.syms
		# libclang_rt.asan.so
		# libclang_rt.asan_cxx.a
		# libclang_rt.asan_cxx.a.syms
		# libclang_rt.asan_static.a
		local basename_list=$(\ls -1 "$dest_dir")
		local previous_dir="$PWD"

		cd "$lib_dir"
		[ -d "linux" ] ||
			// as_own "$dest_dir" \
			\mkdir "linux"
		cd "linux"
		local source_name
		for source_name in $basename_list; do
			# a || syms
			local file_suffix="${source_name##*.}"
			# libclang_rt.builtins
			local file_name="${source_name%.*}"
			[ "$file_suffix" != "syms" ] || {
				file_name="${file_name%.*}"
				file_suffix="${source_name##*"$file_name".}"
			}
			# libclang_rt.builtins-x86_64
			local file_name_with_arch="$file_name-$libname"
			# libclang_rt.builtins-x86_64.a
			local target_name="$file_name_with_arch.$file_suffix"

			local real_target=
			[ ! -L "$target_name" ] ||
			real_target="$(readlink -fn "$target_name" 2> /dev/null)" ||
				// die '$real_target' "'$real_target' does not exist"

			local real_source=
			[ ! -f "../$LLVM_TARGET_TRIPLE/$source_name" ] ||
			real_source="$(readlink -fn "../$LLVM_TARGET_TRIPLE/$source_name" 2> /dev/null)" ||
				// die '$real_source' "'$real_source' does not exist"

			[ ! -f "../$LLVM_TARGET_TRIPLE/$source_name" ] || {
				{
					is_link "$target_name" &&
					[ "$real_target" = "$real_source" ]
				} ||
				[ -f "$target_name" ]
			} || {
				! is_link "$target_name" || \rm -f "$target_name"
				\ln -sf "../$LLVM_TARGET_TRIPLE/$source_name" "$target_name"
			}

		done

		ver_naming "$DESTDIR/$INSTALL_PREFIX/lib/clang" "$version_target" "$version_target_major"

		cd "$previous_dir"
	}

	# Based on LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default=OFF
	# LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default=ON doesn't work by default on llvm-18.0.0
	# Usage:
	# builtin_mock "$libname" "$builtins_dest_dir/libclang_rt.builtins.a"
	# Output:
	# cd /path/to/lib/clang/$version_target
	# Create link:
	# lib/$LLVM_TARGET_TRIPLE/libclang_rt.builtins.a <- lib/linux/libclang_rt.builtins-x86_64.a
	builtin_mock() {
		# x86_64
		local libname="$1"

		local dest_dir="$2"
		# [ -f "$dest_dir" ] || // die '$dest_dir' "'$dest_dir' file does not exist"
		local lib_dir=
		[ -z "${dest_dir##*"$LLVM_TARGET_TRIPLE"*}" ] || {
			lib_dir="${dest_dir%/*}"
			[ "${lib_dir##*/}" = "linux" ] && return 0 ||
				// die '$dest_dir' "'$dest_dir' is invalid"
		}

		# $DESTDIR/$INSTALL_PREFIX/lib/clang/$version_target_major/lib/$LLVM_DEFAULT_TARGET_TRIPLE/....a
		lib_dir="${dest_dir%/$LLVM_TARGET_TRIPLE*}"

		# libclang_rt.builtins.a
		local source_name="${dest_dir##*/}"
		[ -f "$dest_dir" ] || {
			local source_path_out="$OUTPUT_DIR/lib/clang/$version_target/lib/$LLVM_TARGET_TRIPLE/$source_name"
			[ -f "$source_path_out" ] && {
				[ -z "${PWD##*"$OUTPUT_DIR"*}" ] &&
				ninja install-compiler-rt ||
				ninja -C "$OUTPUT_DIR" install-compiler-rt
			} || {
				// die '$dest_dir' "'$dest_dir' file does not exist"
				// die '$source_path_out' "'$source_path_out' file does not exist"
			}
			[ -f "$dest_dir" ] || {
				// as_own "$dest_dir" \
				rsync "$source_path_out" "${dest_dir%/*}/" && // as_own "$dest_dir" sync; }
		}
		# libclang_rt.builtins
		local file_name="${source_name%.*}"
		# a
		local file_suffix="${source_name##*.}"
		# libclang_rt.builtins-x86_64
		local file_name_with_arch="$file_name-$libname"
		# libclang_rt.builtins-x86_64.a
		local target_name="$file_name_with_arch.$file_suffix"

		local previous_dir="$PWD"

		cd "$lib_dir"
		[ -d "linux" ] ||
			// as_own "$dest_dir" \
			\mkdir "linux"
		cd "linux"

		local real_target=
		[ ! -L "$target_name" ] ||
		real_target="$(readlink -fn "$target_name" 2> /dev/null)" ||
			// die '$real_target' "'$real_target' does not exist"

		local real_source=
		[ ! -f "../$LLVM_TARGET_TRIPLE/$source_name" ] ||
		real_source="$(readlink -fn "../$LLVM_TARGET_TRIPLE/$source_name" 2> /dev/null)" ||
			// die '$real_source' "'$real_source' does not exist"

		[ ! -f "../$LLVM_TARGET_TRIPLE/$source_name" ] || {
			{
				[ -L "$target_name" ] &&
				[ "$real_target" = "$real_source" ]
			} ||
			[ -f "$target_name" ]
		} || {
			[ -L "$target_name" ] && \rm -f "$target_name"
			\ln -sf "../$LLVM_TARGET_TRIPLE/$source_name" "$target_name"
		}

		ver_naming "$DESTDIR/$INSTALL_PREFIX/lib/clang" "$version_target" "$version_target_major"

		cd "$previous_dir"
	}

	# Based on LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default=OFF
	# LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default=ON doesn't work by default on llvm-18.0.0
	# stage2 build got a resource-dir as follows, but it might not contian a lib/linux subtree
	# -resource-dir="$OUTPUT_DIR/tools/clang/stage2-bins/./lib/clang/18"
	# Usage:
	# lib_linux_out "$OUTPUT_DIR/tools/clang/stage2-bins/./lib/clang/18"
	# lib_linux_out "$OUTPUT_DIR/tools/clang/$build_target-bins/lib/clang/$version_target"
	# Depends on:
	# source="$OUTPUT_DIR/lib/clang/$version_target/lib/linux"
	# source="$DESTDIR/$INSTALL_PREFIX/lib/clang/$version_target/lib/linux"
	# Output:
	# $source <- $resource_dir/lib/linux
	lib_linux_out() {
		local resource_dir="$1"
		[ -d "$resource_dir" ] ||
			\mkdir -p "$resource_dir"
		# $source = $DESTDIR/$INSTALL_PREFIX/lib/clang/$version_target/lib/linux
		# $source = $OUTPUT_DIR/lib/clang/$version_target/lib/linux
		local source="$OUTPUT_DIR/lib/clang/$version_target/lib/linux"
		local builtins_dest_dir="$DESTDIR/$INSTALL_PREFIX/lib/clang/$version_target/lib/$LLVM_TARGET_TRIPLE"
		# Installed $source = $DESTDIR/$INSTALL_PREFIX/lib/clang/18/lib/linux/
		# Installed $source = $DESTDIR/$INSTALL_PREFIX/lib/clang/$version_target/lib/linux/
		[ -d "$source" ] && # source="$DESTDIR/$INSTALL_PREFIX/lib/clang/$version_target/lib/linux"
		lib_linux_link_exists "$libname" "$source" ||
			source="$DESTDIR/$INSTALL_PREFIX/lib/clang/$version_target/lib/linux"
			# source="$DESTDIR/$INSTALL_PREFIX/lib/clang/$version_target_major/lib/linux"
		lib_linux_link_exists "$libname" "$source" || { # // die '$source' "'$source' is empty"
			builtins_mock_all "$libname" "$builtins_dest_dir"
			# source="$DESTDIR/$INSTALL_PREFIX/lib/clang/$version_target/lib/$LLVM_TARGET_TRIPLE"
		}
		lib_linux_link_exists "$libname" "$source" || {
			// log '$resource_dir' "$resource_dir"
			builtins_exist "$builtins_dest_dir" &&
			// war '$source' "'$source' links is empty (because builtins have not been mocked)" ||
			// war '$source' "'$source' links is empty (because builtins have not been built)"
			return 0
		}
		# $anchor_name = $OUTPUT_DIR/tools/clang/stage2-bins/./lib/clang/18.0.0/lib/linux
		local anchor_name="$resource_dir/lib/linux"
		local anchor_dir="${anchor_name%/*}"
		[ -d "$anchor_dir" ] ||
			\mkdir -p "$anchor_dir"
		[ "$(readlink -fn "$anchor_name")" = "$source" ] || {
			[ ! -L "$anchor_name" ] || \rm -f "$anchor_name"
			[ ! -d "$anchor_name" ] &&
			\ln -sf "$source" "$anchor_dir/" || {
				# \rm -rf "$anchor_name"
				rsync -aqz "$source/." "$anchor_name/" && sync
			}
		}
	}

	check_clang() {
		_level_2

		# local clang_path="$(which clang)"
		local clang_path="$OUTPUT_DIR/bin/clang"
		symbol_exist="$(readelf -Ws "$clang_path" | grep _ZNSt3__122__libcpp_verbose_abortEPKcz |
			tail -n 1 | awk '{print $7}')"
		[ ! -z "${symbol_exist:+x}" ] && [ "$symbol_exist" = "UND" ] && {
			command -v "$clang_path" > /dev/null 2>&1 || {
				// log '$LD_LIBRARY_PATH' "$LD_LIBRARY_PATH"
				// die "$clang_path : _ZNSt3__122__libcpp_verbose_abortEPKcz" "undefined"
			}
		}
		return 0
	}

	check_libunwind() {
		_level_2
		# local lib_list=
		local symbol_exist=
		local result=0
		[ "$#" -ne "0" ] || // die 'libunwind.so.*' "not found"
		# lib_list="$(find "$OUTPUT_DIR" -type f -name "libunwind.so.*")" || :
		# lib_list="${lib_list:+"${lib_list} "}$(find "$DESTDIR/$INSTALL_PREFIX/lib" -type f -name "libunwind.so.*")" || :
		# for item in $lib_list; do
		for item do
			symbol_exist="$(readelf -Ws "$item" | grep _Unwind_GetRegionStart | tail -n 1 | awk '{print $7}')"
			[ ! -z "${symbol_exist:+x}" ] && [ "$symbol_exist" = "UND" ] && {
				// war "$item : _Unwind_GetRegionStart" "undefined"
				result=1
				return $result
			}
			symbol_exist="$(readelf -Ws "$item" | grep __unw_getcontext | tail -n 1 | awk '{print $7}')"
			[ ! -z "${symbol_exist:+x}" ] && [ "$symbol_exist" = "UND" ] && {
				// war "$item : __unw_getcontext" "undefined"
				result=1
				return $result
			}
			symbol_exist="$(readelf -Ws "$item" | grep __libunwind_Registers_x86_64_jumpto | tail -n 1 | awk '{print $7}')"
			[ ! -z "${symbol_exist:+x}" ] && [ "$symbol_exist" = "UND" ] && {
				// war "$item : __libunwind_Registers_x86_64_jumpto" "undefined"
				result=1
				return $result
			}
		done
		return $result
	}

	install_clang_libs() {
		_level_2
		local shared_libs="\
libLLVMAMDGPUCodeGen.so.18git \
libLLVMAMDGPUAsmParser.so.18git \
libLLVMAMDGPUDisassembler.so.18git \
libLLVMX86CodeGen.so.18git \
libLLVMX86AsmParser.so.18git \
libLLVMX86Desc.so.18git \
libLLVMX86Disassembler.so.18git \
libLLVMX86Info.so.18git \
libclangFrontendTool.so.18git \
libLLVMAMDGPUDesc.so.18git \
libLLVMAMDGPUInfo.so.18git \
libLLVMAMDGPUUtils.so.18git \
libclangCodeGen.so.18git \
libLLVMCodeGen.so.18git \
libLLVMObjCARCOpts.so.18git \
libLLVMipo.so.18git \
libLLVMInstrumentation.so.18git \
libLLVMVectorize.so.18git \
libclangFrontend.so.18git \
libclangDriver.so.18git \
libLLVMOption.so.18git \
libclangSerialization.so.18git \
libLLVMScalarOpts.so.18git \
libLLVMAggressiveInstCombine.so.18git \
libLLVMInstCombine.so.18git \
libLLVMTransformUtils.so.18git \
libLLVMAnalysis.so.18git \
libLLVMMCParser.so.18git \
libLLVMMC.so.18git \
libLLVMCore.so.18git \
libclangBasic.so.18git \
libLLVMTargetParser.so.18git \
libLLVMSupport.so.18git \
libLLVMAsmPrinter.so.18git \
libLLVMGlobalISel.so.18git \
libLLVMMIRParser.so.18git \
libLLVMPasses.so.18git \
libLLVMSelectionDAG.so.18git \
libLLVMBinaryFormat.so.18git \
libLLVMProfileData.so.18git \
libclangExtractAPI.so.18git \
libclangRewriteFrontend.so.18git \
libclangARCMigrate.so.18git \
libclangStaticAnalyzerFrontend.so.18git \
libLLVMCoverage.so.18git \
libLLVMLTO.so.18git \
libclangAnalysis.so.18git \
libclangAST.so.18git \
libclangLex.so.18git \
libPolly.so.18git \
libLLVMCoroutines.so.18git \
libLLVMFrontendOpenMP.so.18git \
libLLVMLinker.so.18git \
libLLVMBitWriter.so.18git \
libLLVMObject.so.18git \
libLLVMBitReader.so.18git \
libLLVMDemangle.so.18git \
libclangParse.so.18git \
libclangSema.so.18git \
libclangEdit.so.18git \
libLLVMBitstreamReader.so.18git \
libLLVMWindowsDriver.so.18git \
libLLVMDebugInfoCodeView.so.18git \
libLLVMRemarks.so.18git \
libLLVMDebugInfoDWARF.so.18git \
libLLVMAsmParser.so.18git \
libLLVMSymbolize.so.18git \
libclangIndex.so.18git \
libclangStaticAnalyzerCheckers.so.18git \
libclangStaticAnalyzerCore.so.18git \
libclangCrossTU.so.18git \
libclangASTMatchers.so.18git \
libLLVMTextAPI.so.18git \
libclangSupport.so.18git \
libLLVMDebugInfoPDB.so.18git \
libclangFormat.so.18git \
libLLVMDebugInfoMSF.so.18git \
libclangToolingInclusions.so.18git \
"
		local lib_name
		local lib_index=0
		# for lib in $(find "$OUTPUT_DIR/lib" -type f -name "*.so.*"); do
		for lib_name in $shared_libs; do
			[ ! -f "$OUTPUT_DIR/lib/$lib_name" ] || {
				: $((lib_index += 1))
				local index_str="$lib_index"
				[ "$lib_index" -ge 10 ] || index_str=0"$lib_index"
				// log '$lib_name' "[ $index_str ] '$OUTPUT_DIR/lib/$lib_name' successfully generated"
				[ -f "$DESTDIR/$INSTALL_PREFIX/lib/$lib_name" ] ||
					// as_own "$DESTDIR" \
					\cp -f "$OUTPUT_DIR/lib/$lib_name" "$DESTDIR/$INSTALL_PREFIX/lib/"
			}
		done
		local dir_name
		[ -d "$DESTDIR/$INSTALL_PREFIX/lib" ] ||
			// as_own "$DESTDIR" \
			\mkdir -p "$DESTDIR/$INSTALL_PREFIX/lib"
		[ ! -z "${LLVM_TARGET_TRIPLE:+x}" ] || // die '$LLVM_TARGET_TRIPLE' "$LLVM_TARGET_TRIPLE"
		# for dir_name in clang cmake libear libscanbuild linux x86_64-linux-musl; do
		for dir_name in clang cmake libear libscanbuild linux "$LLVM_TARGET_TRIPLE"; do
			[ ! -d "$OUTPUT_DIR/lib/$dir_name" ] || {
				// as_own "$DESTDIR" \
				rsync -aqz "$OUTPUT_DIR/lib/$dir_name" "$DESTDIR/$INSTALL_PREFIX/lib/" && // as_own "$DESTDIR" sync
			}
		done
		// as_own "$DESTDIR" \
		find "$OUTPUT_DIR/lib" -maxdepth 1 \( -type f -o -type l \) -exec rsync -aq "{}" "$DESTDIR/$INSTALL_PREFIX/lib/" +
		// as_own "$DESTDIR" sync
		// check_clang && return 0 || return 1
		# return 0
	}

	# libunwind could not find it ?
	config_site() {
		[ ! -f "$OUTPUT_DIR/include/$LLVM_TARGET_TRIPLE/c++/v1/__config_site" ] && {
			[ ! -f "$DESTDIR/$INSTALL_PREFIX/include/c++/v1/__config_site" ] || {
				[ -d "$OUTPUT_DIR/include/c++/v1" ] ||
				\mkdir -p "$OUTPUT_DIR/include/c++/v1"
				\cp "$DESTDIR/$INSTALL_PREFIX/include/c++/v1/__config_site" \
					"$OUTPUT_DIR/include/c++/v1/"
				[ -d "$OUTPUT_DIR/include/$LLVM_TARGET_TRIPLE/c++/v1" ] ||
				\mkdir -p "$OUTPUT_DIR/include/$LLVM_TARGET_TRIPLE/c++/v1"
				\cp "$DESTDIR/$INSTALL_PREFIX/include/c++/v1/__config_site" \
					"$OUTPUT_DIR/include/$LLVM_TARGET_TRIPLE/c++/v1/"
			}
		} || {
			[ -d "$OUTPUT_DIR/include/c++/v1" ] ||
			\mkdir -p "$OUTPUT_DIR/include/c++/v1"
			\cp "$OUTPUT_DIR/include/$LLVM_TARGET_TRIPLE/c++/v1/__config_site" \
				"$OUTPUT_DIR/include/c++/v1/"

			[ -d "$DESTDIR/$INSTALL_PREFIX/include/c++/v1" ] ||
			// as_own "$DESTDIR" \
			\mkdir -p "$DESTDIR/$INSTALL_PREFIX/include/c++/v1"

			[ -f "$DESTDIR/$INSTALL_PREFIX/include/c++/v1/__config_site" ] ||
				// as_own "$DESTDIR" \
				\cp "$OUTPUT_DIR/include/$LLVM_TARGET_TRIPLE/c++/v1/__config_site" \
				"$DESTDIR/$INSTALL_PREFIX/include/c++/v1/"
		}
	}

	# Original
	# llvm_bootstrap() {
	#   _level_2
	#   // log 'cmake' "clear cache"
	#   clean_objects "llvm"
	#   // cue 'llvm' "configuration and generation"
	#
	#   cmake -B "$OUTPUT_DIR" \
	#       -DCMAKE_INSTALL_PREFIX=/usr \
	#       -DCMAKE_BUILD_TYPE=Release \
	#       -DLLVM_BUILD_LLVM_DYLIB=OFF \
	#       -DLLVM_LINK_LLVM_DYLIB=OFF \
	#       -DLLVM_TARGETS_TO_BUILD="host" \
	#       -DLLVM_ENABLE_RTTI=ON \
	#       -DLLVM_HOST_TRIPLE="$(cc -dumpmachine)" \
	#       -DLLVM_BUILD_EXAMPLES=OFF \
	#       -DLLVM_BUILD_DOCS=OFF \
	#       -DLLVM_BUILD_TESTS=OFF \
	#       -DLLVM_ENABLE_TERMINFO=OFF \
	#       -DLLVM_ENABLE_LIBXML2=OFF \
	#       -DLLVM_ENABLE_LIBEDIT=OFF \
	#       -Wno-dev -S "$MAKE_DIR/llvm"
	#
	#   cmake --build "$OUTPUT_DIR"
	#   cmake --install "$OUTPUT_DIR"
	# }

	# true ||
	llvm_bootstrap() {
		_level_2
		// log 'cmake' "clear cache"
		clean_objects "llvm"
		// cue 'llvm' "configuration and generation"

		local provious_dir="$PWD"
		# [ ! -f "$OUTPUT_DIR/bin/llvm-tblgen" ] || {
		# path_prepend PATH "$OUTPUT_DIR/bin"
		local ld_library_path_previous="$LD_LIBRARY_PATH"
		# path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/lib"
		# path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE"
		# $OUTPUT_DIR/bin/clang-tblgen
		local llvm_tblgen_previous="${LLVM_TABLEGEN-}"
		export LLVM_TABLEGEN="$OUTPUT_DIR/bin/llvm-tblgen"
		# local clang_tblgen_previous="${CLANG_TABLEGEN-}"
		# export CLANG_TABLEGEN="$OUTPUT_DIR/bin/clang-tblgen"
		# }

		local output_dir="$OUTPUT_DIR"
		[ -d "$output_dir" ] || \mkdir -p "$output_dir"

		cd "$MAKE_DIR/llvm"

		modules_prepare

		# local rpath_version="$version_xhost"
		# [ ! -z "${TOOLCHAIN_PREFIX##*"$DESTDIR"*}" ] ||
		local rpath_version="$version_target"

		local linker_flags=" \
-resource-dir=$RESOURCE_DIR \
-L $OUTPUT_DIR/lib/clang/$VERSION_SYSTEM/lib/$LLVM_TARGET_TRIPLE \
-L $OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE \
-L $RESOURCE_DIR/lib/$LLVM_TARGET_TRIPLE \
-L $RESOURCE_DIR/lib/linux \
"
# -L $TOOLCHAIN_PREFIX/lib/$LLVM_TARGET_TRIPLE \
		[ ! -d "$SYSROOT_LIB/$LLVM_TARGET_TRIPLE" ] ||
			linker_flags="$linker_flags \
-L $SYSROOT_LIB/$LLVM_TARGET_TRIPLE \
"

		linker_flags="$linker_flags \
-L $SYSROOT_LIB \
-Wl,-rpath=XORIGIN/../lib/clang/$version_target/lib/$LLVM_TARGET_TRIPLE \
-Wl,-rpath=XORIGIN/../lib/clang/$version_target/lib/linux \
-Wl,-rpath=XORIGIN/../lib/$LLVM_TARGET_TRIPLE \
-Wl,-rpath=XORIGIN/../lib \
$ldflags \
-lc++ \
-lc++abi \
-Wl,-lunwind \
"

		cmake -G Ninja \
			-B "$output_dir" \
			-S "$MAKE_DIR/llvm" \
			-C "$common_cmake" \
			-D CMAKE_MODULE_PATH="$CMAKE_MODULE_PATH" \
			-D CMAKE_INSTALL_PREFIX=/$INSTALL_PREFIX \
			-D CMAKE_INSTALL_RPATH=XORIGIN/../lib/llvm/$version_target \
			-D CMAKE_INSTALL_NAME_DIR:STRING=/$INSTALL_PREFIX/lib \
			-D CMAKE_BUILD_WITH_INSTALL_RPATH=ON \
			-D CMAKE_BUILD_TYPE=Release \
			-D BOOTSTRAP_CMAKE_SYSTEM_NAME="$($KISS_ROOT/usr/bin/uname)" \
			-D CMAKE_SYSTEM_NAME=$($KISS_ROOT/usr/bin/uname) \
			-D CMAKE_HOST_SYSTEM_NAME=$(/usr/bin/uname) \
			-D LLVM_TARGET_ARCH=$TARGET_ARCH \
			-D LLVM_HOST_TRIPLE="$(cc -dumpmachine)" \
			-D CMAKE_C_COMPILER_TARGET="$LLVM_TARGET_TRIPLE" \
			-D CMAKE_CXX_COMPILER_TARGET="$LLVM_TARGET_TRIPLE" \
			-D LLVM_RUNTIME_TARGETS="$LLVM_TARGET_TRIPLE" \
			-D LLVM_DEFAULT_TARGET_TRIPLE="$LLVM_TARGET_TRIPLE" \
			-D CMAKE_C_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang \
			-D CMAKE_ASM_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang \
			-D CMAKE_CXX_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang++ \
			-D CMAKE_CPP_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/cpp \
			-D ENABLE_LINKER_BUILD_ID=OFF \
			-D LLVM_TARGETS_TO_BUILD="host;AMDGPU" \
			-D CMAKE_CXX_STANDARD="$LLVM_REQUIRED_CXX_STANDARD" \
			-D COMPILER_RT_BUILD_SANITIZERS:BOOL=ON \
			-D LIBCXX_HAS_MUSL_LIBC=ON \
			-D _LIBCPP_HAS_MUSL_LIBC=ON \
			-D _LIBCPP_PROVIDES_DEFAULT_RUNE_TABLE:INTERNAL=1 \
			-D BUILD_SHARED_LIBS:BOOL=ON \
			-D COMPILER_RT_BUILD_XRAY=OFF \
			-D LIBUNWIND_HAS_GCC_LIB:BOOL=OFF \
			-D LIBUNWIND_HAS_GCC_S_LIB:BOOL=OFF \
			-D LIBUNWIND_ENABLE_EXCEPTIONS=ON \
			-D LIBUNWIND_INSTALL_LIBRARY_DIR:PATH=lib \
			-D LIBUNWIND_USE_COMPILER_RT=ON \
			-D LIBUNWIND_ENABLE_STATIC=ON \
			-D LIBUNWIND_ENABLE_SHARED=ON \
			-D CXX_SUPPORTS_FNO_EXCEPTIONS_FLAG:INTERNAL=1 \
			-D CXX_SUPPORTS_FUNWIND_TABLES_FLAG:INTERNAL=1 \
			-D LIBUNWIND_INSTALL_LIBRARY=ON \
			-D LIBUNWIND_INSTALL_SHARED_LIBRARY=ON \
			-D LIBUNWIND_INSTALL_STATIC_LIBRARY=ON \
			-D LIBUNWIND_DEFAULT_HIDE_SYMBOLS:BOOL=OFF \
			-D CMAKE_TOOLCHAIN_FILE="$TOOLCHAIN_FILES" \
			-D CMAKE_POSITION_INDEPENDENT_CODE=ON \
			-D CMAKE_C_COMPILER_WORKS=ON \
			-D CMAKE_CXX_COMPILER_WORKS=ON \
			-D CMAKE_ASM_COMPILER_WORKS=ON \
			-D CMAKE_CROSSCOMPILING=ON \
			-D LLVM_BUILD_LLVM_DYLIB=OFF \
			-D LLVM_LINK_LLVM_DYLIB=OFF \
			-D LLVM_ENABLE_RTTI=ON \
			-D FFI_INCLUDE_DIR="$ffi_include_dir" \
			-D LLVM_BINUTILS_INCDIR=$TOOLCHAIN_PREFIX/include \
			-D LLVM_APPEND_VC_REV=OFF \
			-D LLVM_ENABLE_ASSERTIONS=OFF \
			-D LLVM_ENABLE_EH=ON \
			-D LLVM_ENABLE_FFI=ON \
			-D LLVM_ENABLE_LIBCXX=ON \
			-D LLVM_ENABLE_PIC=ON \
			-D LLVM_ENABLE_SPHINX=OFF \
			-D LLVM_ENABLE_ZLIB=ON \
			-D LLVM_ENABLE_ZSTD=OFF \
			-D LLVM_INCLUDE_EXAMPLES=OFF \
			-D LLVM_INSTALL_UTILS=ON \
			-D LLVM_ENABLE_LLD=ON \
			-D LLVM_BUILD_EXAMPLES=OFF \
			-D LLVM_BUILD_DOCS=OFF \
			-D LLVM_BUILD_TESTS=OFF \
			-D LLVM_ENABLE_TERMINFO=ON \
			-D LLVM_ENABLE_LIBXML2=OFF \
			-D LLVM_ENABLE_LIBEDIT=OFF \
			-D LLVM_INCLUDE_DOCS=OFF \
			-D LLVM_INCLUDE_TESTS=ON \
			-D LLVM_INCLUDE_BENCHMARKS=OFF \
			-D LLVM_BUILD_BENCHMARKS=OFF \
			-D LLVM_USE_HOST_TOOLS=ON \
			-D LLVM_EXTERNAL_LIT=/usr/bin/lit \
			-D LLVM_CONFIG_PATH=$TOOLCHAIN_PREFIX/bin/llvm-config \
			-D LLVM_HAS_ATOMICS=ON \
			-D CLANG_DEFAULT_LINKER="ld.lld" \
			-D CLANG_DEFAULT_CXX_STDLIB=libc++ \
			-D LLVM_NATIVE_TARGET:STRING=$LLVM_TARGET_TRIPLE \
			-D LLVM_NATIVE_TOOL_DIR="$NATIVE_DIR/$INSTALL_PREFIX/bin" \
			-D COMPILER_RT_EXCLUDE_ATOMIC_BUILTIN=ON \
			-D HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1 \
			-D HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1 \
			-D HAVE_CXX_ATOMICS_WITH_LIB:INTERNAL=0 \
			-D HAVE_CXX_LIBATOMICS64:INTERNAL=0 \
			-D HAVE_LIBATOMIC:INTERNAL=0 \
			-D LIBCXX_HAS_ATOMIC_LIB:INTERNAL=0 \
			-D _LIBCPP_ATOMIC_ONLY_USE_BUILTINS=ON \
			-D LIBCXX_HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1 \
			-D LIBCXX_HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1 \
			-D LLVM_COMPILER_IS_GCC_COMPATIBLE=OFF \
			-D LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN=ON \
			-D LIBCXXABI_ENABLE_STATIC_UNWINDER=OFF \
			-D LIBCXX_ENABLE_STATIC_ABI_LIBRARY=ON \
			-D LIBCXX_HARDENING_MODE:STRING=$LIBCXX_HARDENING_MODE \
			-D CLANG_VERSION=$version_target \
			-D CMAKE_CXX_COMPILER_AR=/usr/bin/llvm-ar \
			-D CMAKE_CXX_COMPILER_RANLIB=/usr/bin/llvm-ranlib \
			-D CMAKE_CXX_COMPILER_LINKER=/usr/bin/ld.lld \
			-D CMAKE_SYSROOT_COMPILE=$KISS_ROOT \
			-D CMAKE_SYSROOT=$KISS_ROOT \
			-D _CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES_INIT= \
			-D IMPLICIT_INCLUDE_DIRECTORIES=OFF \
			-D __UNIX_PATHS_INCLUDED=ON \
			-D C_INCLUDE_PATH="$SYSROOT/$INSTALL_PREFIX/lib/clang/$VERSION_SYSTEM/include:$SYSROOT/$INSTALL_PREFIX/include" \
			-D CPLUS_INCLUDE_PATH="$SYSROOT/$INSTALL_PREFIX/include/$LLVM_DEFAULT_TARGET_TRIPLE/c++/v1/:$SYSROOT/$INSTALL_PREFIX/include/c++/v1/:$SYSROOT/$INSTALL_PREFIX/lib/clang/$VERSION_SYSTEM/include:$SYSROOT/$INSTALL_PREFIX/include" \
			-D CMAKE_C_FLAGS="\
-D __x86_64__ \
-D LLVM_OBJ_ROOT=$OUTPUT_DIR \
$cflags" \
			-D CMAKE_CXX_FLAGS=" \
-D _LIBCPP_PSTL_CPU_BACKEND_THREAD \
-D __x86_64__ \
-D LLVM_OBJ_ROOT=$OUTPUT_DIR \
$cxxflags" \
			-D CMAKE_EXE_LINKER_FLAGS="$linker_flags" \
			-D CMAKE_SHARED_LINKER_FLAGS="$linker_flags" \
			-D CMAKE_MODULE_LINKER_FLAGS="$linker_flags" \
			-D CROSS_TOOLCHAIN_FLAGS_LLVM_NATIVE="\
-D LLVM_DIR=$OUTPUT_DIR/NATIVE/lib/cmake/llvm; \
-D CMAKE_C_FLAGS=-D LLVM_OBJ_ROOT=$OUTPUT_DIR/NATIVE $cflags; \
-D CMAKE_CXX_FLAGS=-D LLVM_OBJ_ROOT=$OUTPUT_DIR/NATIVE $cxxflags; \
-D CMAKE_CPP_FLAGS=-D LLVM_OBJ_ROOT=$OUTPUT_DIR/NATIVE $cxxflags; \
-D LLVM_NATIVE_TOOL_DIR=$LLVM_NATIVE_TOOL_DIR; \
-D LLVM_CONFIG_PATH=$LLVM_NATIVE_TOOL_DIR/llvm-config; \
-D LLVM_TABLEGEN=$LLVM_NATIVE_TOOL_DIR/llvm-tblgen; \
-D LIBCXX_HARDENING_MODE:STRING=$LIBCXX_HARDENING_MODE; \
-D LD_LIBRARY_PATH=$NATIVE_LD_LIBRARY_PATH; \
-D CMAKE_EXE_LINKER_FLAGS:STRING=$LDFLAGS; \
-D CMAKE_MODULE_LINKER_FLAGS:STRING=$LDFLAGS; \
-D CMAKE_SHARED_LINKER_FLAGS:STRING=$LDFLAGS; \
-D CMAKE_BUILD_TYPE=Release; \
-D CMAKE_TOOLCHAIN_FILE="$TOOLCHAIN_FILES"; \
-D CLANG_VERSION=$version_target; \
-C $common_cmake; \
-D CMAKE_SYSROOT_COMPILE=$KISS_ROOT; \
-D CMAKE_SYSROOT=$KISS_ROOT; \
-D _CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES_INIT=; \
-D LLDB_ENABLE_PYTHON:INTERNAL=0 \
" \
			-D LD_LIBRARY_PATH="\
$TOOLCHAIN_PREFIX/lib/$LLVM_TARGET_TRIPLE:\
$TOOLCHAIN_PREFIX/lib" \
			-W no-dev > /dev/null || kill 0



#           -D CMAKE_C_FLAGS="\
# -D __x86_64__ \
# -isystem $RESOURCE_DIR/include \
# -isystem $TOOLCHAIN_PREFIX/include \
# $cflags" \
#           -D CMAKE_CXX_FLAGS=" \
# -D _LIBCPP_PSTL_CPU_BACKEND_THREAD \
# -D __x86_64__ \
# -isystem $TOOLCHAIN_PREFIX/include/$LLVM_TARGET_TRIPLE/c++/v1 \
# -isystem $TOOLCHAIN_PREFIX/include/c++/v1 \
# -isystem $TOOLCHAIN_PREFIX/include/tirpc \
# -isystem $RESOURCE_DIR/include \
# -isystem $TOOLCHAIN_PREFIX/include \
# $cxxflags" \
#             -D CROSS_TOOLCHAIN_FLAGS_LLVM_NATIVE="\
# -D LLVM_WITH_Z3=OFF; \
			# -W no-dev -S "$MAKE_DIR/llvm" || kill 0
			#
	#       -D LD_LIBRARY_PATH="\
# $OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE:\
# $OUTPUT_DIR/lib:\
# $DESTDIR/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE:\
# $DESTDIR/$INSTALL_PREFIX/lib:\
# $KISS_ROOT/$INSTALL_PREFIX/lib" \
	# In CROSS_TOOLCHAIN_FLAGS_LLVM_NATIVE
	# -D LIBCXX_ENABLE_ASSERTIONS:BOOL=ON; \
	# -D LLVM_DISABLE_ABI_BREAKING_CHECKS_ENFORCING:INTERNAL=1; \
	#
			# -D LLVM_CCACHE_BUILD=ON \
			# -D LLVM_CONFIG_PATH=$OUTPUT_DIR/bin/llvm-config \
			# -D LLVM_INCLUDE_TESTS=OFF \
			# -D CMAKE_TOOLCHAIN_FILE="$color_config" \
	# -D LD_LIBRARY_PATH=$( \
	#   path_prepend LD_LIBRARY_PATH "$KISS_ROOT/$INSTALL_PREFIX/lib"
	#   path_prepend LD_LIBRARY_PATH "$DESTDIR/$INSTALL_PREFIX/lib"
	#   path_prepend LD_LIBRARY_PATH "$DESTDIR/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE"
	#   path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/lib"
	#   path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE"
	#   path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/NATIVE/lib"
	#   path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/NATIVE/lib/$LLVM_TARGET_TRIPLE"
	#   printf '%s' "$LD_LIBRARY_PATH"
	#   ) \
	#       -D CROSS_TOOLCHAIN_FLAGS_LLVM_NATIVE="\
	# -D LLVM_TOOL_COMPILER_RT_BUILD:BOOL=ON; \
	# -D LLVM_TOOL_LIBCXX_BUILD:BOOL=ON; \
	# -D LLVM_TOOL_LIBCXXABI_BUILD:BOOL=ON; \
	# -D LLVM_TOOL_LIBUNWIND_BUILD:BOOL=ON; \
	# -D CLANG_INCLUDE_TESTS:BOOL=ON; \
	# -D LLVM_INCLUDE_TESTS:BOOL=ON; \
	# -D LLVM_BUILD_TESTS:BOOL=ON \

			# -D LLVM_TABLEGEN=$OUTPUT_DIR/bin/llvm-tblgen \
			#
	#       -D LLVM_ENABLE_RUNTIMES="compiler-rt;libunwind;libcxxabi;libcxx" \
	#       -D COMPILER_RT_USE_BUILTINS_LIBRARY=ON \
	#       -D LIBCXXABI_USE_LLVM_UNWINDER=ON \
	#       -D LIBUNWIND_HAS_NODEFAULTLIBS_FLAG=OFF \
	#       -D LIBUNWIND_USES_SJLJ_EXCEPTIONS:INTERNAL=0 \
	#       -D LIBUNWIND_C_FLAGS="${CFLAGS-} \
	# -U __USING_SJLJ_EXCEPTIONS__ \
	# -D _LIBUNWIND_TARGET_X86_64 \
	# -D __x86_64__ \
	# -isystem $DESTDIR/$INSTALL_PREFIX/include" \
	#       -D LIBUNWIND_CXX_FLAGS="${CXXFLAGS-} \
	# -U __USING_SJLJ_EXCEPTIONS__ \
	# -D _LIBUNWIND_TARGET_X86_64 \
	# -D __x86_64__ \
	# -isystem $KISS_ROOT/$INSTALL_PREFIX/include/tirpc \
	# -isystem $DESTDIR/$INSTALL_PREFIX/include/c++/v1 \
	# -isystem $DESTDIR/$INSTALL_PREFIX/include" \
	#       -D LIBUNWIND_COMPILE_FLAGS="${CFLAGS-} \
	# -U __USING_SJLJ_EXCEPTIONS__ \
	# -D _LIBUNWIND_TARGET_X86_64 \
	# -D __x86_64__ \
	# -isystem $KISS_ROOT/$INSTALL_PREFIX/include/tirpc \
	# -isystem $DESTDIR/$INSTALL_PREFIX/include/c++/v1 \
	# -isystem $DESTDIR/$INSTALL_PREFIX/include" \
	#       -D LIBUNWIND_LINK_FLAGS=" \
	# -resource-dir=$RESOURCE_DIR \
	# -L $RESOURCE_DIR/lib/linux \
	# -L $SYSROOT_LIB \
	# $LDFLAGS_NO_LIBUNWIND \
	# -Wl,-rpath='\\\$ORIGIN/../lib' \
	# " \
	#       -D LIBUNWIND_ADDITIONAL_COMPILE_FLAGS=-D__x86_64__ \
	#       -D CLANG_DEFAULT_RTLIB="compiler-rt" \
	#       -D CLANG_DEFAULT_UNWINDLIB="libunwind" \
	#       -D LLVM_ENABLE_BACKTRACES=ON \
	#       -D COMPILER_RT_HAS_LIBEXECINFO=ON \
	#       -D LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default=ON \
	#       -D LLVM_ENABLE_PER_TARGET_RUNTIME_DIR=ON \
	#       -D CROSS_TOOLCHAIN_FLAGS_LLVM_NATIVE="\
	#       -D LLVM_NATIVE_TOOL_DIR=$NATIVE_DIR/$INSTALL_PREFIX/bin; \
	#       -D LLVM_CONFIG_PATH=$OUTPUT_DIR/NATIVE/bin/llvm-config" \
	#       -D CMAKE_TOOLCHAIN_PREFIX="$CMAKE_TOOLCHAIN_PREFIX" \
	#       -D COMPILER_RESOURCE_DIR:STRING="$RESOURCE_DIR" \
	#       -D LLVM_ENABLE_PROJECTS="clang;lld" \
	#       -D LLVM_CONFIG_PATH=$OUTPUT_DIR/bin/llvm-config \

			# -C $runtimes_cmake \
			# -C $builtins_cmake \
			# -C $MAKE_DIR/files/distribution.cmake \
	#   get_property could not find TARGET clang-resource-headers.  Perhaps it has
	#   not yet been created.
			# -D LLVM_ENABLE_PROJECTS="clang" \
			# -D LLVM_NATIVE_TOOL_DIR=$NATIVE_DIR/$INSTALL_PREFIX/bin \
			# -D LLVM_TABLEGEN=$LLVM_TABLEGEN \
			# -D LLVM_TABLEGEN=$LLVM_TABLEGEN \
			# -D LLVM_TABLEGEN=/$INSTALL_PREFIX/bin/llvm-tblgen \
			# -D CMAKE_INSTALL_NAME_DIR:STRING=/$INSTALL_PREFIX/lib/llvm/$version_target \
			# -D LLVM_CCACHE_BUILD=ON \
			# -D _LIBCPP_ATOMIC_ONLY_USE_BUILTINS=ON \
			# -D LIBCXX_HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1 \
			# -D LIBCXX_HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1 \
			# -D LIBCXX_HAS_ATOMIC_LIB:INTERNAL=0 \
		#       -D CMAKE_CXX_FLAGS="-isystem $KISS_ROOT/$INSTALL_PREFIX/include/c++/v1 \
		# -isystem $MAKE_DIR/libcxx/include \
		# -isystem $KISS_ROOT/$INSTALL_PREFIX/include" \
		#       -D CMAKE_C_FLAGS="-isystem $KISS_ROOT/$INSTALL_PREFIX/include" \

	  # Manually-specified variables were not used by the project:

	  #   COMPILER_RT_EXCLUDE_ATOMIC_BUILTIN
	  #   HAVE_CXX_ATOMICS_WITHOUT_LIB
	  #   HAVE_CXX_LIBATOMICS64
	  #   HAVE_LIBATOMIC
	  #   LIBCXX_HAS_ATOMIC_LIB
	  #   LIBCXX_HAVE_CXX_ATOMICS64_WITHOUT_LIB
	  #   LIBCXX_HAVE_CXX_ATOMICS_WITHOUT_LIB
	  #   _LIBCPP_ATOMIC_ONLY_USE_BUILTINS

		# grep -Hn LIBUNWIND_ENABLE_STATIC          "$output_dir/CMakeCache.txt"
		# grep -Hn LIBUNWIND_ENABLE_SHARED          "$output_dir/CMakeCache.txt"
		# grep -Hn CXX_SUPPORTS_FNO_EXCEPTIONS_FLAG "$output_dir/CMakeCache.txt"
		# grep -Hn CXX_SUPPORTS_FUNWIND_TABLES_FLAG "$output_dir/CMakeCache.txt"
		# grep -Hn LIBUNWIND_INSTALL_LIBRARY        "$output_dir/CMakeCache.txt"
		# grep -Hn LIBUNWIND_INSTALL_STATIC_LIBRARY "$output_dir/CMakeCache.txt"
		# grep -Hn LIBUNWIND_INSTALL_SHARED_LIBRARY "$output_dir/CMakeCache.txt"
		# grep -Hn LIBUNWIND_DEFAULT_HIDE_SYMBOLS   "$output_dir/CMakeCache.txt"
		# grep -Hn LIBUNWIND_HIDE_SYMBOLS           "$output_dir/CMakeCache.txt" || :

		# CMake Error: The inter-target dependency graph contains the following strongly connected component (cycle):
		#   "llvm-config" of type EXECUTABLE
		#     depends on "NativeLLVMConfig" (strong)
		#   "NativeLLVMConfig" of type UTILITY
		#     depends on "llvm-config" (strong)
		# At least one of these targets is not a STATIC_LIBRARY.  Cyclic dependencies are allowed only among static libraries

		# sed "s# -isystem $KISS_ROOT/usr/include$##g" < "$output_dir/build.ninja" > _
		# mv -f _ "$output_dir/build.ninja"

		fix_cmakecxxcompiler "$output_dir"

		// cue 'llvm-config' "construction"
		ninja -C "$output_dir" llvm-config > /dev/null || {
			# sed "s# -isystem $KISS_ROOT/usr/include\$##g" < "$output_dir/NATIVE/build.ninja" > _
			# mv -f _ "$output_dir/NATIVE/build.ninja"
			ninja -C "$output_dir" llvm-config || kill 0
		}
		ninja -C "$output_dir" install-llvm-config > /dev/null 2>&1 ||
		ninja -C "$output_dir" install-llvm-config || kill 0

		// cue 'LLVMSupport' "construction"

		# ninja -C "$output_dir" compiler-rt > /dev/null || kill 0
		# ninja -C "$output_dir" LLVMTargetParser > /dev/null || kill 0

		# LLVMSupport -> llvm-config -> LLVM_OBJ_ROOT -- a build time variable
		ninja -C "$output_dir" LLVMSupport > /dev/null ||
		ninja -C "$output_dir" LLVMSupport || kill 0

		# ninja -C "$output_dir" LLVMDemangle > /dev/null ||
		# ninja -C "$output_dir" LLVMDemangle || kill 0

		// cue 'llvm-tblgen' "construction"

		ninja -C "$output_dir" llvm-min-tblgen > /dev/null ||
		ninja -C "$output_dir" llvm-min-tblgen || kill 0
		ninja -C "$output_dir" llvm-tblgen > /dev/null || {
			# sed "s# -isystem $KISS_ROOT/usr/include\$##g" < "$output_dir/NATIVE/build.ninja" > _
			# mv -f _ "$output_dir/NATIVE/build.ninja"
			ninja -C "$output_dir" llvm-tblgen || kill 0
		}
		# ninja -C "$output_dir" clang-tblgen > /dev/null ||
		# ninja -C "$output_dir" clang-tblgen || kill 0

		// cue 'llvm' "construction"
		# cd "$MAKE_DIR"
		cmake --build "$output_dir" -j $jobs > /dev/null || {
			# sed "s# -isystem $KISS_ROOT/usr/include\$##g" < "$output_dir/NATIVE/build.ninja" > _
			# mv -f _ "$output_dir/NATIVE/build.ninja"
			cmake --build "$output_dir" -j $jobs || kill 0
		}
		ninja -j $jobs -C "$output_dir" all > /dev/null

		# find "$OUTPUT_DIR" -type f -name "libunwind.so.*" -o -name "libunwind.a" || :

		# cmake --build "$OUTPUT_DIR" -j $jobs || kill 0
		// cue 'llvm' "installation"
		cmake --install "$output_dir" > /dev/null && {
			path_prepend LD_LIBRARY_PATH "$TOOLCHAIN_PREFIX/lib"
			path_prepend LD_LIBRARY_PATH "$TOOLCHAIN_PREFIX/lib/$LLVM_TARGET_TRIPLE"
			! find_target "install-llvm-min-tblgen" ||
			ninja -C "$output_dir" install-llvm-min-tblgen
			ninja -C "$output_dir" install-llvm-tblgen
			# ninja -C "$output_dir" install-clang-tblgen
			# ninja -C "$output_dir" llvm-config
			ninja -C "$output_dir" check-llvm-tools-llvm-config || :
			# ! llvm-config --version > /dev/null 2>&1 || {
				ninja -C "$output_dir" install-llvm-config
			# }
			[ -f "$DESTDIR/$INSTALL_PREFIX/bin/llvm-config" ] || {
				// as_own "$DESTDIR" \
				rsync -aq "$OUTPUT_DIR/bin/llvm-config" "$DESTDIR/$INSTALL_PREFIX/" && // as_own "$DESTDIR" sync
			}
			[ -f "$DESTDIR/$INSTALL_PREFIX/bin/llvm-tblgen" ] || {
				// as_own "$DESTDIR" \
				rsync -aq "$OUTPUT_DIR/bin/llvm-tblgen" "$DESTDIR/$INSTALL_PREFIX/" && // as_own "$DESTDIR" sync
			}
			ninja -C "$output_dir" install
			export LLVM_TABLEGEN="$DESTDIR/$INSTALL_PREFIX/bin/llvm-tblgen"
			# export CLANG_TABLEGEN="$DESTDIR/$INSTALL_PREFIX/bin/clang-tblgen"

			# [ ! -d "$OUTPUT_DIR/libunwind/usr/lib/linux" ] || {
			#   mkdir -p "$DESTDIR/usr/lib/clang/$version_target/lib"
			#   rsync -aq "$OUTPUT_DIR/libunwind/usr/lib/linux" "$DESTDIR/usr/lib/clang/$version_target/lib/"
			# }

			# // check_libunwind $(find "$output_dir" -type f -name "libunwind.so.*") $(find "$DESTDIR/$INSTALL_PREFIX/lib" -type f -name "libunwind.so.*") ||
			# 	// die 'libunwind' "is invalid"
			[ -d "$NATIVE_DIR/$INSTALL_PREFIX/lib" ] ||
				// as_own "$NATIVE_DIR" \
				\mkdir -p "$NATIVE_DIR/$INSTALL_PREFIX/lib"
			[ ! -d "$OUTPUT_DIR/NATIVE/lib" ] ||
				{
					// as_own "$NATIVE_DIR" \
					rsync -aqz "$OUTPUT_DIR/NATIVE/lib/." "$NATIVE_DIR/$INSTALL_PREFIX/lib/" && // as_own "$NATIVE_DIR" sync; }
			[ ! -d "$OUTPUT_DIR/NATIVE/bin" ] ||
				{
					// as_own "$NATIVE_DIR" \
					rsync -aqz "$OUTPUT_DIR/NATIVE/bin/." "$LLVM_NATIVE_TOOL_DIR/" && // as_own "$NATIVE_DIR" sync; }
		} || {
			# path_prepend LD_LIBRARY_PATH "$ld_library_path_previous"
			export LLVM_TABLEGEN="$llvm_tblgen_previous"
			# export CLANG_TABLEGEN="$clang_tblgen_previous"
			kill 0
		}

		cd "$provious_dir"
	}

	clang_bootstrap() {
		_level_2
		// log  'cmake' "clear cache"
		# [ "$(// delegate -- source_dir)" = "clang" ] &&
		clean_objects "llvm"
		// cue 'clang' "configuration and generation"
		local provious_dir="$PWD"

		local python_version=$(python3 -V | sed 's/.*\([0-9]\{1,\}\.[0-9]\{1,\}\)\..*/\1/')

		# path_prepend PATH "$OUTPUT_DIR/bin"
		local ld_library_path_previous="$LD_LIBRARY_PATH"
		# path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/lib"
		# path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE"
		local llvm_tblgen_previous="${LLVM_TABLEGEN-}"
		# export LLVM_TABLEGEN="$OUTPUT_DIR/bin/llvm-tblgen"
		# $OUTPUT_DIR/bin/clang-tblgen
		local clang_tblgen_previous="${CLANG_TABLEGEN-}"
		# export CLANG_TABLEGEN="$OUTPUT_DIR/bin/clang-tblgen"

		local output_dir="$OUTPUT_DIR"

		# local rpath_version="$version_xhost"
		# [ ! -z "${TOOLCHAIN_PREFIX##*"$DESTDIR"*}" ] ||
		local rpath_version="$version_target"

		local linker_flags=" \
-resource-dir=$RESOURCE_DIR \
-L $OUTPUT_DIR/lib/clang/$VERSION_SYSTEM/lib/$LLVM_TARGET_TRIPLE \
-L $OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE \
-L $RESOURCE_DIR/lib/$LLVM_TARGET_TRIPLE \
-L $RESOURCE_DIR/lib/linux \
"
# -L $TOOLCHAIN_PREFIX/lib/$LLVM_TARGET_TRIPLE \

		[ ! -d "$SYSROOT_LIB/$LLVM_TARGET_TRIPLE" ] ||
			linker_flags="$linker_flags \
-L $SYSROOT_LIB/$LLVM_TARGET_TRIPLE \
"

		linker_flags="$linker_flags \
-L $SYSROOT_LIB \
-Wl,-rpath=XORIGIN/../lib/clang/$version_target/lib/$LLVM_TARGET_TRIPLE \
-Wl,-rpath=XORIGIN/../lib/clang/$version_target/lib/linux \
-Wl,-rpath=XORIGIN/../lib/$LLVM_TARGET_TRIPLE \
-Wl,-rpath=XORIGIN/../lib \
$ldflags \
"
# -lc++ \
# -lc++abi \
# -Wl,-lunwind \

		cd "$MAKE_DIR/clang"
		modules_prepare
		# Use individual cmake configuration
		cmake -G Ninja \
			-B "$output_dir" \
			-S "$MAKE_DIR/llvm" \
			-C "$common_cmake" \
			-D CMAKE_MODULE_PATH="$CMAKE_MODULE_PATH" \
			-D CMAKE_INSTALL_PREFIX=/$INSTALL_PREFIX \
			-D CMAKE_INSTALL_RPATH=XORIGIN/../lib/llvm/$version_target \
			-D CMAKE_INSTALL_NAME_DIR:STRING=/$INSTALL_PREFIX/lib \
			-D CMAKE_BUILD_WITH_INSTALL_RPATH=ON \
			-D CMAKE_BUILD_TYPE=Release \
			-D BOOTSTRAP_CMAKE_SYSTEM_NAME="$($KISS_ROOT/usr/bin/uname)" \
			-D CMAKE_SYSTEM_NAME=$($KISS_ROOT/usr/bin/uname) \
			-D CMAKE_HOST_SYSTEM_NAME=$(/usr/bin/uname) \
			-D LLVM_TARGET_ARCH=$TARGET_ARCH \
			-D LLVM_HOST_TRIPLE="$(cc -dumpmachine)" \
			-D CMAKE_C_COMPILER_TARGET="$LLVM_TARGET_TRIPLE" \
			-D CMAKE_CXX_COMPILER_TARGET="$LLVM_TARGET_TRIPLE" \
			-D LLVM_RUNTIME_TARGETS="$LLVM_TARGET_TRIPLE" \
			-D LLVM_DEFAULT_TARGET_TRIPLE="$LLVM_TARGET_TRIPLE" \
			-D CMAKE_C_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang \
			-D CMAKE_ASM_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang \
			-D CMAKE_CXX_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang++ \
			-D CMAKE_CPP_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/cpp \
			-D ENABLE_LINKER_BUILD_ID=OFF \
			-D LLVM_TARGETS_TO_BUILD="host;AMDGPU" \
			-D CMAKE_CXX_STANDARD="$LLVM_REQUIRED_CXX_STANDARD" \
			-D COMPILER_RT_BUILD_SANITIZERS:BOOL=ON \
			-D LIBCXX_HAS_MUSL_LIBC=ON \
			-D _LIBCPP_HAS_MUSL_LIBC=ON \
			-D _LIBCPP_PROVIDES_DEFAULT_RUNE_TABLE:INTERNAL=1 \
			-D BUILD_SHARED_LIBS:BOOL=ON \
			-D COMPILER_RT_BUILD_XRAY=OFF \
			-D LIBUNWIND_HAS_GCC_LIB:BOOL=OFF \
			-D LIBUNWIND_HAS_GCC_S_LIB:BOOL=OFF \
			-D LIBUNWIND_ENABLE_EXCEPTIONS=ON \
			-D LIBUNWIND_INSTALL_LIBRARY_DIR:PATH=lib \
			-D LIBUNWIND_USE_COMPILER_RT=ON \
			-D LIBUNWIND_ENABLE_STATIC=ON \
			-D LIBUNWIND_ENABLE_SHARED=ON \
			-D CXX_SUPPORTS_FNO_EXCEPTIONS_FLAG:INTERNAL=1 \
			-D CXX_SUPPORTS_FUNWIND_TABLES_FLAG:INTERNAL=1 \
			-D LIBUNWIND_INSTALL_LIBRARY=ON \
			-D LIBUNWIND_INSTALL_SHARED_LIBRARY=ON \
			-D LIBUNWIND_INSTALL_STATIC_LIBRARY=ON \
			-D LIBUNWIND_DEFAULT_HIDE_SYMBOLS:BOOL=OFF \
			-D CMAKE_TOOLCHAIN_FILE="$TOOLCHAIN_FILES" \
			-D CMAKE_POSITION_INDEPENDENT_CODE=ON \
			-D CMAKE_C_COMPILER_WORKS=ON \
			-D CMAKE_CXX_COMPILER_WORKS=ON \
			-D CMAKE_ASM_COMPILER_WORKS=ON \
			-D CMAKE_CROSSCOMPILING=ON \
			-D LLVM_BUILD_LLVM_DYLIB=OFF \
			-D LLVM_LINK_LLVM_DYLIB=OFF \
			-D LLVM_ENABLE_RTTI=ON \
			-D FFI_INCLUDE_DIR="$ffi_include_dir" \
			-D LLVM_BINUTILS_INCDIR=$TOOLCHAIN_PREFIX/include \
			-D LLVM_APPEND_VC_REV=OFF \
			-D LLVM_ENABLE_ASSERTIONS=OFF \
			-D LLVM_ENABLE_EH=ON \
			-D LLVM_ENABLE_FFI=ON \
			-D LLVM_ENABLE_LIBCXX=ON \
			-D LLVM_ENABLE_PIC=ON \
			-D LLVM_ENABLE_SPHINX=OFF \
			-D LLVM_ENABLE_ZLIB=ON \
			-D LLVM_ENABLE_ZSTD=OFF \
			-D LLVM_INCLUDE_EXAMPLES=OFF \
			-D LLVM_INSTALL_UTILS=ON \
			-D LLVM_ENABLE_LLD=ON \
			-D LLVM_BUILD_EXAMPLES=OFF \
			-D LLVM_BUILD_DOCS=OFF \
			-D LLVM_BUILD_TESTS=OFF \
			-D LLVM_ENABLE_TERMINFO=ON \
			-D LLVM_ENABLE_LIBXML2=OFF \
			-D LLVM_ENABLE_LIBEDIT=OFF \
			-D LLVM_INCLUDE_DOCS=OFF \
			-D LLVM_INCLUDE_TESTS=ON \
			-D LLVM_INCLUDE_BENCHMARKS=OFF \
			-D LLVM_BUILD_BENCHMARKS=OFF \
			-D LLVM_USE_HOST_TOOLS=ON \
			-D LLVM_EXTERNAL_LIT=/usr/bin/lit \
			-D LLVM_CONFIG_PATH=$TOOLCHAIN_PREFIX/bin/llvm-config \
			-D LLVM_HAS_ATOMICS=ON \
			-D CLANG_DEFAULT_LINKER="ld.lld" \
			-D CLANG_DEFAULT_CXX_STDLIB=libc++ \
			-D LLVM_NATIVE_TARGET:STRING=$LLVM_TARGET_TRIPLE \
			-D LLVM_NATIVE_TOOL_DIR="$NATIVE_DIR/$INSTALL_PREFIX/bin" \
			-D COMPILER_RT_EXCLUDE_ATOMIC_BUILTIN=ON \
			-D HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1 \
			-D HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1 \
			-D HAVE_CXX_ATOMICS_WITH_LIB:INTERNAL=0 \
			-D HAVE_CXX_LIBATOMICS64:INTERNAL=0 \
			-D HAVE_LIBATOMIC:INTERNAL=0 \
			-D LIBCXX_HAS_ATOMIC_LIB:INTERNAL=0 \
			-D _LIBCPP_ATOMIC_ONLY_USE_BUILTINS=ON \
			-D LIBCXX_HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1 \
			-D LIBCXX_HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1 \
			-D LLVM_COMPILER_IS_GCC_COMPATIBLE=OFF \
			-D LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN=ON \
			-D LIBCXXABI_ENABLE_STATIC_UNWINDER=OFF \
			-D LIBCXX_ENABLE_STATIC_ABI_LIBRARY=ON \
			-D LIBCXX_HARDENING_MODE:STRING=$LIBCXX_HARDENING_MODE \
			-C $runtimes_cmake \
			-C $builtins_cmake \
			-D CLANG_DEFAULT_PIE_ON_LINUX=ON \
			-D CLANG_ENABLE_ARCMT=ON \
			-D CLANG_ENABLE_STATIC_ANALYZER=ON \
			-D LLVM_USE_HOST_TOOLS=ON \
			-D CLANG_CONFIG_FILE_SYSTEM_DIR=/etc/clang/$version_target \
			-D LLVM_ENABLE_PROJECTS="clang;clang-tools-extra;lld" \
			-D CLANG_LINK_CLANG_DYLIB=OFF \
			-D CLANG_PLUGIN_SUPPORT=ON \
			-D CLANG_PYTHON_BINDINGS_VERSIONS="$python_version" \
			-D CLANG_SYSTEMZ_DEFAULT_ARCH=z196 \
			-D CLANG_BUILD_EXAMPLES=OFF \
			-D CLANG_INCLUDE_DOCS=OFF \
			-D CLANG_INCLUDE_TESTS=ON \
			-D LIBCLANG_BUILD_STATIC=ON \
			-D CLANG_VERSION=$version_target \
			-D CMAKE_SYSROOT_COMPILE=$KISS_ROOT \
			-D CMAKE_SYSROOT=$KISS_ROOT \
			-D _CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES_INIT= \
			-D IMPLICIT_INCLUDE_DIRECTORIES=OFF \
			-D __UNIX_PATHS_INCLUDED=ON \
			-D C_INCLUDE_PATH="$SYSROOT/$INSTALL_PREFIX/lib/clang/$VERSION_SYSTEM/include:$SYSROOT/$INSTALL_PREFIX/include" \
			-D CPLUS_INCLUDE_PATH="$SYSROOT/$INSTALL_PREFIX/include/$LLVM_DEFAULT_TARGET_TRIPLE/c++/v1/:$SYSROOT/$INSTALL_PREFIX/include/c++/v1/:$SYSROOT/$INSTALL_PREFIX/lib/clang/$VERSION_SYSTEM/include:$SYSROOT/$INSTALL_PREFIX/include" \
			-D CMAKE_C_FLAGS="\
-D __x86_64__ \
-D LLVM_OBJ_ROOT=$OUTPUT_DIR \
$cflags" \
			-D CMAKE_CXX_FLAGS=" \
-D _LIBCPP_PSTL_CPU_BACKEND_THREAD \
-D __x86_64__ \
-D LLVM_OBJ_ROOT=$OUTPUT_DIR \
$cxxflags" \
			-D CMAKE_EXE_LINKER_FLAGS="$linker_flags" \
			-D CMAKE_SHARED_LINKER_FLAGS="$linker_flags" \
			-D CMAKE_MODULE_LINKER_FLAGS="$linker_flags" \
			-D CROSS_TOOLCHAIN_FLAGS_LLVM_NATIVE="\
-D LLVM_DIR=$OUTPUT_DIR/NATIVE/lib/cmake/llvm; \
-D CMAKE_C_FLAGS=-D LLVM_OBJ_ROOT=$OUTPUT_DIR/NATIVE $cflags; \
-D CMAKE_CXX_FLAGS=-D LLVM_OBJ_ROOT=$OUTPUT_DIR/NATIVE $cxxflags; \
-D CMAKE_CPP_FLAGS=-D LLVM_OBJ_ROOT=$OUTPUT_DIR/NATIVE $cxxflags; \
-D LLVM_NATIVE_TOOL_DIR=$LLVM_NATIVE_TOOL_DIR; \
-D CLANG_TABLEGEN=$LLVM_NATIVE_TOOL_DIR/clang-tblgen; \
-D LLVM_CONFIG_PATH=$LLVM_NATIVE_TOOL_DIR/llvm-config; \
-D LIBCXX_HARDENING_MODE:STRING=$LIBCXX_HARDENING_MODE; \
-D LD_LIBRARY_PATH=$NATIVE_LD_LIBRARY_PATH; \
-D CMAKE_EXE_LINKER_FLAGS:STRING=$LDFLAGS; \
-D CMAKE_MODULE_LINKER_FLAGS:STRING=$LDFLAGS; \
-D CMAKE_SHARED_LINKER_FLAGS:STRING=$LDFLAGS; \
-D CMAKE_BUILD_TYPE=Release; \
-D CMAKE_TOOLCHAIN_FILE="$TOOLCHAIN_FILES"; \
-D CLANG_VERSION=$version_target; \
-C $common_cmake; \
-D CMAKE_SYSROOT_COMPILE=$KISS_ROOT; \
-D CMAKE_SYSROOT=$KISS_ROOT; \
-D _CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES_INIT=; \
-D LLDB_ENABLE_PYTHON:INTERNAL=0 \
" \
			-D LD_LIBRARY_PATH="\
$TOOLCHAIN_PREFIX/lib/$LLVM_TARGET_TRIPLE:\
$TOOLCHAIN_PREFIX/lib" \
			-W no-dev > /dev/null

#           -D CMAKE_C_FLAGS="\
# -D __x86_64__ \
# -D LLVM_OBJ_ROOT=$OUTPUT_DIR \
# -isystem $RESOURCE_DIR/include \
# -isystem $TOOLCHAIN_PREFIX/include \
# $cflags" \
#           -D CMAKE_CXX_FLAGS=" \
# -D _LIBCPP_PSTL_CPU_BACKEND_THREAD \
# -D __x86_64__ \
# -D LLVM_OBJ_ROOT=$OUTPUT_DIR \
# -isystem $TOOLCHAIN_PREFIX/include/$LLVM_TARGET_TRIPLE/c++/v1 \
# -isystem $TOOLCHAIN_PREFIX/include/c++/v1 \
# -isystem $RESOURCE_DIR/include \
# -isystem $TOOLCHAIN_PREFIX/include \
# $cxxflags" \
#           -D CROSS_TOOLCHAIN_FLAGS_LLVM_NATIVE="\
# -D LLVM_WITH_Z3=OFF; \
#           -D CMAKE_CXX_FLAGS=" \
# -D _LIBCPP_PSTL_CPU_BACKEND_THREAD \
# -D __x86_64__ \
# -isystem $TOOLCHAIN_PREFIX/include/c++/v1 \
# -isystem $OUTPUT_DIR/lib/clang/$VERSION_SYSTEM/include \
# -isystem $TOOLCHAIN_PREFIX/include \
# $cxxflags" \
	#       -D LD_LIBRARY_PATH="\
	# $OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE:\
	# $OUTPUT_DIR/lib:\
	# $DESTDIR/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE:\
	# $DESTDIR/$INSTALL_PREFIX/lib:\
	# $KISS_ROOT/$INSTALL_PREFIX/lib" \
	# In CROSS_TOOLCHAIN_FLAGS_LLVM_NATIVE
	# -D LIBCXX_ENABLE_ASSERTIONS:BOOL=ON; \
	# -D LLVM_DISABLE_ABI_BREAKING_CHECKS_ENFORCING:INTERNAL=1; \
	#
			# -D LLVM_CCACHE_BUILD=ON \
			# -D LLVM_CONFIG_PATH=$DESTDIR/$INSTALL_PREFIX/bin/llvm-config \
			# -D LLVM_CONFIG_PATH=$OUTPUT_DIR/bin/llvm-config \
			# -D LLVM_INCLUDE_TESTS=OFF \
			# -D CLANG_TABLEGEN=$DESTDIR/$INSTALL_PREFIX/bin/clang-tblgen \
	#       -D LD_LIBRARY_PATH="\
	# $OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE:\
	# $OUTPUT_DIR/lib:\
	# $DESTDIR/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE:\
	# $DESTDIR/$INSTALL_PREFIX/lib:\
	# $KISS_ROOT/$INSTALL_PREFIX/lib" \
			# -D CMAKE_TOOLCHAIN_FILE="$color_config" \
			# -D CMAKE_MODULE_PATH="cmake/Modules" \
	# -D LD_LIBRARY_PATH=$( \
	#   path_prepend LD_LIBRARY_PATH "$KISS_ROOT/$INSTALL_PREFIX/lib"
	#   path_prepend LD_LIBRARY_PATH "$DESTDIR/$INSTALL_PREFIX/lib"
	#   path_prepend LD_LIBRARY_PATH "$DESTDIR/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE"
	#   path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/lib"
	#   path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE"
	#   path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/NATIVE/lib"
	#   path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/NATIVE/lib/$LLVM_TARGET_TRIPLE"
	#   printf '%s' "$LD_LIBRARY_PATH"
	#   ) \
			# -S "$MAKE_DIR/clang" \
			# CMake Error at cmake/modules/AddClang.cmake:193 (llvm_add_tool_symlink):
			#   Unknown CMake command "llvm_add_tool_symlink".
			# Call Stack (most recent call first):
			#   tools/driver/CMakeLists.txt:70 (add_clang_symlink)
			#
			# -D ENABLE_LINKER_BUILD_ID=ON \
			# -D CLANG_BUILT_STANDALONE=ON \
			# -D CLANG_TABLEGEN=$CLANG_TABLEGEN \
			# -D CLANG_TABLEGEN=/$INSTALL_PREFIX/bin/clang-tblgen \
			# -D LLVM_TABLEGEN=$LLVM_TABLEGEN \
			# -D LLVM_MAIN_SRC_DIR="$MAKE_DIR/llvm"
			# -D CLANG_LINK_CLANG_DYLIB=OFF \
			# -D CMAKE_CROSSCOMPILING=ON \
			# -D CMAKE_INSTALL_NAME_DIR:STRING=/$INSTALL_PREFIX/lib/llvm/$version_target \
			# -D LLVM_CCACHE_BUILD=ON \
			# -D HAVE_CXX_ATOMICS_WITH_LIB=OFF \
			# -D _LIBCPP_STD_VER=$standard_version_number \
			# -W no-dev -S "$MAKE_DIR/clang"
			#

		# Use global cmake configuration
		# deploy "-D" "LLVM_INCLUDE_TESTS"                 "OFF"
		# eval "$CMAKE $CMAKE_OPTIONS" 2>&1 || kill 0

		fix_cmakecxxcompiler "$output_dir"

		// cue 'clang-tblgen' "construction"
		ninja -C "$output_dir" llvm-min-tblgen > /dev/null || {
			# sed "s# -isystem $KISS_ROOT/usr/include\$##g" < "$output_dir/NATIVE/build.ninja" > _
			# mv -f _ "$output_dir/NATIVE/build.ninja"
			ninja -C "$output_dir" llvm-min-tblgen || kill 0
		}
		! find_target "install-llvm-min-tblgen" ||
		ninja -C "$output_dir" install-llvm-min-tblgen > /dev/null ||
		ninja -C "$output_dir" install-llvm-min-tblgen || kill 0
		ninja -C "$output_dir" llvm-tblgen > /dev/null || {
			# sed "s# -isystem $KISS_ROOT/usr/include\$##g" < "$output_dir/NATIVE/build.ninja" > _
			# mv -f _ "$output_dir/NATIVE/build.ninja"
			ninja -C "$output_dir" llvm-tblgen || kill 0
		}
		ninja -C "$output_dir" install-llvm-config > /dev/null ||
		ninja -C "$output_dir" install-llvm-config || kill 0
		ninja -C "$output_dir" clang-tblgen > /dev/null || {
			# sed "s# -isystem $KISS_ROOT/usr/include\$##g" < "$output_dir/NATIVE/build.ninja" > _
			# mv -f _ "$output_dir/NATIVE/build.ninja"
			ninja -C "$output_dir" clang-tblgen || kill 0
		}
		ninja -C "$output_dir" install-clang-tblgen > /dev/null ||
		ninja -C "$output_dir" install-clang-tblgen || kill 0

		[ ! -d "$OUTPUT_DIR/NATIVE/lib" ] ||
			{
				// as_own "$NATIVE_DIR" \
				rsync -aqz "$OUTPUT_DIR/NATIVE/lib/." "$NATIVE_DIR/$INSTALL_PREFIX/lib/" && // as_own "$NATIVE_DIR" sync; }
		[ ! -d "$OUTPUT_DIR/NATIVE/bin" ] ||
			{
				// as_own "$NATIVE_DIR" \
				rsync -aqz "$OUTPUT_DIR/NATIVE/bin/." "$LLVM_NATIVE_TOOL_DIR/" && // as_own "$NATIVE_DIR" sync; }

		// cue 'clang' "construction"
		# cd "$MAKE_DIR"
		cmake --build   "$output_dir" -j $jobs > /dev/null || {
			# sed "s# -isystem $KISS_ROOT/usr/include\$##g" < "$output_dir/NATIVE/build.ninja" > _
			# mv -f _ "$output_dir/NATIVE/build.ninja"
			cmake --build   "$output_dir" -j $jobs || kill 0
		}
		// cue 'clang' "construction all"
		ninja -j $jobs -C "$output_dir" all > /dev/null
		// ver_naming "$OUTPUT_DIR/lib/clang" "$version_target" "$version_target_major"

		// check_clang || // die 'clang' "build invalid targets"

		cd "$MAKE_DIR"

		// cue 'clang' "installation"
		cmake --install "$output_dir" > /dev/null || kill 0

		// ver_naming "$DESTDIR/$INSTALL_PREFIX/lib/clang" "$version_target" "$version_target_major"

		// install_clang_libs && {
			path_prepend LD_LIBRARY_PATH "$TOOLCHAIN_PREFIX/lib"
			path_prepend LD_LIBRARY_PATH "$TOOLCHAIN_PREFIX/lib/$LLVM_TARGET_TRIPLE"
			! find_target "install-llvm-min-tblgen" ||
			ninja -C "$output_dir" install-llvm-min-tblgen
			# ninja -C "$output_dir" install-llvm-tblgen
			ninja -C "$output_dir" install-clang-tblgen
			ninja -C "$output_dir" install

			[ -f "$DESTDIR/$INSTALL_PREFIX/bin/llvm-config" ] || {
				// as_own "$DESTDIR" \
				rsync -aq "$OUTPUT_DIR/bin/llvm-config" "$DESTDIR/$INSTALL_PREFIX/" && // as_own "$DESTDIR" sync
			}
			[ -f "$DESTDIR/$INSTALL_PREFIX/bin/llvm-tblgen" ] || {
				// as_own "$DESTDIR" \
				rsync -aq "$OUTPUT_DIR/bin/llvm-tblgen" "$DESTDIR/$INSTALL_PREFIX/" && // as_own "$DESTDIR" sync
			}
			[ -f "$DESTDIR/$INSTALL_PREFIX/bin/clang-tblgen" ] || {
				// as_own "$DESTDIR" \
				rsync -aq "$OUTPUT_DIR/bin/clang-tblgen" "$DESTDIR/$INSTALL_PREFIX/" && // as_own "$DESTDIR" sync
			}

			export LLVM_TABLEGEN="$DESTDIR/$INSTALL_PREFIX/bin/llvm-tblgen"
			export CLANG_TABLEGEN="$DESTDIR/$INSTALL_PREFIX/bin/clang-tblgen"
			[ ! -d "$OUTPUT_DIR/NATIVE/lib" ] ||
				{
					// as_own "$NATIVE_DIR" \
					rsync -aqz "$OUTPUT_DIR/NATIVE/lib/." "$NATIVE_DIR/$INSTALL_PREFIX/lib/" && // as_own "$NATIVE_DIR" sync; }
			[ ! -d "$OUTPUT_DIR/NATIVE/bin" ] ||
				{
					// as_own "$NATIVE_DIR" \
					rsync -aqz "$OUTPUT_DIR/NATIVE/bin/." "$LLVM_NATIVE_TOOL_DIR/" && // as_own "$NATIVE_DIR" sync; }
		} || {
			# path_prepend LD_LIBRARY_PATH "$ld_library_path_previous"
			export LLVM_TABLEGEN="$llvm_tblgen_previous"
			export CLANG_TABLEGEN="$clang_tblgen_previous"
		}

		config_site

		cd "$provious_dir"
	}

	compiler_rt_out_tree() {
		_level_2
		// log  'cmake' "clear cache"
		clean_objects "compiler-rt"
		// cue 'compiler_rt' "configuration and generation"

		# local rpath_version="$version_xhost"
		# [ ! -z "${TOOLCHAIN_PREFIX##*"$DESTDIR"*}" ] ||
		local rpath_version="$version_target"

		# [ -d "$OUTPUT_DIR/compiler-rt" ] || \mkdir -p "$OUTPUT_DIR/compiler-rt"
		# Building compiler-rt in GCC always results in segmentation fault.
		# Use clang for now.
		cmake -G Ninja \
			-B "$OUTPUT_DIR" \
			-S "$MAKE_DIR/compiler-rt" \
			-C $runtimes_cmake \
			-C $builtins_cmake \
			-D CMAKE_C_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang \
			-D CMAKE_ASM_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang \
			-D CMAKE_CXX_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang++ \
			-D CMAKE_CPP_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/cpp \
			-D CMAKE_INSTALL_PREFIX=/$INSTALL_PREFIX \
			-D CMAKE_INSTALL_RPATH=XORIGIN/../lib/llvm/$version_target \
			-D CMAKE_INSTALL_NAME_DIR:STRING=/$INSTALL_PREFIX/lib \
			-D CMAKE_BUILD_WITH_INSTALL_RPATH=ON \
			-D CMAKE_MODULE_PATH="${CMAKE_MODULE_PATH};$MAKE_DIR/compiler-rt/cmake/Modules;$MAKE_DIR/compiler-rt/cmake" \
			-D CMAKE_BUILD_TYPE=Release \
			-D COMPILER_RESOURCE_DIR:STRING="$RESOURCE_DIR" \
			-D CMAKE_TOOLCHAIN_FILE="$TOOLCHAIN_FILES" \
			-D COMPILER_RT_BUILD_XRAY=OFF \
			-D COMPILER_RT_STANDALONE_BUILD=ON \
			-D COMPILER_RT_CXX_CFLAGS=" \
-isystem $SYSROOT/$INSTALL_PREFIX/include/$LLVM_TARGET_TRIPLE/c++/v1 \
-isystem $SYSROOT/$INSTALL_PREFIX/include/c++/v1 \
" \
			-D COMPILER_RT_COMMON_CFLAGS="\
-isystem $SYSROOT/$INSTALL_PREFIX/include/tirpc \
-isystem $SYSROOT/$INSTALL_PREFIX/include" \
			-D CMAKE_CXX_FLAGS="\
-isystem $SYSROOT/$INSTALL_PREFIX/include/$LLVM_TARGET_TRIPLE/c++/v1 \
-isystem $SYSROOT/$INSTALL_PREFIX/include/c++/v1 \
`# -isystem $OUTPUT_DIR/lib/clang/$VERSION_SYSTEM/include` \
-isystem $RESOURCE_DIR/include \
-isystem $SYSROOT/$INSTALL_PREFIX/include/tirpc \
-isystem $SYSROOT/$INSTALL_PREFIX/include \
$cxxflags" \
			-D CMAKE_C_FLAGS="\
-isystem $RESOURCE_DIR/include \
-isystem $SYSROOT/$INSTALL_PREFIX/include \
$cflags" \
			-D CMAKE_SYSTEM_NAME:STRING=$($KISS_ROOT/usr/bin/uname) \
			-D CMAKE_C_COMPILER_TARGET="$LLVM_TARGET_TRIPLE" \
			-D LLVM_TARGET_TRIPLE="$LLVM_TARGET_TRIPLE" \
			-D COMPILER_RT_DEFAULT_TARGET_TRIPLE="$LLVM_TARGET_TRIPLE" \
			-D CMAKE_CXX_STANDARD="$LLVM_REQUIRED_CXX_STANDARD" \
			-D LLVM_TARGETS_TO_BUILD:STRING="host;AMDGPU" \
			-D COMPILER_RT_EXCLUDE_ATOMIC_BUILTIN=ON \
			-D COMPILER_RT_BUILD_STANDALONE_LIBATOMIC=OFF \
			-D CMAKE_POSITION_INDEPENDENT_CODE=ON \
			-D LLVM_ENABLE_BACKTRACES=ON \
			-D COMPILER_RT_HAS_LIBEXECINFO=ON \
			-D LLVM_USE_HOST_TOOLS=ON \
			-D COMPILER_RT_BUILD_SANITIZERS:BOOL=ON \
			-D KISS_ROOT=$KISS_ROOT \
			-D LIBCXXABI_ENABLE_STATIC_UNWINDER=OFF \
			-D LIBCXX_ENABLE_STATIC_ABI_LIBRARY=ON \
			-D LIBUNWIND_USE_COMPILER_RT=ON \
			-D LIBUNWIND_ENABLE_STATIC=ON \
			-D LIBUNWIND_ENABLE_SHARED=ON \
			-D CXX_SUPPORTS_FNO_EXCEPTIONS_FLAG:INTERNAL=1 \
			-D CXX_SUPPORTS_FUNWIND_TABLES_FLAG:INTERNAL=1 \
			-D LIBUNWIND_INSTALL_LIBRARY=ON \
			-D LIBUNWIND_INSTALL_SHARED_LIBRARY=ON \
			-D LIBUNWIND_INSTALL_STATIC_LIBRARY=ON \
			-D LIBCXXABI_LIBCXX_INCLUDES=libcxx/include \
			-D LIBCXXABI_USE_LLVM_UNWINDER=ON \
			-D LIBCXXABI_USE_COMPILER_RT=ON \
			-D LIBCXXABI_ENABLE_THREADS=ON \
			-D LIBCXXABI_HERMETIC_STATIC_LIBRARY=ON \
			-D LIBCXXABI_INSTALL_LIBRARY=ON \
			-D LIBCXXABI_ENABLE_EXCEPTIONS=ON \
			-D LIBCXXABI_ENABLE_STATIC=ON \
			-D LIBCXX_ENABLE_STATIC=ON \
			-D LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default=ON \
			-D LLVM_ENABLE_PER_TARGET_RUNTIME_DIR=ON \
			-D COMPILER_RT_LIBCXX_PATH="$MAKE_DIR/libcxx" \
			-D COMPILER_RT_LIBCXXABI_PATH="$MAKE_DIR/libcxxabi" \
			-D OS_NAME="$($KISS_ROOT/usr/bin/uname)" \
			-D CMAKE_SYSTEM_NAME=$($KISS_ROOT/usr/bin/uname) \
			-D LD_LIBRARY_PATH="\
$TOOLCHAIN_PREFIX/lib/$LLVM_TARGET_TRIPLE:\
$TOOLCHAIN_PREFIX/lib" \
			-D COMPILER_RT_USE_LLVM_UNWINDER:BOOL=ON \
			-D BUILD_SHARED_LIBS:BOOL=ON \
			-D LLVM_BUILD_LLVM_DYLIB=OFF \
			-D LLVM_LINK_LLVM_DYLIB=OFF \
			-D COMPILER_RT_USE_BUILTINS_LIBRARY=ON \
			-D COMPILER_RT_BUILD_GWP_ASAN=ON \
			-W no-dev > /dev/null

			# -D COMPILER_RT_HAS_GWP_ASAN=ON \
#           -D LD_LIBRARY_PATH="\
# $OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE:\
# $OUTPUT_DIR/lib:\
# $DESTDIR/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE:\
# $DESTDIR/$INSTALL_PREFIX/lib" \
			# -D CMAKE_TOOLCHAIN_FILE="$color_config" \
#           -D CMAKE_CXX_FLAGS="\
# -isystem $KISS_ROOT/$INSTALL_PREFIX/include/tirpc \
# -isystem $KISS_ROOT/$INSTALL_PREFIX/include/c++/v1 \
# -isystem $KISS_ROOT/$INSTALL_PREFIX/include" \
			# -D CMAKE_CROSSCOMPILING=ON \
			# -D CMAKE_INSTALL_NAME_DIR:STRING=/$INSTALL_PREFIX/lib/llvm/$version_target \
			# -D LLVM_CCACHE_BUILD=ON \
			# -D CMAKE_C_COMPILER=clang \
			# -D CMAKE_CXX_COMPILER=clang++ \
			# -D LLVM_REQUIRED_CXX_STANDARD="$LLVM_REQUIRED_CXX_STANDARD" \
			# -D COMPILER_RT_EXCLUDE_ATOMIC_BUILTIN=OFF \
			# -D _LIBCPP_PROVIDES_DEFAULT_RUNE_TABLE:INTERNAL=1 \

			mkdir -p "$OUTPUT_DIR/libcxx/src/CMakeFiles/cxx_static.dir"

		// cue 'compiler-rt' "construction"
		cmake --build   "$OUTPUT_DIR" -j $jobs > /dev/null || kill 0
		ninja -j $jobs -C "$OUTPUT_DIR" all > /dev/null
		// cue 'compiler-rt' "installation"
		cmake --install "$OUTPUT_DIR" > /dev/null || kill 0
		ninja -C "$OUTPUT_DIR" install

		[ ! -d "$OUTPUT_DIR/NATIVE/lib" ] ||
			{
				// as_own "$NATIVE_DIR" \
				rsync -aqz "$OUTPUT_DIR/NATIVE/lib/." "$NATIVE_DIR/$INSTALL_PREFIX/lib/" && // as_own "$NATIVE_DIR" sync; }
		[ ! -d "$OUTPUT_DIR/NATIVE/bin" ] ||
			{
				// as_own "$NATIVE_DIR" \
				rsync -aqz "$OUTPUT_DIR/NATIVE/bin/." "$LLVM_NATIVE_TOOL_DIR/" && // as_own "$NATIVE_DIR" sync; }

		local source_path_out="$OUTPUT_DIR/lib/clang/$version_target/lib/$LLVM_TARGET_TRIPLE"
		local builtins_dest_dir="$DESTDIR/$INSTALL_PREFIX/lib/clang/$version_target/lib/$LLVM_TARGET_TRIPLE"
		[ -d "$builtins_dest_dir" ] ||
			// as_own "$DESTDIR" \
			\mkdir -p "$builtins_dest_dir"
		# ! empty "$builtins_dest_dir" ||
		builtins_valid "$builtins_dest_dir" "$source_path_out" ||
			{
				// as_own "$DESTDIR" \
				rsync -aqz "$OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE/." \
				"$builtins_dest_dir/" && // as_own "$DESTDIR" sync
			}

		local previous_dir="$PWD"
		local dest_dir_old="$DESTDIR/$INSTALL_PREFIX/lib/clang/$version_target_major/lib/$LLVM_TARGET_TRIPLE"
		[ -d "$dest_dir_old" ] ||
				// as_own "$DESTDIR" \
			\mkdir -p "$dest_dir_old"
		! empty "$dest_dir_old" || {
			cd "$dest_dir_old"
			for item in $(\ls -1 "../../../$version_target/lib/$LLVM_TARGET_TRIPLE"); do
				ln -sf "../../../$version_target/lib/$LLVM_TARGET_TRIPLE/$item" ./
			done
			# rsync -aqz "$OUTPUT_DIR/compiler-rt/lib/$LLVM_TARGET_TRIPLE/." \
			# "$dest_dir_old/"
		}

		# [ -d "$DESTDIR/$INSTALL_PREFIX/lib/linux" ] || {
		#   \mkdir -p "$DESTDIR/$INSTALL_PREFIX/lib/linux"
		#   rsync -aqz "$OUTPUT_DIR/compiler-rt/lib/$LLVM_TARGET_TRIPLE/." \
		#       "$DESTDIR/$INSTALL_PREFIX/lib/linux/"
		# }
		# rsync -aqz "$DESTDIR/$INSTALL_PREFIX/lib/linux" "$builtins_dest_dir/"

		# builtins_dest_dir="$DESTDIR/$INSTALL_PREFIX/lib/clang/$version_target/lib/$LLVM_TARGET_TRIPLE"
		# [ -d "$builtins_dest_dir" ] || \mkdir -p "$builtins_dest_dir"
		# rsync -aqz "$DESTDIR/$INSTALL_PREFIX/lib/linux" "$builtins_dest_dir/" && sync

		builtins_mock_all "$libname" "$builtins_dest_dir"
		# builtin_mock "$libname" "$builtins_dest_dir/libclang_rt.builtins.a"
		# builtin_mock "$libname" "$builtins_dest_dir/clang_rt.crtbegin.o"
		# builtin_mock "$libname" "$builtins_dest_dir/clang_rt.crtend.o"

		cd "$previous_dir"
	}

	bootstrap_libunwind_in_tree() {
		_level_2

		local output_dir="$OUTPUT_DIR"
		[ -d "$output_dir" ] || \mkdir -p "$output_dir"

		// log  'cmake' "clear cache"
		# clean_objects "libunwind"
		find "$output_dir" -mindepth 1 -delete
		// cue 'libunwind' "bootstrap configuration and generation"
		local provious_dir="$PWD"

		export CCACHE_DISABLE=
		export CCACHE_RECACHE=

		cd "$MAKE_DIR/libunwind"
		modules_prepare

		# local rpath_version="$version_xhost"
		# [ ! -z "${TOOLCHAIN_PREFIX##*"$DESTDIR"*}" ] ||
		local rpath_version="$version_target"

		cmake -G Ninja \
			-B "$output_dir" \
			-S "$MAKE_DIR/llvm" \
			-D CMAKE_MODULE_PATH="$CMAKE_MODULE_PATH" \
			-D LLVM_ENABLE_PROJECTS="clang" \
			-D LLVM_ENABLE_RUNTIMES="libunwind" \
			-D CMAKE_C_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang \
			-D CMAKE_ASM_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang \
			-D CMAKE_CXX_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang++ \
			-D CMAKE_CPP_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/cpp \
			-D LLVM_CCACHE_BUILD=OFF \
			-D CMAKE_C_COMPILER_LAUNCHER="" \
			-D CMAKE_CXX_COMPILER_LAUNCHER="" \
			`# -D CMAKE_INSTALL_PREFIX=$DESTDIR/$INSTALL_PREFIX` \
			`# -D CMAKE_INSTALL_RPATH=$DESTDIR/$INSTALL_PREFIX/lib/llvm/$version_target` \
			`# -D CMAKE_INSTALL_RPATH:STRING=$DESTDIR/$INSTALL_PREFIX/lib` \
			`# -D CMAKE_INSTALL_RPATH=../lib/llvm/$version_target` \
			`# -D CMAKE_INSTALL_NAME_DIR:STRING=$DESTDIR/$INSTALL_PREFIX/lib/llvm/$version_target` \
			`# -D CMAKE_INSTALL_RPATH=../lib/clang/$version_target` \
			-D CMAKE_INSTALL_PREFIX=/$INSTALL_PREFIX \
			-D CMAKE_INSTALL_RPATH=XORIGIN/../lib/llvm/$version_target \
			-D CMAKE_INSTALL_NAME_DIR:STRING=/$INSTALL_PREFIX/lib \
			-D CMAKE_BUILD_WITH_INSTALL_RPATH=ON \
			-D CMAKE_BUILD_TYPE=Release \
			-D COMPILER_RT_BUILD_XRAY=OFF \
			-D COMPILER_RT_BUILD_SANITIZERS:BOOL=ON \
			-D LIBCXX_HAS_MUSL_LIBC=ON \
			-D LIBUNWIND_HAS_GCC_LIB:BOOL=OFF \
			-D LIBUNWIND_HAS_GCC_S_LIB:BOOL=OFF \
			-D LIBUNWIND_ENABLE_EXCEPTIONS=ON \
			-D LIBUNWIND_INSTALL_LIBRARY_DIR:PATH=lib \
			-D _LIBCPP_PROVIDES_DEFAULT_RUNE_TABLE:INTERNAL=1 \
			-D COMPILER_RESOURCE_DIR:STRING="$RESOURCE_DIR" \
			-D CMAKE_TOOLCHAIN_FILE="$TOOLCHAIN_FILES" \
			-D CMAKE_C_COMPILER_TARGET="$LLVM_TARGET_TRIPLE" \
			-D LLVM_TARGETS_TO_BUILD:STRING="host;AMDGPU" \
			-D LLVM_TARGET_ARCH=$TARGET_ARCH \
			-D CMAKE_SYSTEM_NAME=$($KISS_ROOT/usr/bin/uname) \
			-D CMAKE_HOST_SYSTEM_NAME=$(/usr/bin/uname) \
			-D LIBUNWIND_HAS_NODEFAULTLIBS_FLAG=OFF \
			-D CMAKE_CXX_STANDARD="$LLVM_REQUIRED_CXX_STANDARD" \
			-D LIBUNWIND_USE_COMPILER_RT=ON \
			-D LIBUNWIND_ENABLE_STATIC=ON \
			-D LIBUNWIND_ENABLE_SHARED=ON \
			-D CXX_SUPPORTS_FNO_EXCEPTIONS_FLAG:INTERNAL=1 \
			-D CXX_SUPPORTS_FUNWIND_TABLES_FLAG:INTERNAL=1 \
			-D LLVM_LINK_LLVM_DYLIB=OFF \
			-D BUILD_SHARED_LIBS:BOOL=ON \
			-D LIBUNWIND_INSTALL_LIBRARY=ON \
			-D LIBUNWIND_INSTALL_SHARED_LIBRARY=ON \
			-D LIBUNWIND_INSTALL_STATIC_LIBRARY=ON \
			-D CMAKE_POSITION_INDEPENDENT_CODE=ON \
			-D LIBCXXABI_ENABLE_STATIC_UNWINDER=OFF \
			-D LIBCXX_ENABLE_STATIC_ABI_LIBRARY=ON \
			-D LIBUNWIND_DEFAULT_HIDE_SYMBOLS:BOOL=OFF \
			-D COMPILER_RT_USE_BUILTINS_LIBRARY=ON \
			-D CLANG_DEFAULT_CXX_STDLIB=libc++ \
			-D LIBCXXABI_USE_LLVM_UNWINDER=ON \
			-D LIBUNWIND_USES_SJLJ_EXCEPTIONS:INTERNAL=0 \
			-D LIBCXX_HARDENING_MODE:STRING=$LIBCXX_HARDENING_MODE \
			-D CROSS_TOOLCHAIN_FLAGS_LLVM_NATIVE="\
-D LLVM_DIR=$output_dir/NATIVE/lib/cmake/llvm; \
-D CMAKE_C_FLAGS=$cflags; \
-D CMAKE_CXX_FLAGS=$cxxflags; \
-D CMAKE_CPP_FLAGS=$cxxflags; \
-D LLVM_NATIVE_TOOL_DIR=$NATIVE_DIR/$INSTALL_PREFIX/bin; \
-D LLVM_TABLEGEN=$LLVM_NATIVE_TOOL_DIR/llvm-tblgen; \
-D CLANG_TABLEGEN=$LLVM_NATIVE_TOOL_DIR/clang-tblgen; \
-D LLVM_CONFIG_PATH=$LLVM_NATIVE_TOOL_DIR/llvm-config; \
-D LIBCXX_HARDENING_MODE:STRING=$LIBCXX_HARDENING_MODE; \
-D LD_LIBRARY_PATH=$NATIVE_LD_LIBRARY_PATH; \
-D CMAKE_EXE_LINKER_FLAGS:STRING=$LDFLAGS; \
-D CMAKE_MODULE_LINKER_FLAGS:STRING=$LDFLAGS; \
-D CMAKE_SHARED_LINKER_FLAGS:STRING=$LDFLAGS; \
-D CMAKE_BUILD_TYPE=Release; \
-D CLANG_VERSION=$version_target; \
-D CMAKE_SYSROOT_COMPILE=$KISS_ROOT; \
-D CMAKE_SYSROOT=$KISS_ROOT; \
-D _CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES_INIT=; \
-D LLDB_ENABLE_PYTHON:INTERNAL=0 \
" \
			-D CMAKE_C_FLAGS=" \
-U __USING_SJLJ_EXCEPTIONS__ \
-D _LIBUNWIND_TARGET_X86_64 \
-D __x86_64__ \
-isystem $RESOURCE_DIR/include \
-isystem $SYSROOT/$INSTALL_PREFIX/include \
${cflags-}" \
			-D CMAKE_CXX_FLAGS=" \
-U __USING_SJLJ_EXCEPTIONS__ \
-D _LIBUNWIND_TARGET_X86_64 \
-D __x86_64__ \
-isystem $SYSROOT/$INSTALL_PREFIX/include/$LLVM_TARGET_TRIPLE/c++/v1 \
-isystem $SYSROOT/$INSTALL_PREFIX/include/c++/v1 \
`# -isystem $output_dir/lib/clang/$VERSION_SYSTEM/include` \
-isystem $RESOURCE_DIR/include \
-isystem $SYSROOT/$INSTALL_PREFIX/include/tirpc \
-isystem $SYSROOT/$INSTALL_PREFIX/include \
${cxxflags-}" \
			-D LIBUNWIND_C_FLAGS=" \
-U __USING_SJLJ_EXCEPTIONS__ \
-D _LIBUNWIND_TARGET_X86_64 \
-D __x86_64__ \
-isystem $RESOURCE_DIR/include \
-isystem $SYSROOT/$INSTALL_PREFIX/include \
${cflags-}" \
			-D LIBUNWIND_CXX_FLAGS=" \
-U __USING_SJLJ_EXCEPTIONS__ \
-D _LIBUNWIND_TARGET_X86_64 \
-D __x86_64__ \
-isystem $SYSROOT/$INSTALL_PREFIX/include/$LLVM_TARGET_TRIPLE/c++/v1 \
-isystem $SYSROOT/$INSTALL_PREFIX/include/c++/v1 \
`# -isystem $output_dir/lib/clang/$VERSION_SYSTEM/include` \
-isystem $RESOURCE_DIR/include \
-isystem $SYSROOT/$INSTALL_PREFIX/include/tirpc \
-isystem $SYSROOT/$INSTALL_PREFIX/include \
${cxxflags-}" \
			-D LIBUNWIND_COMPILE_FLAGS=" \
-U __USING_SJLJ_EXCEPTIONS__ \
-D _LIBUNWIND_TARGET_X86_64 \
-D __x86_64__ \
-isystem $SYSROOT/$INSTALL_PREFIX/include/tirpc \
-isystem $SYSROOT/$INSTALL_PREFIX/include \
${cflags-}" \
			-D LIBUNWIND_LINK_FLAGS=" \
-resource-dir=$RESOURCE_DIR \
-L $output_dir/lib/$LLVM_TARGET_TRIPLE \
-L $RESOURCE_DIR/lib/$LLVM_TARGET_TRIPLE \
-L $RESOURCE_DIR/lib/linux \
-L $SYSROOT_LIB/$LLVM_TARGET_TRIPLE \
-L $SYSROOT_LIB \
-Wl,-rpath=XORIGIN/../lib/clang/$version_target/lib/$LLVM_TARGET_TRIPLE \
-Wl,-rpath=XORIGIN/../lib/clang/$version_target/lib/linux \
-Wl,-rpath=XORIGIN/../lib/$LLVM_TARGET_TRIPLE \
-Wl,-rpath=XORIGIN/../lib \
$ldflags_no_libunwind \
" \
			-D LIBUNWIND_ADDITIONAL_COMPILE_FLAGS=$LIBUNWIND_ADDITIONAL_COMPILE_FLAGS \
			-D LLVM_USE_HOST_TOOLS=ON \
			-D _LIBCPP_HAS_MUSL_LIBC=ON \
			-D LD_LIBRARY_PATH="\
$TOOLCHAIN_PREFIX/lib/$LLVM_TARGET_TRIPLE:\
$TOOLCHAIN_PREFIX/lib" \
			-W no-dev

#           -D LD_LIBRARY_PATH="\
# $OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE:\
# $OUTPUT_DIR/lib:\
# $DESTDIR/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE:\
# $DESTDIR/$INSTALL_PREFIX/lib" \
	# In CROSS_TOOLCHAIN_FLAGS_LLVM_NATIVE
	# -D LIBCXX_ENABLE_ASSERTIONS:BOOL=ON; \
	# -D LLVM_DISABLE_ABI_BREAKING_CHECKS_ENFORCING:INTERNAL=1; \
			# -D CMAKE_TOOLCHAIN_FILE="$color_config" \
			# -W no-dev -S "$MAKE_DIR/libunwind" > /dev/null
			#
			# -D CMAKE_CROSSCOMPILING=ON \
			# -D CMAKE_INSTALL_NAME_DIR:STRING=/$INSTALL_PREFIX/lib \
			# -C $runtimes_cmake \
			# -C $builtins_cmake \
			# -D CMAKE_C_COMPILER=$CC \
			# -D CMAKE_CXX_COMPILER=$CXX \
			# -D CLANG_DEFAULT_UNWINDLIB="libunwind" \
			# -D LIBUNWIND_ENABLE_CROSS_UNWINDING=ON \
	# _LIBUNWIND_IS_NATIVE_ONLY specific
	#       -D LIBUNWIND_COMPILE_FLAGS=" \
	# -D _LIBUNWIND_TARGET_X86_64 " \
	#       -D LIBUNWIND_ADDITIONAL_COMPILE_FLAGS=-D_LIBUNWIND_TARGET_X86_64 \
	#
			# -D LLVM_TARGET_ARCH=X86_64 \
			# -D LLVM_TARGET_ARCH=$TARGET_ARCH \
			# -D LLVM_CCACHE_BUILD=ON \
	# Use the patched clang/lib/Headers/__stddef_max_align_t.h
	# -isystem $DESTDIR/$INSTALL_PREFIX/include/c++/v1 \

		grep -Hn LIBUNWIND_ENABLE_STATIC          "$output_dir/CMakeCache.txt"
		grep -Hn LIBUNWIND_ENABLE_SHARED          "$output_dir/CMakeCache.txt"
		grep -Hn CXX_SUPPORTS_FNO_EXCEPTIONS_FLAG "$output_dir/CMakeCache.txt"
		grep -Hn CXX_SUPPORTS_FUNWIND_TABLES_FLAG "$output_dir/CMakeCache.txt"
		grep -Hn LIBUNWIND_INSTALL_LIBRARY        "$output_dir/CMakeCache.txt"
		grep -Hn LIBUNWIND_INSTALL_STATIC_LIBRARY "$output_dir/CMakeCache.txt"
		grep -Hn LIBUNWIND_INSTALL_SHARED_LIBRARY "$output_dir/CMakeCache.txt"
		grep -Hn LIBUNWIND_DEFAULT_HIDE_SYMBOLS   "$output_dir/CMakeCache.txt"
		grep -Hn LIBUNWIND_HIDE_SYMBOLS           "$output_dir/CMakeCache.txt" || :
			# -D CMAKE_C_COMPILER=clang \
			# -D CMAKE_CXX_COMPILER=clang++ \
		# fin LIBUNWIND_ENABLE_STATIC "*.txt" || :
		# fin LIBUNWIND_ENABLE_SHARED "*.txt" || :
		# fin LIBUNWIND_INSTALL_LIBRARY "*.txt" || :

		// cue 'libunwind' "bootstrap construction"
		cmake --build   "$output_dir" -j $jobs > /dev/null || kill 0
		ninja -C "$output_dir" all > /dev/null
		find "$output_dir" -type f -name "libunwind.so.*" -o -name "libunwind.a" || :
		// cue 'libunwind' "bootstrap installation"
		cmake --install "$output_dir" > /dev/null || kill 0
		ninja -C "$output_dir" install

		[ ! -d "$output_dir/usr/lib/linux" ] || {
			// as_own "$DESTDIR" \
			mkdir -p "$DESTDIR/usr/lib/clang/$version_target/lib"

			// as_own "$DESTDIR" \
			rsync -aq "$output_dir/usr/lib/linux" "$DESTDIR/usr/lib/clang/$version_target/lib/" && // as_own "$DESTDIR" sync
		}

		// check_libunwind $(find "$output_dir" -type f -name "libunwind.so.*") ||
			// die 'libunwind' "is invalid"

		local runtimes_dest="$DESTDIR/$INSTALL_PREFIX/lib/$LLVM_DEFAULT_TARGET_TRIPLE"
		[ -d "$runtimes_dest" ] ||
		// as_own "$DESTDIR" \mkdir -p "$runtimes_dest"

		// as_own "$DESTDIR" \
		rsync -aqz "$output_dir/lib/$LLVM_DEFAULT_TARGET_TRIPLE/." "$runtimes_dest/" && // as_own "$DESTDIR" sync

		// check_libunwind $(find "$runtimes_dest" -type f -name "libunwind.so.*") ||
			// die 'installed libunwind' "is invalid"

		unset CCACHE_DISABLE
		unset CCACHE_RECACHE

		cd "$provious_dir"
	}

	build_libunwind_individually() {
		_level_2

		local output_dir="$OUTPUT_DIR"
		[ -d "$output_dir" ] || \mkdir -p "$output_dir"

		// log  'cmake' "clear cache"
		# clean_objects "libunwind"
		find "$OUTPUT_DIR" -mindepth 1 -delete
		// cue 'libunwind' "configuration and generation"
		local provious_dir="$PWD"
		cd "$MAKE_DIR/libunwind"

		modules_prepare

		export CCACHE_DISABLE=
		export CCACHE_RECACHE=

		export LD_LIBRARY_PATH="\
$TOOLCHAIN_PREFIX/lib/$LLVM_TARGET_TRIPLE:\
$TOOLCHAIN_PREFIX/lib"
		export LIBRARY_PATH="\
$TOOLCHAIN_PREFIX/lib/$LLVM_TARGET_TRIPLE:\
$TOOLCHAIN_PREFIX/lib"
		# export PATH=/usr/bin
		set > /tmp/unwind.txt
		local output_dir="$OUTPUT_DIR"
		[ -d "$output_dir" ] || \mkdir -p "$output_dir"

		# local rpath_version="$version_xhost"
		# [ ! -z "${TOOLCHAIN_PREFIX##*"$DESTDIR"*}" ] ||
		local rpath_version="$version_target"

		cmake -G Ninja \
			-B "$output_dir" \
			-S "$MAKE_DIR/libunwind" \
			-D CMAKE_C_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang \
			-D CMAKE_MODULE_PATH="$CMAKE_MODULE_PATH" \
			-D CMAKE_ASM_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang \
			-D CMAKE_CXX_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang++ \
			-D CMAKE_CPP_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/cpp \
			-D LLVM_CCACHE_BUILD=OFF \
			-D CMAKE_C_COMPILER_LAUNCHER="" \
			-D CMAKE_CXX_COMPILER_LAUNCHER="" \
			`# -D CMAKE_INSTALL_PREFIX=$DESTDIR/$INSTALL_PREFIX` \
			`# -D CMAKE_INSTALL_RPATH=$DESTDIR/$INSTALL_PREFIX/lib/llvm/$version_target` \
			`# -D CMAKE_INSTALL_RPATH:STRING=$DESTDIR/$INSTALL_PREFIX/lib` \
			`# -D CMAKE_INSTALL_RPATH=../lib/llvm/$version_target` \
			`# -D CMAKE_INSTALL_NAME_DIR:STRING=$DESTDIR/$INSTALL_PREFIX/lib/llvm/$version_target` \
			`# -D CMAKE_INSTALL_RPATH=../lib/clang/$version_target` \
			-D CMAKE_INSTALL_PREFIX=/$INSTALL_PREFIX \
			-D CMAKE_INSTALL_RPATH=XORIGIN/../lib/llvm/$version_target \
			-D CMAKE_INSTALL_NAME_DIR:STRING=/$INSTALL_PREFIX/lib \
			-D CMAKE_BUILD_WITH_INSTALL_RPATH=ON \
			-D CMAKE_BUILD_TYPE=Release \
			-D COMPILER_RT_BUILD_XRAY=OFF \
			-D COMPILER_RT_BUILD_SANITIZERS:BOOL=ON \
			-D LIBCXX_HAS_MUSL_LIBC=ON \
			-D LIBUNWIND_HAS_GCC_LIB:BOOL=OFF \
			-D LIBUNWIND_HAS_GCC_S_LIB:BOOL=OFF \
			-D LIBUNWIND_ENABLE_EXCEPTIONS=ON \
			-D LIBUNWIND_INSTALL_LIBRARY_DIR:PATH=lib \
			-D _LIBCPP_PROVIDES_DEFAULT_RUNE_TABLE:INTERNAL=1 \
			-D COMPILER_RESOURCE_DIR:STRING="$RESOURCE_DIR" \
			-D CMAKE_TOOLCHAIN_FILE="$TOOLCHAIN_FILES" \
			-D CMAKE_C_COMPILER_TARGET="$LLVM_TARGET_TRIPLE" \
			-D LLVM_TARGETS_TO_BUILD:STRING="host;AMDGPU" \
			-D LLVM_TARGET_ARCH=$TARGET_ARCH \
			-D CMAKE_SYSTEM_NAME=$($KISS_ROOT/usr/bin/uname) \
			-D CMAKE_HOST_SYSTEM_NAME=$(/usr/bin/uname) \
			-D LIBUNWIND_HAS_NODEFAULTLIBS_FLAG=OFF \
			-D CMAKE_CXX_STANDARD="$LLVM_REQUIRED_CXX_STANDARD" \
			-D LIBUNWIND_USE_COMPILER_RT=ON \
			-D LIBUNWIND_ENABLE_STATIC=ON \
			-D LIBUNWIND_ENABLE_SHARED=ON \
			-D CXX_SUPPORTS_FNO_EXCEPTIONS_FLAG:INTERNAL=1 \
			-D CXX_SUPPORTS_FUNWIND_TABLES_FLAG:INTERNAL=1 \
			-D LLVM_LINK_LLVM_DYLIB=OFF \
			-D BUILD_SHARED_LIBS:BOOL=ON \
			-D LIBUNWIND_INSTALL_LIBRARY=ON \
			-D LIBUNWIND_INSTALL_SHARED_LIBRARY=ON \
			-D LIBUNWIND_INSTALL_STATIC_LIBRARY=ON \
			-D CMAKE_POSITION_INDEPENDENT_CODE=ON \
			-D LIBCXXABI_ENABLE_STATIC_UNWINDER=OFF \
			-D LIBCXX_ENABLE_STATIC_ABI_LIBRARY=ON \
			-D LIBUNWIND_DEFAULT_HIDE_SYMBOLS:BOOL=OFF \
			-D COMPILER_RT_USE_BUILTINS_LIBRARY=ON \
			-D CLANG_DEFAULT_CXX_STDLIB=libc++ \
			-D LIBCXXABI_USE_LLVM_UNWINDER=ON \
			-D LIBUNWIND_USES_SJLJ_EXCEPTIONS:INTERNAL=0 \
			-D CMAKE_C_FLAGS=" \
-U __USING_SJLJ_EXCEPTIONS__ \
-D _LIBUNWIND_TARGET_X86_64 \
-D __x86_64__ \
-isystem $RESOURCE_DIR/include \
-isystem $SYSROOT/$INSTALL_PREFIX/include \
${cflags-}" \
			-D CMAKE_CXX_FLAGS=" \
-U __USING_SJLJ_EXCEPTIONS__ \
-D _LIBUNWIND_TARGET_X86_64 \
-D __x86_64__ \
-isystem $SYSROOT/$INSTALL_PREFIX/include/$LLVM_TARGET_TRIPLE/c++/v1 \
-isystem $SYSROOT/$INSTALL_PREFIX/include/c++/v1 \
`# -isystem $OUTPUT_DIR/lib/clang/$VERSION_SYSTEM/include` \
-isystem $RESOURCE_DIR/include \
-isystem $SYSROOT/$INSTALL_PREFIX/include/tirpc \
-isystem $SYSROOT/$INSTALL_PREFIX/include \
${cxxflags-}" \
			-D LIBUNWIND_C_FLAGS=" \
-U __USING_SJLJ_EXCEPTIONS__ \
-D _LIBUNWIND_TARGET_X86_64 \
-D __x86_64__ \
-isystem $RESOURCE_DIR/include \
-isystem $SYSROOT/$INSTALL_PREFIX/include \
${cflags-}" \
			-D LIBUNWIND_CXX_FLAGS=" \
-U __USING_SJLJ_EXCEPTIONS__ \
-D _LIBUNWIND_TARGET_X86_64 \
-D __x86_64__ \
-isystem $SYSROOT/$INSTALL_PREFIX/include/$LLVM_TARGET_TRIPLE/c++/v1 \
-isystem $SYSROOT/$INSTALL_PREFIX/include/c++/v1 \
`# -isystem $OUTPUT_DIR/lib/clang/$VERSION_SYSTEM/include` \
-isystem $RESOURCE_DIR/include \
-isystem $SYSROOT/$INSTALL_PREFIX/include/tirpc \
-isystem $SYSROOT/$INSTALL_PREFIX/include \
${cxxflags-}" \
			-D LIBUNWIND_COMPILE_FLAGS=" \
-U __USING_SJLJ_EXCEPTIONS__ \
-D _LIBUNWIND_TARGET_X86_64 \
-D __x86_64__ \
-isystem $SYSROOT/$INSTALL_PREFIX/include/tirpc \
-isystem $SYSROOT/$INSTALL_PREFIX/include \
${cflags-}" \
			-D LIBUNWIND_LINK_FLAGS=" \
-resource-dir=$RESOURCE_DIR \
-L $OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE \
-L $RESOURCE_DIR/lib/$LLVM_TARGET_TRIPLE \
-L $RESOURCE_DIR/lib/linux \
-L $SYSROOT_LIB/$LLVM_TARGET_TRIPLE \
-L $SYSROOT_LIB \
-Wl,-rpath=XORIGIN/../lib/clang/$version_target/lib/$LLVM_TARGET_TRIPLE \
-Wl,-rpath=XORIGIN/../lib/clang/$version_target/lib/linux \
-Wl,-rpath=XORIGIN/../lib/$LLVM_TARGET_TRIPLE \
-Wl,-rpath=XORIGIN/../lib \
$ldflags_no_libunwind \
" \
			-D LIBUNWIND_ADDITIONAL_COMPILE_FLAGS=$LIBUNWIND_ADDITIONAL_COMPILE_FLAGS \
			-D LLVM_USE_HOST_TOOLS=ON \
			-D _LIBCPP_HAS_MUSL_LIBC=ON \
			-D LD_LIBRARY_PATH="\
$TOOLCHAIN_PREFIX/lib/$LLVM_TARGET_TRIPLE:\
$TOOLCHAIN_PREFIX/lib" \
			-W no-dev

			# -D CMAKE_INSTALL_RPATH=XORIGIN/../lib/llvm/$rpath_version \
#           -D LD_LIBRARY_PATH="\
# $OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE:\
# $OUTPUT_DIR/lib:\
# $DESTDIR/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE:\
# $DESTDIR/$INSTALL_PREFIX/lib" \
			# -D CMAKE_TOOLCHAIN_FILE="$color_config" \
			# -W no-dev -S "$MAKE_DIR/libunwind" > /dev/null
			#
			# -D CMAKE_CROSSCOMPILING=ON \
			# -D CMAKE_INSTALL_NAME_DIR:STRING=/$INSTALL_PREFIX/lib \
			# -C $runtimes_cmake \
			# -C $builtins_cmake \
			# -D CMAKE_C_COMPILER=$CC \
			# -D CMAKE_CXX_COMPILER=$CXX \
			# -D CLANG_DEFAULT_UNWINDLIB="libunwind" \
			# -D LIBUNWIND_ENABLE_CROSS_UNWINDING=ON \
	# _LIBUNWIND_IS_NATIVE_ONLY specific
	#       -D LIBUNWIND_COMPILE_FLAGS=" \
	# -D _LIBUNWIND_TARGET_X86_64 " \
	#       -D LIBUNWIND_ADDITIONAL_COMPILE_FLAGS=-D_LIBUNWIND_TARGET_X86_64 \
	#
			# -D LLVM_TARGET_ARCH=X86_64 \
			# -D LLVM_TARGET_ARCH=$TARGET_ARCH \
			# -D LLVM_CCACHE_BUILD=ON \
	# Use the patched clang/lib/Headers/__stddef_max_align_t.h
	# -isystem $DESTDIR/$INSTALL_PREFIX/include/c++/v1 \

		grep -Hn LIBUNWIND_ENABLE_STATIC          "$output_dir/CMakeCache.txt"
		grep -Hn LIBUNWIND_ENABLE_SHARED          "$output_dir/CMakeCache.txt"
		grep -Hn CXX_SUPPORTS_FNO_EXCEPTIONS_FLAG "$output_dir/CMakeCache.txt"
		grep -Hn CXX_SUPPORTS_FUNWIND_TABLES_FLAG "$output_dir/CMakeCache.txt"
		grep -Hn LIBUNWIND_INSTALL_LIBRARY        "$output_dir/CMakeCache.txt"
		grep -Hn LIBUNWIND_INSTALL_STATIC_LIBRARY "$output_dir/CMakeCache.txt"
		grep -Hn LIBUNWIND_INSTALL_SHARED_LIBRARY "$output_dir/CMakeCache.txt"
		grep -Hn LIBUNWIND_DEFAULT_HIDE_SYMBOLS   "$output_dir/CMakeCache.txt"
		grep -Hn LIBUNWIND_HIDE_SYMBOLS           "$output_dir/CMakeCache.txt"
			# -D CMAKE_C_COMPILER=clang \
			# -D CMAKE_CXX_COMPILER=clang++ \
		# fin LIBUNWIND_ENABLE_STATIC "*.txt" || :
		# fin LIBUNWIND_ENABLE_SHARED "*.txt" || :
		# fin LIBUNWIND_INSTALL_LIBRARY "*.txt" || :

		// cue 'libunwind' "construction"
		# cmake --build "$output_dir" -j $jobs > /dev/null || {
		# LD_LIBRARY_PATH= PATH=/usr/bin ninja -j $jobs -C "$output_dir" all > /dev/null || {
		env \
		LD_LIBRARY_PATH= PATH=/usr/bin ninja -C "$output_dir" all > /dev/null || {
			// log '$LD_LIBRARY_PATH' "$LD_LIBRARY_PATH"
			env LD_LIBRARY_PATH= PATH=/usr/bin ninja -C "$output_dir" rebuild_cache
			env LD_LIBRARY_PATH= PATH=/usr/bin ninja -C "$output_dir" unwind_shared_objects
			env LD_LIBRARY_PATH= PATH=/usr/bin ninja -C "$output_dir" unwind_shared
			env LD_LIBRARY_PATH= PATH=/usr/bin ninja -C "$output_dir" libunwind.so
			env LD_LIBRARY_PATH= PATH=/usr/bin ninja -C "$output_dir" all
		} || kill 0
		find "$OUTPUT_DIR" -type f -name "libunwind.so.*" -o -name "libunwind.a" || :
		// cue 'libunwind' "installation"
		cmake --install "$output_dir" > /dev/null || kill 0

		[ ! -d "$OUTPUT_DIR/usr/lib/linux" ] || {
			// as_own "$DESTDIR" \
			mkdir -p "$DESTDIR/usr/lib/clang/$version_target/lib"

			// as_own "$DESTDIR" \
			rsync -aq "$OUTPUT_DIR/usr/lib/linux" "$DESTDIR/usr/lib/clang/$version_target/lib/" && // as_own "$DESTDIR" sync
		}

		// check_libunwind $(find "$output_dir" -type f -name "libunwind.so.*") ||
			// die 'libunwind' "is invalid"

		local runtimes_dest="$DESTDIR/$INSTALL_PREFIX/lib/$LLVM_DEFAULT_TARGET_TRIPLE"
		[ -d "$runtimes_dest" ] ||
		// as_own "$DESTDIR" \mkdir -p "$runtimes_dest"

		// as_own "$DESTDIR" \
		rsync -aqz "$output_dir/lib/$LLVM_DEFAULT_TARGET_TRIPLE/." "$runtimes_dest/" && // as_own "$DESTDIR" sync

		// check_libunwind $(find "$runtimes_dest" -type f -name "libunwind.so.*") ||
			// die 'installed libunwind' "is invalid"

		unset CCACHE_DISABLE
		unset CCACHE_RECACHE

		cd "$provious_dir"
	}

	# Explicit depends on \$ENV{DESTDIR}
	# Just an empty c file
	# So, it needs compiler-rt and runtimes all built correctly
	build_llvm_libgcc_individually() {
		_level_2
		// log  'cmake' "clear cache"
		clean_objects "llvm-libgcc"
		// cue 'llvm-libgcc' "individual configuration and generation"

		# local rpath_version="$version_xhost"
		# [ ! -z "${TOOLCHAIN_PREFIX##*"$DESTDIR"*}" ] ||
		local rpath_version="$version_target"
		local linker_flags=" \
-resource-dir=$RESOURCE_DIR \
-L $OUTPUT_DIR/lib/clang/$VERSION_SYSTEM/lib/$LLVM_TARGET_TRIPLE \
-L $OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE \
-L $SYSROOT_LIB/$LLVM_TARGET_TRIPLE \
-L $RESOURCE_DIR/lib/$LLVM_TARGET_TRIPLE \
-L $RESOURCE_DIR/lib/linux \
-L $SYSROOT_LIB \
-Wl,-rpath=XORIGIN/../lib/clang/$version_target/lib/$LLVM_TARGET_TRIPLE \
-Wl,-rpath=XORIGIN/../lib/clang/$version_target/lib/linux \
-Wl,-rpath=XORIGIN/../lib/$LLVM_TARGET_TRIPLE \
-Wl,-rpath=XORIGIN/../lib \
$ldflags \
"

		# [ -d "$OUTPUT_DIR/llvm-libgcc" ] || \mkdir -p "$OUTPUT_DIR/llvm-libgcc"
		cmake -G Ninja \
			-B "$OUTPUT_DIR" \
			-S "$MAKE_DIR/llvm-libgcc" \
			-D CMAKE_C_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang \
			-D CMAKE_ASM_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang \
			-D CMAKE_CXX_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang++ \
			-D CMAKE_CPP_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/cpp \
			-C $runtimes_cmake \
			-C $builtins_cmake \
			-D CMAKE_INSTALL_PREFIX=/$INSTALL_PREFIX \
			-D CMAKE_INSTALL_RPATH=XORIGIN/../lib/llvm/$version_target \
			-D CMAKE_INSTALL_NAME_DIR:STRING=/$INSTALL_PREFIX/lib \
			-D CMAKE_BUILD_WITH_INSTALL_RPATH=ON \
			-D CMAKE_BUILD_TYPE=Release \
			-D CMAKE_TOOLCHAIN_FILE="$TOOLCHAIN_FILES" \
			-D CMAKE_C_COMPILER_TARGET="$LLVM_TARGET_TRIPLE" \
			-D LLVM_TARGET_TRIPLE="$LLVM_TARGET_TRIPLE" \
			-D COMPILER_RESOURCE_DIR:STRING="$RESOURCE_DIR" \
			-D LLVM_LIBGCC_EXPLICIT_OPT_IN=Yes \
			-D LLVM_TARGETS_TO_BUILD="host;AMDGPU" \
			-D CMAKE_CXX_STANDARD="$LLVM_REQUIRED_CXX_STANDARD" \
			-D LIBUNWIND_USE_COMPILER_RT=ON \
			-D LIBUNWIND_ENABLE_STATIC=ON \
			-D LIBUNWIND_ENABLE_SHARED=ON \
			-D CXX_SUPPORTS_FNO_EXCEPTIONS_FLAG:INTERNAL=1 \
			-D CXX_SUPPORTS_FUNWIND_TABLES_FLAG:INTERNAL=1 \
			-D LIBUNWIND_INSTALL_LIBRARY=ON \
			-D LIBUNWIND_INSTALL_SHARED_LIBRARY=ON \
			-D LIBUNWIND_INSTALL_STATIC_LIBRARY=ON \
			-D LIBCXXABI_LIBCXX_INCLUDES=libcxx/include \
			-D LIBCXXABI_USE_LLVM_UNWINDER=ON \
			-D LIBCXXABI_USE_COMPILER_RT=ON \
			-D LIBCXXABI_ENABLE_STATIC_UNWINDER=OFF \
			-D LIBCXXABI_ENABLE_THREADS=ON \
			-D LIBCXXABI_HERMETIC_STATIC_LIBRARY=ON \
			-D LIBCXXABI_INSTALL_LIBRARY=ON \
			-D LIBCXXABI_ENABLE_EXCEPTIONS=ON \
			-D LIBCXXABI_ENABLE_STATIC=ON \
			-D CMAKE_POSITION_INDEPENDENT_CODE=ON \
			-D CMAKE_MODULE_PATH="${CMAKE_MODULE_PATH};$MAKE_DIR/llvm/cmake/modules" \
			-D CMAKE_C_FLAGS="\
-isystem $RESOURCE_DIR/include \
-isystem $SYSROOT/$INSTALL_PREFIX/include \
${cflags-}" \
			-D CMAKE_CXX_FLAGS="\
-isystem $SYSROOT/$INSTALL_PREFIX/include/$LLVM_TARGET_TRIPLE/c++/v1 \
-isystem $SYSROOT/$INSTALL_PREFIX/include/c++/v1 \
`# -isystem $OUTPUT_DIR/lib/clang/$VERSION_SYSTEM/include` \
-isystem $RESOURCE_DIR/include \
-isystem $SYSROOT/$INSTALL_PREFIX/include/tirpc \
-isystem $SYSROOT/$INSTALL_PREFIX/include \
${cxxflags-}" \
			-D CMAKE_EXE_LINKER_FLAGS="$linker_flags" \
			-D CMAKE_SHARED_LINKER_FLAGS="$linker_flags" \
			-D CMAKE_MODULE_LINKER_FLAGS="$linker_flags" \
			-D LLVM_RUNTIME_TARGETS="$LLVM_TARGET_TRIPLE" \
			-D LLVM_ENABLE_RUNTIMES="llvm-libgcc" \
			-D LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default=ON \
			-D LLVM_ENABLE_PER_TARGET_RUNTIME_DIR=ON \
			-D LLVM_USE_HOST_TOOLS=ON \
			-D LD_LIBRARY_PATH="\
$TOOLCHAIN_PREFIX/lib/$LLVM_TARGET_TRIPLE:\
$TOOLCHAIN_PREFIX/lib" \
			-W no-dev > /dev/null

#           -D LD_LIBRARY_PATH="\
# $OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE:\
# $OUTPUT_DIR/lib:\
# $DESTDIR/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE:\
# $DESTDIR/$INSTALL_PREFIX/lib" \
			# -D CMAKE_TOOLCHAIN_FILE="$color_config" \
			# -D CMAKE_CROSSCOMPILING=ON \
			# -D CMAKE_INSTALL_NAME_DIR:STRING=/$INSTALL_PREFIX/lib/llvm/$version_target \
			# -D LLVM_CCACHE_BUILD=ON \
		// cue 'llvm-libgcc' "construction individually"
		cmake --build   "$OUTPUT_DIR" -j $jobs > /dev/null || kill 0
		// cue 'llvm-libgcc' "installation individually"
		cmake --install "$OUTPUT_DIR" > /dev/null || kill 0
	}

	# Just an empty c file
	bootstrap_llvm_libgcc_in_tree() {
		_level_2
		// log  'cmake' "clear cache"
		clean_objects "llvm"
		// cue 'llvm-libgcc' "bootstrap configuration and generation"

		# local rpath_version="$version_xhost"
		# [ ! -z "${TOOLCHAIN_PREFIX##*"$DESTDIR"*}" ] ||
		local rpath_version="$version_target"

		[ -d "$OUTPUT_DIR/llvm-libgcc" ] || \mkdir -p "$OUTPUT_DIR/llvm-libgcc"
		cmake -G Ninja \
			-B "$OUTPUT_DIR" \
			-S "$MAKE_DIR/llvm" \
			-D CMAKE_C_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang \
			-D CMAKE_ASM_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang \
			-D CMAKE_CXX_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang++ \
			-D CMAKE_CPP_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/cpp \
			-C $runtimes_cmake \
			-C $builtins_cmake \
			-D CMAKE_INSTALL_PREFIX=/$INSTALL_PREFIX \
			-D CMAKE_INSTALL_RPATH=XORIGIN/../lib/llvm/$version_target \
			-D CMAKE_INSTALL_NAME_DIR:STRING=/$INSTALL_PREFIX/lib \
			-D CMAKE_BUILD_WITH_INSTALL_RPATH=ON \
			-D CMAKE_BUILD_TYPE=Release \
			-D CMAKE_TOOLCHAIN_FILE="$TOOLCHAIN_FILES" \
			-D CMAKE_C_COMPILER_TARGET="$LLVM_TARGET_TRIPLE" \
			-D LLVM_TARGET_TRIPLE="$LLVM_TARGET_TRIPLE" \
			-D COMPILER_RT_DEFAULT_TARGET_ONLY=ON \
			-U COMPILER_RT_DEFAULT_TARGET_TRIPLE \
			-D COMPILER_RESOURCE_DIR:STRING="$RESOURCE_DIR" \
			-D LLVM_LIBGCC_EXPLICIT_OPT_IN=Yes \
			-D LLVM_TARGETS_TO_BUILD="host;AMDGPU" \
			-D LLVM_ENABLE_RTTI=ON \
			-D LLVM_BUILD_EXAMPLES=OFF \
			-D LLVM_BUILD_DOCS=OFF \
			-D LLVM_BUILD_TESTS=OFF \
			-D LLVM_ENABLE_TERMINFO=ON \
			-D LLVM_ENABLE_LIBXML2=OFF \
			-D LLVM_ENABLE_LIBEDIT=OFF \
			-D LLVM_INCLUDE_TESTS=ON \
			-D LLVM_INCLUDE_BENCHMARKS=OFF \
			-D LLVM_BUILD_BENCHMARKS=OFF \
			-D LLVM_BUILD_LLVM_DYLIB=OFF \
			-D LLVM_LINK_LLVM_DYLIB=OFF \
			-D LLVM_HAS_ATOMICS=ON \
			-D LLVM_HOST_TRIPLE="$(cc -dumpmachine)" \
			-D LIBCXXABI_ENABLE_STATIC_UNWINDER=OFF \
			-D CMAKE_CXX_STANDARD="$LLVM_REQUIRED_CXX_STANDARD" \
			-D CMAKE_POSITION_INDEPENDENT_CODE=ON \
			-D LLVM_RUNTIME_TARGETS="$LLVM_TARGET_TRIPLE" \
			-D LLVM_ENABLE_RUNTIMES="llvm-libgcc" \
			-D HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1 \
			-D HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1 \
			-D CMAKE_CXX_FLAGS="\
-isystem $SYSROOT/$INSTALL_PREFIX/include/$LLVM_TARGET_TRIPLE/c++/v1 \
-isystem $SYSROOT/$INSTALL_PREFIX/include/c++/v1 \
`# -isystem $OUTPUT_DIR/lib/clang/$VERSION_SYSTEM/include` \
-isystem $RESOURCE_DIR/include \
-isystem $SYSROOT/$INSTALL_PREFIX/include/tirpc \
-isystem $SYSROOT/$INSTALL_PREFIX/include \
${cxxflags-}" \
			-D CMAKE_C_FLAGS="\
-isystem $RESOURCE_DIR/include \
-isystem $SYSROOT/$INSTALL_PREFIX/include \
${cflags-}" \
			-D LLVM_USE_HOST_TOOLS=ON \
			-D LD_LIBRARY_PATH="\
$TOOLCHAIN_PREFIX/lib/$LLVM_TARGET_TRIPLE:\
$TOOLCHAIN_PREFIX/lib" \
			-W no-dev > /dev/null

#           -D LD_LIBRARY_PATH="\
# $OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE:\
# $OUTPUT_DIR/lib:\
# $DESTDIR/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE:\
# $DESTDIR/$INSTALL_PREFIX/lib" \
			# -D CMAKE_TOOLCHAIN_FILE="$color_config" \
			# -D CMAKE_CROSSCOMPILING=ON \
			# -D CMAKE_INSTALL_NAME_DIR:STRING=/$INSTALL_PREFIX/lib/llvm/$version_target \
			# -D LLVM_CCACHE_BUILD=ON \
			# -D CMAKE_CXX_FLAGS="-D _LIBCPP_PSTL_CPU_BACKEND_THREAD $CXXFLAGS" \
			# -D CMAKE_C_FLAGS="$CFLAGS" \
			#
			# -D COMPILER_RT_DEFAULT_TARGET_TRIPLE="$LLVM_TARGET_TRIPLE" \
			# -D BOOTSTRAP_COMPILER_RT_DEFAULT_TARGET_TRIPLE="$LLVM_TARGET_TRIPLE" \
			# -D RUNTIMES_x86_64-linux-musl_COMPILER_RT_DEFAULT_TARGET_TRIPLE="$LLVM_TARGET_TRIPLE" \
			# -D BUILTINS_x86_64-linux-musl_COMPILER_RT_DEFAULT_TARGET_TRIPLE="$LLVM_TARGET_TRIPLE" \
			# -D LIBCXXABI_USE_LLVM_UNWINDER=ON \
			# -D LIBCXXABI_USE_COMPILER_RT=ON \
			# -D LIBCXXABI_LIBCXX_INCLUDES=libcxx/include \
			# -D LIBCXXABI_INSTALL_LIBRARY=ON \
			# -D LIBCXXABI_HERMETIC_STATIC_LIBRARY=ON \
			# -D LIBCXXABI_ENABLE_THREADS=ON \
			# -D LIBCXXABI_ENABLE_STATIC=ON \
			# -D LIBCXXABI_ENABLE_EXCEPTIONS=ON \
			# -D CLANG_DEFAULT_LINKER="ld.lld" \
			# -D CLANG_DEFAULT_RTLIB="compiler-rt" \
			# -D CLANG_DEFAULT_UNWINDLIB="libunwind" \
			# -D LIBUNWIND_ENABLE_STATIC=ON \
			# -D LIBUNWIND_ENABLE_SHARED=ON \
			# -D LIBUNWIND_INSTALL_LIBRARY=ON \
			# -D LIBUNWIND_INSTALL_SHARED_LIBRARY=ON \
			# -D LIBUNWIND_INSTALL_STATIC_LIBRARY=ON \
			# -D LIBUNWIND_USE_COMPILER_RT=ON \
			# -D LLVM_ENABLE_PROJECTS="clang;clang-tools-extra" \
			# -D CMAKE_CXX_FLAGS="-isystem $KISS_ROOT/$INSTALL_PREFIX/include/c++/v1 -isystem $KISS_ROOT/$INSTALL_PREFIX/include ${CXXFLAGS-}" \

	#       -D CMAKE_CXX_FLAGS="-D _LIBCPP_PSTL_CPU_BACKEND_THREAD \
	# -isystem $KISS_ROOT/$INSTALL_PREFIX/include/c++/v1 \
	# -isystem $KISS_ROOT/$INSTALL_PREFIX/include \
	# " \
	#       -D CMAKE_C_FLAGS="-isystem $KISS_ROOT/$INSTALL_PREFIX/include" \
	#
		#       -D CMAKE_CXX_FLAGS="-isystem $KISS_ROOT/$INSTALL_PREFIX/include/c++/v1 \
		# -isystem $KISS_ROOT/$INSTALL_PREFIX/include" \
		#       -D CMAKE_C_FLAGS="-isystem $KISS_ROOT/$INSTALL_PREFIX/include" \

		# // cue 'runtimes' "bootstrap construction"
		# cmake --build   $OUTPUT_DIR -j $jobs > /dev/null || kill 0
		# // cue 'runtimes' "bootstrap installation"
		# cmake --install $OUTPUT_DIR > /dev/null || kill 0

		# cmake --build . --target help | grep gcc
		# llvm-libgcc-x86_64-linux-musl: phony
		# llvm-libgcc: phony
		# install-llvm-libgcc-x86_64-linux-musl-stripped: phony
		# install-llvm-libgcc-x86_64-linux-musl: phony
		# install-llvm-libgcc-stripped: phony
		# install-llvm-libgcc: phony

		// cue 'llvm-libgcc' "bootstrap construction"
		cmake --build   "$OUTPUT_DIR" -j $jobs > /dev/null || kill 0
		# ninja: unknown target 'llvm-libgcc'
		# ninja -j $jobs -C $OUTPUT_DIR llvm-libgcc-x86_64-linux-musl
		// cue 'llvm-libgcc' "bootstrap installation"
		cmake --install "$OUTPUT_DIR" > /dev/null || kill 0
		# ninja -j $jobs -C $OUTPUT_DIR install-llvm-libgcc-x86_64-linux-musl
	}

	runtimes_in_tree() {
		_level_2
		local toolchain_prefix="$1"
		local sysroot="$(// delegate -- to_sysroot "$toolchain_prefix")"
		local version_system="$(// delegate to_version "$sysroot/$INSTALL_PREFIX")"
		# local toolchain_version="$(// delegate to_version "$toolchain_prefix")"
		# local resource_dir="$(readlink -fn "$toolchain_prefix/lib/clang/$toolchain_version")"
		local resource_dir="$sysroot/$INSTALL_PREFIX/lib/clang/$version_system"
		local SYSROOT_LIB="$SYSROOT_LIB"
		# local runtimes_individual="${2-}"
		// log  'cmake' "clear cache"
		clean_objects "llvm"
		// cue 'runtimes' "bootstrap configuration and generation"

		local provious_dir="$PWD"
		local llvm_tblgen_previous="${LLVM_TABLEGEN-}"
		# export LLVM_TABLEGEN="$OUTPUT_DIR/bin/llvm-tblgen"
		local clang_tblgen_previous="${CLANG_TABLEGEN-}"
		# export CLANG_TABLEGEN="$OUTPUT_DIR/bin/clang-tblgen"

		local output_dir="$OUTPUT_DIR"
		[ -d "$output_dir" ] || \mkdir -p "$output_dir"

		// builtins_target_flags "$toolchain_prefix"
		# // builtins_target_flags "$toolchain_prefix" "$runtimes_individual"
		// runtimes_use_intermediate_flags "$toolchain_prefix"
		# // runtimes_use_intermediate_flags "$toolchain_prefix" "$runtimes_individual"
		// runtimes_use_intermediate "$toolchain_prefix"

		# local rpath_version="$version_xhost"
		# [ ! -z "${TOOLCHAIN_PREFIX##*"$DESTDIR"*}" ] ||
		local rpath_version="$version_target"

		local linker_flags=" \
-resource-dir=$resource_dir \
-L $output_dir/lib/$LLVM_TARGET_TRIPLE \
-L $SYSROOT/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE \
-L $resource_dir/lib/$LLVM_TARGET_TRIPLE \
-L $resource_dir/lib/linux \
"
		[ ! -d "$SYSROOT_LIB/$LLVM_TARGET_TRIPLE" ] ||
		[ -z "${linker_flags##*"-L $SYSROOT_LIB/$LLVM_TARGET_TRIPLE"*}" ] ||
linker_flags="$linker_flags \
-L $SYSROOT_LIB/$LLVM_TARGET_TRIPLE \
"

linker_flags="$linker_flags \
-L $SYSROOT_LIB \
-Wl,-rpath=XORIGIN/../lib/clang/$version_system/lib/$LLVM_TARGET_TRIPLE \
-Wl,-rpath=XORIGIN/../lib/clang/$version_system/lib/linux \
-Wl,-rpath=XORIGIN/../lib/$LLVM_TARGET_TRIPLE \
-Wl,-rpath=XORIGIN/../lib \
$ldflags \
"
# -lc++ \
# -lc++abi \
# -Wl,-lunwind \


		local cflags_rt="\
-U __USING_SJLJ_EXCEPTIONS__ \
-D _LIBUNWIND_TARGET_X86_64 \
-D __x86_64__ \
-D LLVM_OBJ_ROOT=$OUTPUT_DIR \
${cflags-} \
"
# -isystem $resource_dir/include \
# -isystem $TOOLCHAIN_PREFIX/include \

		local cxxflags_rt="\
-U __USING_SJLJ_EXCEPTIONS__ \
-D _LIBUNWIND_TARGET_X86_64 \
-D __x86_64__ \
-D LLVM_OBJ_ROOT=$OUTPUT_DIR \
${cxxflags-} \
"
# -isystem $TOOLCHAIN_PREFIX/include/$LLVM_TARGET_TRIPLE/c++/v1 \
# -isystem $TOOLCHAIN_PREFIX/include/c++/v1 \
# -isystem $RESOURCE_DIR/include \
# -isystem $TOOLCHAIN_PREFIX/include/tirpc \
# -isystem $TOOLCHAIN_PREFIX/include \

		cd "$MAKE_DIR/llvm"

		cmake -G Ninja \
			-C "$runtimes_cmake" \
			-C "$builtins_cmake" \
			-C "$common_cmake" \
			-B "$OUTPUT_DIR" \
			-S "$MAKE_DIR/llvm" \
			-D CMAKE_MODULE_PATH="$CMAKE_MODULE_PATH" \
			-D CMAKE_INSTALL_PREFIX=/$INSTALL_PREFIX \
			-D CMAKE_INSTALL_RPATH=XORIGIN/../lib/llvm/$version_target \
			-D CMAKE_INSTALL_NAME_DIR:STRING=/$INSTALL_PREFIX/lib \
			-D CMAKE_BUILD_WITH_INSTALL_RPATH=ON \
			-D CMAKE_BUILD_TYPE=Release \
			-D BOOTSTRAP_CMAKE_SYSTEM_NAME="$($KISS_ROOT/usr/bin/uname)" \
			-D CMAKE_SYSTEM_NAME:STRING=$($KISS_ROOT/usr/bin/uname) \
			-D CMAKE_HOST_SYSTEM_NAME=$(/usr/bin/uname) \
			-D CMAKE_C_COMPILER_TARGET="$LLVM_TARGET_TRIPLE" \
			-D CMAKE_CXX_COMPILER_TARGET="$LLVM_TARGET_TRIPLE" \
			-D CMAKE_C_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang \
			-D CMAKE_ASM_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang \
			-D CMAKE_CXX_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang++ \
			-D CMAKE_CPP_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/cpp \
			-D ENABLE_LINKER_BUILD_ID=OFF \
			-D COMPILER_RT_BUILD_SANITIZERS:BOOL=ON \
			-D LIBCXX_HAS_MUSL_LIBC=ON \
			-D BUILD_SHARED_LIBS:BOOL=ON \
			-D COMPILER_RT_BUILD_XRAY=OFF \
			-D LIBUNWIND_HAS_GCC_LIB:BOOL=OFF \
			-D LIBUNWIND_HAS_GCC_S_LIB:BOOL=OFF \
			-D LIBUNWIND_ENABLE_EXCEPTIONS=ON \
			-D LIBUNWIND_INSTALL_LIBRARY_DIR:PATH=lib \
			-D LIBUNWIND_USE_COMPILER_RT=ON \
			-D LIBUNWIND_ENABLE_STATIC=ON \
			-D LIBUNWIND_ENABLE_SHARED=ON \
			-D CXX_SUPPORTS_FNO_EXCEPTIONS_FLAG:INTERNAL=1 \
			-D CXX_SUPPORTS_FUNWIND_TABLES_FLAG:INTERNAL=1 \
			-D STATICALLY_LINK_UNWINDER_IN_STATIC_LIBRARY=OFF \
			-D STATICALLY_LINK_UNWINDER_IN_SHARED_LIBRARY=OFF \
			-D LIBUNWIND_INSTALL_LIBRARY=ON \
			-D LIBUNWIND_INSTALL_STATIC_LIBRARY=ON \
			-D LIBUNWIND_INSTALL_SHARED_LIBRARY=ON \
			-D LIBUNWIND_DEFAULT_HIDE_SYMBOLS:BOOL=OFF \
			-D _LIBCPP_PROVIDES_DEFAULT_RUNE_TABLE:INTERNAL=1 \
			-D CMAKE_TOOLCHAIN_FILE="$TOOLCHAIN_FILES" \
			-D LLVM_BUILD_LLVM_DYLIB=OFF \
			-D LLVM_LINK_LLVM_DYLIB=OFF \
			-D LLVM_TARGETS_TO_BUILD="host;AMDGPU" \
			-D LLVM_RUNTIME_TARGETS="$LLVM_TARGET_TRIPLE" \
			-D LLVM_TARGET_ARCH=$TARGET_ARCH \
			-D CMAKE_CXX_STANDARD="$LLVM_REQUIRED_CXX_STANDARD" \
			-D LLVM_ENABLE_RTTI=ON \
			-D LLVM_HOST_TRIPLE="$(cc -dumpmachine)" \
			-D LLVM_DEFAULT_TARGET_TRIPLE="$LLVM_TARGET_TRIPLE" \
			-D FFI_INCLUDE_DIR="$ffi_include_dir" \
			-D LLVM_APPEND_VC_REV=OFF \
			-D LLVM_BINUTILS_INCDIR=$toolchain_prefix/include \
			-D LLVM_ENABLE_ASSERTIONS=OFF \
			-D LLVM_ENABLE_EH=ON \
			-D LLVM_ENABLE_FFI=ON \
			-D LLVM_ENABLE_LIBCXX=ON \
			-D LLVM_ENABLE_PIC=ON \
			-D LLVM_ENABLE_SPHINX=OFF \
			-D LLVM_ENABLE_ZLIB=ON \
			-D LLVM_ENABLE_ZSTD=OFF \
			-D LLVM_INCLUDE_EXAMPLES=OFF \
			-D LLVM_INSTALL_UTILS=ON \
			-D LLVM_ENABLE_LLD=ON \
			-D CLANG_DEFAULT_LINKER="ld.lld" \
			-D LLVM_BUILD_EXAMPLES=OFF \
			-D LLVM_BUILD_DOCS=OFF \
			-D LLVM_BUILD_TESTS=OFF \
			-D LLVM_ENABLE_TERMINFO=ON \
			-D LLVM_ENABLE_LIBXML2=OFF \
			-D LLVM_ENABLE_LIBEDIT=OFF \
			-D LLVM_INCLUDE_DOCS=OFF \
			-D LLVM_INCLUDE_TESTS=ON \
			-D LLVM_INCLUDE_BENCHMARKS=OFF \
			-D LLVM_BUILD_BENCHMARKS=OFF \
			-D CMAKE_POSITION_INDEPENDENT_CODE=ON \
			-D CMAKE_C_COMPILER_WORKS=ON \
			-D CMAKE_CXX_COMPILER_WORKS=ON \
			-D CMAKE_ASM_COMPILER_WORKS=ON \
			-D LLVM_NATIVE_TARGET:STRING=$LLVM_TARGET_TRIPLE \
			-D LLVM_HAS_ATOMICS=ON \
			-D COMPILER_RT_EXCLUDE_ATOMIC_BUILTIN=ON \
			-D HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1 \
			-D HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1 \
			-D HAVE_CXX_ATOMICS_WITH_LIB:INTERNAL=0 \
			-D HAVE_CXX_LIBATOMICS64:INTERNAL=0 \
			-D HAVE_LIBATOMIC:INTERNAL=0 \
			-D LIBCXX_HAS_ATOMIC_LIB:INTERNAL=0 \
			-D _LIBCPP_ATOMIC_ONLY_USE_BUILTINS=ON \
			-D LIBCXX_HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1 \
			-D LIBCXX_HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1 \
			-D LLVM_COMPILER_IS_GCC_COMPATIBLE=OFF \
			-D LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN=ON \
			-D LIBCXXABI_ENABLE_STATIC_UNWINDER=OFF \
			-D LIBCXX_ENABLE_STATIC_ABI_LIBRARY=ON \
			-D CLANG_DEFAULT_CXX_STDLIB=libc++ \
			-D LLVM_USE_HOST_TOOLS=ON \
			-D CMAKE_CROSSCOMPILING=ON \
			-D LLVM_NATIVE_TOOL_DIR="$NATIVE_DIR/$INSTALL_PREFIX/bin" \
			-D LLVM_CONFIG_PATH=$toolchain_prefix/bin/llvm-config \
			-D _LIBCPP_HAS_MUSL_LIBC=ON \
			-D LLVM_TOOLS_DIR="${OUTPUT_DIR}/bin" \
			-D CLANG_VERSION=$version_target \
			-D CMAKE_SYSROOT_COMPILE=$KISS_ROOT \
			-D CMAKE_SYSROOT=$KISS_ROOT \
			-D _CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES_INIT= \
			-D IMPLICIT_INCLUDE_DIRECTORIES=OFF \
			-D __UNIX_PATHS_INCLUDED=ON \
			-D C_INCLUDE_PATH="$SYSROOT/$INSTALL_PREFIX/lib/clang/$version_system/include:$SYSROOT/$INSTALL_PREFIX/include" \
			-D CPLUS_INCLUDE_PATH="$SYSROOT/$INSTALL_PREFIX/include/$LLVM_DEFAULT_TARGET_TRIPLE/c++/v1/:$SYSROOT/$INSTALL_PREFIX/include/c++/v1/:$SYSROOT/$INSTALL_PREFIX/lib/clang/$version_system/include:$SYSROOT/$INSTALL_PREFIX/include" \
			-D CMAKE_C_FLAGS="$cflags_rt" \
			-D CMAKE_CXX_FLAGS="$cxxflags_rt" \
			-D LIBUNWIND_C_FLAGS="$cflags_rt" \
			-D LIBUNWIND_CXX_FLAGS="$cxxflags_rt" \
			-D LIBUNWIND_CPP_FLAGS:STRING="$cxxflags_rt" \
			-D LIBUNWIND_COMPILE_FLAGS=" \
-U __USING_SJLJ_EXCEPTIONS__ \
-D _LIBUNWIND_TARGET_X86_64 \
-D __x86_64__ \
-D LLVM_OBJ_ROOT=$OUTPUT_DIR \
-isystem $SYSROOT/$INSTALL_PREFIX/include/tirpc \
-isystem $SYSROOT/$INSTALL_PREFIX/include \
${cflags-}" \
			-D LIBUNWIND_LINK_FLAGS=" \
-resource-dir=$resource_dir \
-L $output_dir/lib/$LLVM_TARGET_TRIPLE \
-L $resource_dir/lib/$LLVM_TARGET_TRIPLE \
-L $resource_dir/lib/linux \
-L $SYSROOT_LIB/$LLVM_TARGET_TRIPLE \
-L $SYSROOT_LIB \
-Wl,-rpath=XORIGIN/../lib/clang/$version_system/lib/$LLVM_TARGET_TRIPLE \
-Wl,-rpath=XORIGIN/../lib/clang/$version_system/lib/linux \
-Wl,-rpath=XORIGIN/../lib/$LLVM_TARGET_TRIPLE \
-Wl,-rpath=XORIGIN/../lib \
$ldflags_no_libunwind \
" \
			-D LIBUNWIND_ADDITIONAL_COMPILE_FLAGS=$LIBUNWIND_ADDITIONAL_COMPILE_FLAGS \
			-D CMAKE_EXE_LINKER_FLAGS="$linker_flags" \
			-D CMAKE_SHARED_LINKER_FLAGS="$linker_flags" \
			-D CMAKE_MODULE_LINKER_FLAGS="$linker_flags" \
			-D CROSS_TOOLCHAIN_FLAGS_LLVM_NATIVE="\
-D LLVM_DIR=$output_dir/NATIVE/lib/cmake/llvm; \
-D CMAKE_C_FLAGS=-D LLVM_OBJ_ROOT=$OUTPUT_DIR/NATIVE $cflags; \
-D CMAKE_CXX_FLAGS=-D LLVM_OBJ_ROOT=$OUTPUT_DIR/NATIVE $cxxflags; \
-D CMAKE_CPP_FLAGS=-D LLVM_OBJ_ROOT=$OUTPUT_DIR/NATIVE $cxxflags; \
-D LLVM_NATIVE_TOOL_DIR=$NATIVE_DIR/$INSTALL_PREFIX/bin; \
-D LLVM_TABLEGEN=$LLVM_NATIVE_TOOL_DIR/llvm-tblgen; \
-D CLANG_TABLEGEN=$LLVM_NATIVE_TOOL_DIR/clang-tblgen; \
-D LLVM_CONFIG_PATH=$LLVM_NATIVE_TOOL_DIR/llvm-config; \
-D LIBCXX_HARDENING_MODE:STRING=$LIBCXX_HARDENING_MODE; \
-D LD_LIBRARY_PATH=$NATIVE_LD_LIBRARY_PATH; \
-D CMAKE_EXE_LINKER_FLAGS:STRING=$LDFLAGS; \
-D CMAKE_MODULE_LINKER_FLAGS:STRING=$LDFLAGS; \
-D CMAKE_SHARED_LINKER_FLAGS:STRING=$LDFLAGS; \
-D CMAKE_BUILD_TYPE=Release; \
-D CLANG_VERSION=$version_target; \
-D CMAKE_SYSROOT_COMPILE=$KISS_ROOT; \
-D CMAKE_SYSROOT=$KISS_ROOT; \
-D _CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES_INIT=; \
-D LLDB_ENABLE_PYTHON:INTERNAL=0 \
" \
			-D LD_LIBRARY_PATH="\
$toolchain_prefix/lib/$LLVM_TARGET_TRIPLE:\
$toolchain_prefix/lib" \
			-D KISS_ROOT=$KISS_ROOT \
			-D OS_NAME="$($KISS_ROOT/usr/bin/uname)" \
			-D CMAKE_TOOLCHAIN_PREFIX="$CMAKE_TOOLCHAIN_PREFIX" \
			-D COMPILER_RESOURCE_DIR:STRING="$resource_dir" \
			-D LLVM_ENABLE_PROJECTS="clang;lld" \
			-D LLVM_ENABLE_RUNTIMES="compiler-rt;libunwind;libcxxabi;libcxx" \
			-D LLVM_TARGET_TRIPLE="$LLVM_TARGET_TRIPLE" \
			-D LLVM_ENABLE_BACKTRACES=ON \
			-D LLVM_USE_HOST_TOOLS=ON \
			-D LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default=ON \
			-D LLVM_ENABLE_PER_TARGET_RUNTIME_DIR=ON \
			-D CLANG_DEFAULT_RTLIB="compiler-rt" \
			-D CLANG_DEFAULT_UNWINDLIB="libunwind" \
			-D LIBCXX_CXX_ABI="libcxxabi" \
			-D COMPILER_RT_DEFAULT_TARGET_TRIPLE="$LLVM_TARGET_TRIPLE" \
			-D COMPILER_RT_BUILD_STANDALONE_LIBATOMIC=OFF \
			-D COMPILER_RT_USE_BUILTINS_LIBRARY=ON \
			-D COMPILER_RT_EMULATOR=ON \
			-D COMPILER_RT_HAS_SANITIZER_COMMON:BOOL=ON \
			-D COMPILER_RT_LIBCXX_PATH="$MAKE_DIR/libcxx" \
			-D COMPILER_RT_LIBCXXABI_PATH="$MAKE_DIR/libcxxabi" \
			-D COMPILER_RT_HAS_LIBEXECINFO=ON \
			-D COMPILER_RT_INCLUDE_TESTS=ON \
			-D _LIBCPP_PROVIDES_DEFAULT_RUNE_TABLE:INTERNAL=1 \
			-D LIBCXXABI_LIBCXX_INCLUDES=libcxx/include \
			-D LIBCXXABI_USE_LLVM_UNWINDER=ON \
			-D LIBCXXABI_USE_COMPILER_RT=ON \
			-D LIBCXXABI_ENABLE_THREADS=ON \
			-D LIBCXXABI_HERMETIC_STATIC_LIBRARY=ON \
			-D LIBCXXABI_INSTALL_LIBRARY=ON \
			-D LIBCXXABI_ENABLE_EXCEPTIONS=ON \
			-D LIBCXXABI_ENABLE_STATIC=ON \
			-D LIBCXX_ENABLE_STATIC=ON \
			-D LIBCXX_INCLUDE_TESTS=ON \
			-D LIBCXXABI_INCLUDE_TESTS=ON \
			-D LIBCXX_ENABLE_SHARED=ON \
			-D LIBCXXABI_ENABLE_SHARED=ON \
			-D LIBCXX_HARDENING_MODE:STRING=$LIBCXX_HARDENING_MODE \
			-D LIBUNWIND_USES_SJLJ_EXCEPTIONS:INTERNAL=0 \
			-D LIBUNWIND_HAS_NODEFAULTLIBS_FLAG=OFF \
			-D CAN_TARGET_x86_64=ON \
			-D COMPILER_RT_BUILD_GWP_ASAN=ON \
			-D CMAKE_SIZEOF_VOID_P=8 \
			-W no-dev > /dev/null


			# -C $runtimes_cmake \
			# -C $builtins_cmake \
			# -C $common_cmake \
# In LIBUNWIND_CPP_FLAGS
# -isystem $DESTDIR/$INSTALL_PREFIX/include/c++/v1 \
# In LIBUNWIND_CXX_FLAGS
# -isystem $DESTDIR/$INSTALL_PREFIX/include/c++/v1 \
# In CMAKE_CXX_FLAGS
# -isystem $DESTDIR/$INSTALL_PREFIX/include/c++/v1 \
			# -D COMPILER_RT_HAS_GWP_ASAN=ON \
			# -D COMPILER_RT_EMULATOR=ON \
	# In CROSS_TOOLCHAIN_FLAGS_LLVM_NATIVE
	# -D LIBCXX_ENABLE_ASSERTIONS:BOOL=ON; \
	# -D LLVM_DISABLE_ABI_BREAKING_CHECKS_ENFORCING:INTERNAL=1; \
	#
			# -D LIBUNWIND_CPP_FLAGS:STRING="$RUNTIMES_TARGET_CMAKE_CXX_FLAGS" \
			# -D LIBUNWIND_COMPILE_FLAGS:STRING="$RUNTIMES_TARGET_CMAKE_C_FLAGS" \
			# -D LIBUNWIND_C_FLAGS:STRING="$RUNTIMES_TARGET_CMAKE_C_FLAGS" \
			# -D LIBUNWIND_CXX_FLAGS:STRING="$RUNTIMES_TARGET_CMAKE_CXX_FLAGS" \
			# -D LIBUNWIND_LINK_FLAGS="$LDFLAGS" \
#           -D LD_LIBRARY_PATH="\
# $OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE:\
# $OUTPUT_DIR/lib:\
# $DESTDIR/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE:\
# $DESTDIR/$INSTALL_PREFIX/lib" \
	#       -D LD_LIBRARY_PATH="\
	# $OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE:\
	# $OUTPUT_DIR/lib:\
	# $DESTDIR/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE:\
	# $DESTDIR/$INSTALL_PREFIX/lib:\
	# $KISS_ROOT/$INSTALL_PREFIX/lib" \
			# -D LLVM_CCACHE_BUILD=ON \
			# -D LLVM_CONFIG_PATH=$OUTPUT_DIR/bin/llvm-config \
			# -D LLVM_INCLUDE_TESTS=ON \
			# -D LLVM_USE_PERF=ON \
			# -D LLVM_ENABLE_DUMP=ON \
			# -D CMAKE_TOOLCHAIN_FILE="$color_config" \
			# -D CMAKE_INSTALL_RPATH=../lib/llvm/$version_target \
	# -D LD_LIBRARY_PATH=$( \
	#   path_prepend LD_LIBRARY_PATH "$KISS_ROOT/$INSTALL_PREFIX/lib"
	#   path_prepend LD_LIBRARY_PATH "$DESTDIR/$INSTALL_PREFIX/lib"
	#   path_prepend LD_LIBRARY_PATH "$DESTDIR/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE"
	#   path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/lib"
	#   path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE"
	#   path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/NATIVE/lib"
	#   path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/NATIVE/lib/$LLVM_TARGET_TRIPLE"
	#   printf '%s' "$LD_LIBRARY_PATH"
	#   ) \
	#       -D CMAKE_C_FLAGS="-isystem $KISS_ROOT/$INSTALL_PREFIX/include" \
	#       -D CMAKE_CXX_FLAGS="\
	# -isystem $KISS_ROOT/$INSTALL_PREFIX/include/c++/v1 \
	# -isystem $KISS_ROOT/$INSTALL_PREFIX/include \
	# " \
			# -D LLVM_USE_SANITIZER="Address;Undefined" \
			# -D CMAKE_INSTALL_NAME_DIR:STRING=/$INSTALL_PREFIX/lib/llvm/$version_target \
			# -D LLVM_CCACHE_BUILD=ON \
		#       -D CMAKE_CXX_FLAGS="-D _LIBCPP_PSTL_CPU_BACKEND_THREAD \
		# -isystem $KISS_ROOT/$INSTALL_PREFIX/include/c++/v1 \
		# -isystem $KISS_ROOT/$INSTALL_PREFIX/include" \
			# -D CMAKE_TOOLCHAIN_PREFIX="$CMAKE_TOOLCHAIN_PREFIX" \
			# -D LLVM_ENABLE_PROJECTS="clang;clang-tools-extra" \
			# -D CMAKE_CXX_FLAGS="-isystem $KISS_ROOT/$INSTALL_PREFIX/include/c++/v1 -isystem $KISS_ROOT/$INSTALL_PREFIX/include ${CXXFLAGS-}" \

		#   -D CMAKE_CXX_FLAGS="-isystem $KISS_ROOT/$INSTALL_PREFIX/include/c++/v1 \
		# -isystem $KISS_ROOT/$INSTALL_PREFIX/include" \
		#   -D CMAKE_C_FLAGS="-isystem $KISS_ROOT/$INSTALL_PREFIX/include" \


		# [ -d "$OUTPUT_DIR/libunwind" ] &&
		# [ -d "$OUTPUT_DIR/libcxxabi" ] &&
		# [ -d "$OUTPUT_DIR/libcxx" ] ||
		# // die 'runtimes' "dirs do not exist"

		fix_cmakecxxcompiler "$output_dir"

		// cue 'runtimes' "bootstrap construction"
		// cue 'runtimes' "bootstrap compiler-rt"
		ninja -C "$output_dir" compiler-rt > /dev/null ||
		ninja -C "$output_dir" compiler-rt || kill 0
		// cue 'runtimes' "bootstrap LLVMTargetParser"
		ninja -C "$output_dir" LLVMTargetParser > /dev/null ||
		ninja -C "$output_dir" LLVMTargetParser || kill 0
		// cue 'runtimes' "bootstrap LLVMSupport"
		ninja -C "$output_dir" LLVMSupport > /dev/null || {
			# sed "s# -isystem $KISS_ROOT/usr/include\$##g" < "$output_dir/NATIVE/build.ninja" > _
			# mv -f _ "$output_dir/NATIVE/build.ninja"
			ninja -C "$output_dir" LLVMSupport || kill 0
		}
		// cue 'runtimes' "bootstrap LLVMDemangle"
		ninja -C "$output_dir" LLVMDemangle > /dev/null ||
		ninja -C "$output_dir" LLVMDemangle || kill 0

		ninja -C "$output_dir" llvm-min-tblgen > /dev/null ||
		ninja -C "$output_dir" llvm-min-tblgen || kill 0
		ninja -C "$output_dir" llvm-tblgen > /dev/null || {
			# sed "s# -isystem $KISS_ROOT/usr/include\$##g" < "$output_dir/NATIVE/build.ninja" > _
			# mv -f _ "$output_dir/NATIVE/build.ninja"
			ninja -C "$output_dir" llvm-tblgen  || kill 0
		}
		ninja -C "$output_dir" clang-tblgen > /dev/null || {
			# sed "s# -isystem $KISS_ROOT/usr/include\$##g" < "$output_dir/NATIVE/build.ninja" > _
			# mv -f _ "$output_dir/NATIVE/build.ninja"
			ninja -C "$output_dir" clang-tblgen || kill 0
		}
		# // cue 'runtimes' "bootstrap construction"
		# cmake --build   $OUTPUT_DIR -j $jobs > /dev/null || kill 0

		# ninja -C "$OUTPUT_DIR" LLVMDemangle
		# ninja -C "$OUTPUT_DIR" install-LLVMDemangle
		# ninja -j $jobs -C "$OUTPUT_DIR" runtimes > /dev/null ||
		ninja -j $jobs -C "$output_dir" runtimes > /dev/null || {
			# sed "s# -isystem $KISS_ROOT/usr/include\$##g" < "$output_dir/NATIVE/build.ninja" > _
			# mv -f _ "$output_dir/NATIVE/build.ninja"
			ninja -j $jobs -C "$output_dir" runtimes || kill 0
		}

		# ninja -j $jobs -C "$OUTPUT_DIR" all > /dev/null ||
		# ninja -j $jobs -C "$OUTPUT_DIR" || kill 0

		# ninja: unknown target 'check-runtimes'
		# ninja -j $jobs -C $OUTPUT_DIR check-runtimes > /dev/null || kill 0

		local dest_resource_dir="$DESTDIR/$INSTALL_PREFIX/lib/clang/$version_target"
		local builtins_dest_dir="$dest_resource_dir/lib/$LLVM_TARGET_TRIPLE"
		[ -d "$builtins_dest_dir" ] ||
			// as_own "$DESTDIR" \
			\mkdir -p "$builtins_dest_dir"

		// cue 'runtimes' "bootstrap installation"
		# // cue 'runtimes' "bootstrap installation"
		# cmake --install $OUTPUT_DIR > /dev/null || kill 0
		# ninja -j $jobs -C "$OUTPUT_DIR" install-runtimes > /dev/null || kill 0
		# ninja -j $jobs -C "$OUTPUT_DIR" install &&
		ninja -j $jobs -C "$output_dir" install-runtimes > /dev/null &&
		{
			path_prepend LD_LIBRARY_PATH "$toolchain_prefix/lib"
			path_prepend LD_LIBRARY_PATH "$toolchain_prefix/lib/$LLVM_TARGET_TRIPLE"

			! find_target "install-llvm-min-tblgen" ||
			ninja -C "$output_dir" install-llvm-min-tblgen

			ninja -C "$output_dir" install-llvm-tblgen
			ninja -C "$output_dir" install-clang-tblgen

			# ninja -C "$output_dir" llvm-config
			# Might fail
			ninja -C "$output_dir" check-llvm-tools-llvm-config || :
			# ! llvm-config --version > /dev/null 2>&1 || {
				ninja -C "$output_dir" install-llvm-config
			# }
			[ -f "$DESTDIR/$INSTALL_PREFIX/bin/llvm-config" ] || {
				// as_own "$DESTDIR" \
				rsync -aq "$output_dir/bin/llvm-config" "$DESTDIR/$INSTALL_PREFIX/" && // as_own "$DESTDIR" sync
			}
			[ -f "$DESTDIR/$INSTALL_PREFIX/bin/llvm-tblgen" ] || {
				// as_own "$DESTDIR" \
				rsync -aq "$output_dir/bin/llvm-tblgen" "$DESTDIR/$INSTALL_PREFIX/" && // as_own "$DESTDIR" sync
			}
			[ -f "$DESTDIR/$INSTALL_PREFIX/bin/clang-tblgen" ] || {
				// as_own "$DESTDIR" \
				rsync -aq "$output_dir/bin/clang-tblgen" "$DESTDIR/$INSTALL_PREFIX/" && // as_own "$DESTDIR" sync
			}

			ninja -C "$output_dir" install-clang
			ninja -C "$output_dir" install-lld
			ninja -C "$output_dir" install-compiler-rt

			local source_path_out="$output_dir/lib/clang/$version_target/lib/$LLVM_TARGET_TRIPLE"
			[ -f "$source_path_out/libclang_rt.builtins.a" ] ||
				// die '$source_path_out/libclang_rt.builtins.a' "'$source_path_out/libclang_rt.builtins.a' does not exist"
			# ! empty "$builtins_dest_dir" &&
			builtins_valid "$builtins_dest_dir" "$source_path_out" ||
			# [ -f "$builtins_dest_dir/libclang_rt.builtins.a" ] &&
			{
				// as_own "$DESTDIR" \
				rsync -aqz "$source_path_out/." "$builtins_dest_dir/" && // as_own "$DESTDIR" sync; } ||
			// die "rsync $source_path_out $builtins_dest_dir" "failed"

			builtins_valid "$builtins_dest_dir" "$source_path_out" ||
			// die "rsync $source_path_out $builtins_dest_dir" "failed"

			[ -f "$builtins_dest_dir/libclang_rt.builtins.a" ] ||
			[ ! -f "$source_path_out/libclang_rt.builtins.a" ] ||
			{
				// as_own "$DESTDIR" \
				rsync -aqz "$source_path_out/." "$builtins_dest_dir/" && // as_own "$DESTDIR" sync; } ||
				// die '$builtins_dest_dir/libclang_rt.builtins.a' "'$builtins_dest_dir/libclang_rt.builtins.a' does not exist"

			builtins_exist "$builtins_dest_dir" ||
				// die '$builtins_dest_dir' "'$builtins_dest_dir' does not have essential builtins"
			builtins_valid "$builtins_dest_dir" "$source_path_out" ||
				// die '$builtins_dest_dir' "'$builtins_dest_dir' does not have valid essential builtins"

			ninja -C "$output_dir" install-unwind
			! find_target "install-unwind-$LLVM_DEFAULT_TARGET_TRIPLE" ||
				ninja -C "$output_dir" "install-unwind-$LLVM_DEFAULT_TARGET_TRIPLE"

			ninja -C "$output_dir" install-cxx
			ninja -C "$output_dir" install-cxxabi
			ninja -C "$output_dir" install-runtimes
			ninja -C "$output_dir" install

			export LLVM_TABLEGEN="$toolchain_prefix/bin/llvm-tblgen"
			export CLANG_TABLEGEN="$toolchain_prefix/bin/clang-tblgen"
			[ ! -d "$output_dir/NATIVE/lib" ] ||
				{
					// as_own "$NATIVE_DIR" \
					rsync -aqz "$output_dir/NATIVE/lib/." "$NATIVE_DIR/$INSTALL_PREFIX/lib/" && // as_own "$NATIVE_DIR" sync; }
			[ ! -d "$output_dir/NATIVE/bin" ] ||
				{
					// as_own "$NATIVE_DIR" \
					rsync -aqz "$output_dir/NATIVE/bin/." "$LLVM_NATIVE_TOOL_DIR/" && // as_own "$NATIVE_DIR" sync; }

			// as_own "$DESTDIR" \
			rsync -aqz "$source_path_out/." "$builtins_dest_dir/" && // as_own "$DESTDIR" sync

			// check_libunwind $(find "$output_dir" -type f -name "libunwind.so.*") ||
				// die 'libunwind' "is invalid"

			local runtimes_dest="$DESTDIR/$INSTALL_PREFIX/lib/$LLVM_DEFAULT_TARGET_TRIPLE"
			[ -d "$runtimes_dest" ] ||
			// as_own "$DESTDIR" \mkdir -p "$runtimes_dest"

			// as_own "$DESTDIR" \
			rsync -aqz "$output_dir/lib/$LLVM_DEFAULT_TARGET_TRIPLE/." "$runtimes_dest/" && // as_own "$DESTDIR" sync

			// check_libunwind $(find "$runtimes_dest" -type f -name "libunwind.so.*") ||
				// die 'installed libunwind' "is invalid"

			builtins_mock_all "$libname" "$builtins_dest_dir"
			builtins_valid "$builtins_dest_dir" "$source_path_out" ||
				// die '$builtins_dest_dir' "'$builtins_dest_dir' does not have valid essential builtins"
			local anchor_dir="$dest_resource_dir/lib/linux"
			[ -f "$anchor_dir/libclang_rt.builtins-$libname.a" ] ||
				// die '$dest_resource_dir/lib/linux/libclang_rt.builtins-$libname.a' "does not exist"
			# builtin_mock "$libname" "$builtins_dest_dir/libclang_rt.builtins.a"
			# builtin_mock "$libname" "$builtins_dest_dir/clang_rt.crtbegin.o"
			# builtin_mock "$libname" "$builtins_dest_dir/clang_rt.crtend.o"
		} || {
			export LLVM_TABLEGEN="$llvm_tblgen_previous"
			export CLANG_TABLEGEN="$clang_tblgen_previous"
			// die 'install-runtimes' "failed"
			# kill 0
		}

		cd "$provious_dir"
	}

	runtimes_out_of_tree() {
		_level_2

		local output_dir="$OUTPUT_DIR"
		[ -d "$output_dir" ] || \mkdir -p "$output_dir"

		// log  'cmake' "clear cache"
		clean_objects "runtimes"
		// cue 'runtimes' "out of tree configuration and generation"

		# local rpath_version="$version_xhost"
		# [ ! -z "${TOOLCHAIN_PREFIX##*"$DESTDIR"*}" ] ||
		local rpath_version="$version_target"
		local linker_flags=" \
-resource-dir=$RESOURCE_DIR \
-L $OUTPUT_DIR/lib/clang/$VERSION_SYSTEM/lib/$LLVM_TARGET_TRIPLE \
-L $OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE \
-L $RESOURCE_DIR/lib/$LLVM_TARGET_TRIPLE \
-L $RESOURCE_DIR/lib/linux \
-L $SYSROOT_LIB/$LLVM_TARGET_TRIPLE \
-L $SYSROOT_LIB \
-Wl,-rpath=XORIGIN/../lib/clang/$version_target/lib/$LLVM_TARGET_TRIPLE \
-Wl,-rpath=XORIGIN/../lib/clang/$version_target/lib/linux \
-Wl,-rpath=XORIGIN/../lib/$LLVM_TARGET_TRIPLE \
-Wl,-rpath=XORIGIN/../lib \
$ldflags \
-Wl,-lunwind \
"

		# [ -d "$OUTPUT_DIR/runtimes" ] || \mkdir -p "$OUTPUT_DIR/runtimes"
		cmake -G Ninja \
			-B "$OUTPUT_DIR" \
			-S "$MAKE_DIR/runtimes" \
			-D CMAKE_C_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang \
			-D CMAKE_ASM_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang \
			-D CMAKE_CXX_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang++ \
			-D CMAKE_CPP_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/cpp \
			-C "$runtimes_cmake" \
			-C "$builtins_cmake" \
			-D CMAKE_INSTALL_PREFIX=/$INSTALL_PREFIX \
			-D CMAKE_INSTALL_RPATH=XORIGIN/../lib/llvm/$version_target \
			-D CMAKE_INSTALL_NAME_DIR:STRING=/$INSTALL_PREFIX/lib \
			-D CMAKE_BUILD_WITH_INSTALL_RPATH=ON \
			-D CMAKE_BUILD_TYPE=Release \
			-D CMAKE_TOOLCHAIN_FILE="$TOOLCHAIN_FILES" \
			-D CMAKE_C_COMPILER_TARGET="$LLVM_TARGET_TRIPLE" \
			-D LLVM_TARGET_TRIPLE="$LLVM_TARGET_TRIPLE" \
			-D COMPILER_RESOURCE_DIR:STRING="$RESOURCE_DIR" \
			-D LLVM_LIBGCC_EXPLICIT_OPT_IN=Yes \
			-D LLVM_TARGETS_TO_BUILD="host;AMDGPU" \
			-D CMAKE_TOOLCHAIN_PREFIX="$CMAKE_TOOLCHAIN_PREFIX" \
			-D CMAKE_CXX_STANDARD="$LLVM_REQUIRED_CXX_STANDARD" \
			-D CMAKE_POSITION_INDEPENDENT_CODE=ON \
			-D CMAKE_MODULE_PATH="${CMAKE_MODULE_PATH};$MAKE_DIR/llvm/cmake/modules" \
			-D LLVM_RUNTIME_TARGETS="$LLVM_TARGET_TRIPLE" \
			-D LLVM_ENABLE_RUNTIMES="compiler-rt;libunwind;libcxxabi;libcxx" \
			-D LLVM_ENABLE_BACKTRACES=ON \
			-D COMPILER_RT_HAS_LIBEXECINFO=ON \
			-D COMPILER_RT_HAS_SANITIZER_COMMON:BOOL=ON \
			-D CMAKE_CXX_FLAGS="$cxxflags" \
			-D CMAKE_C_FLAGS="$cflags" \
			-D CMAKE_ASM_FLAGS="$cflags" \
			-D LLVM_DEFAULT_TARGET_TRIPLE="$LLVM_TARGET_TRIPLE" \
			-D LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default=ON \
			-D LLVM_ENABLE_PER_TARGET_RUNTIME_DIR=ON \
			-D LLVM_USE_HOST_TOOLS=ON \
			-D COMPILER_RT_INCLUDE_TESTS=ON \
			-D LIBCXX_INCLUDE_TESTS=ON \
			-D LIBCXXABI_INCLUDE_TESTS=ON \
			-D LIBCXX_HARDENING_MODE:STRING=$LIBCXX_HARDENING_MODE \
			-D COMPILER_RT_BUILD_SANITIZERS:BOOL=ON \
			-D COMPILER_RT_EMULATOR=OFF \
			-D LLVM_USE_SANITIZER=MemoryWithOrigins \
			-D LIBCXX_ENABLE_STATIC_ABI_LIBRARY=ON \
			-D LIBCXX_ENABLE_STATIC=ON \
			-D LIBCXXABI_ENABLE_STATIC=ON \
			-D LIBCXX_ENABLE_SHARED=ON \
			-D LIBCXXABI_ENABLE_SHARED=ON \
			-D LIBUNWIND_ENABLE_STATIC=ON \
			-D LIBUNWIND_ENABLE_SHARED=ON \
			-D CXX_SUPPORTS_FNO_EXCEPTIONS_FLAG:INTERNAL=1 \
			-D CXX_SUPPORTS_FUNWIND_TABLES_FLAG:INTERNAL=1 \
			-D STATICALLY_LINK_UNWINDER_IN_STATIC_LIBRARY=OFF \
			-D STATICALLY_LINK_UNWINDER_IN_SHARED_LIBRARY=OFF \
			-D CMAKE_EXE_LINKER_FLAGS="$linker_flags" \
			-D CMAKE_SHARED_LINKER_FLAGS="$linker_flags" \
			-D CMAKE_MODULE_LINKER_FLAGS="$linker_flags" \
			-D LD_LIBRARY_PATH="\
$TOOLCHAIN_PREFIX/lib/$LLVM_TARGET_TRIPLE:\
$TOOLCHAIN_PREFIX/lib" \
			-D CAN_TARGET_x86_64=ON \
			-D COMPILER_RT_BUILD_GWP_ASAN=ON \
			-W no-dev > /dev/null

			# -D COMPILER_RT_HAS_GWP_ASAN=ON \
#           -D LD_LIBRARY_PATH="\
# $OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE:\
# $OUTPUT_DIR/lib:\
# $DESTDIR/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE:\
# $DESTDIR/$INSTALL_PREFIX/lib" \
			# -D COMPILER_RT_EMULATOR=ON \
			# -D CMAKE_TOOLCHAIN_FILE="$color_config" \
			# -D LLVM_USE_SANITIZER=MemoryWithOrigins \
			# -D LLVM_USE_SANITIZER="Address;Undefined" \
			# -D CMAKE_CROSSCOMPILING=ON \
			# -D CMAKE_INSTALL_NAME_DIR:STRING=/$INSTALL_PREFIX/lib/llvm/$version_target \
			# -D LLVM_CCACHE_BUILD=ON \
		// cue 'runtimes' "out of tree construction"
		cmake --build   "$OUTPUT_DIR" -j $jobs > /dev/null ||
		cmake --build   "$OUTPUT_DIR" -j $jobs || kill 0
		ninja -j $jobs -C "$OUTPUT_DIR" all > /dev/null
		// cue 'runtimes' "installation [out of tree build]"
		cmake --install "$OUTPUT_DIR" > /dev/null || kill 0
		ninja -j $jobs -C "$OUTPUT_DIR" install

		// check_libunwind $(find "$output_dir" -type f -name "libunwind.so.*") ||
			// die 'libunwind' "is invalid"

		local runtimes_dest="$DESTDIR/$INSTALL_PREFIX/lib/$LLVM_DEFAULT_TARGET_TRIPLE"
		[ -d "$runtimes_dest" ] ||
		// as_own "$DESTDIR" \mkdir -p "$runtimes_dest"

		// as_own "$DESTDIR" \
		rsync -aqz "$output_dir/lib/$LLVM_DEFAULT_TARGET_TRIPLE/." "$runtimes_dest/" && // as_own "$DESTDIR" sync

		// check_libunwind $(find "$runtimes_dest" -type f -name "libunwind.so.*") ||
			// die 'installed libunwind' "is invalid"

	}

	build_libcxxabi_individually() {
		_level_2
		// log  'cmake' "clear cache"
		clean_objects "libcxxabi"
		// cue 'libcxxabi' "configuration and generation"

		# local rpath_version="$version_xhost"
		# [ ! -z "${TOOLCHAIN_PREFIX##*"$DESTDIR"*}" ] ||
		local rpath_version="$version_target"

		# [ -d "$OUTPUT_DIR/libcxxabi" ] || \mkdir -p "$OUTPUT_DIR/libcxxabi"
		cmake -G Ninja \
			-B "$OUTPUT_DIR" \
			-S "$MAKE_DIR/libcxxabi" \
			-C $runtimes_cmake \
			-C $builtins_cmake \
			-D CMAKE_INSTALL_PREFIX=/$INSTALL_PREFIX \
			-D CMAKE_INSTALL_RPATH=XORIGIN/../lib/llvm/$version_target \
			-D CMAKE_INSTALL_NAME_DIR:STRING=/$INSTALL_PREFIX/lib \
			-D CMAKE_BUILD_WITH_INSTALL_RPATH=ON \
			-D CMAKE_BUILD_TYPE=Release \
			-D COMPILER_RESOURCE_DIR:STRING="$RESOURCE_DIR" \
			-D CMAKE_TOOLCHAIN_FILE="$TOOLCHAIN_FILES" \
			-D CMAKE_C_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang \
			-D CMAKE_ASM_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang \
			-D CMAKE_CXX_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang++ \
			-D CMAKE_CPP_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/cpp \
			-D CMAKE_CXX_STANDARD="$LLVM_REQUIRED_CXX_STANDARD" \
			-D LIBCXXABI_LIBCXX_INCLUDES=libcxx/include \
			-D LIBCXXABI_USE_LLVM_UNWINDER=ON \
			-D LIBCXXABI_USE_COMPILER_RT=ON \
			-D LIBCXXABI_ENABLE_THREADS=ON \
			-D LIBCXXABI_HERMETIC_STATIC_LIBRARY=ON \
			-D LIBCXXABI_INSTALL_LIBRARY=ON \
			-D LIBCXXABI_ENABLE_EXCEPTIONS=ON \
			-D LIBCXXABI_ENABLE_STATIC_UNWINDER=OFF \
			-D LIBCXXABI_ENABLE_STATIC=ON \
			-D CMAKE_POSITION_INDEPENDENT_CODE=ON \
			-D CMAKE_CXX_FLAGS=" \
-resource-dir=$RESOURCE_DIR \
-D _LIBCPP_PSTL_CPU_BACKEND_THREAD \
-isystem $SYSROOT/$INSTALL_PREFIX/include/$LLVM_TARGET_TRIPLE/c++/v1 \
-isystem $SYSROOT/$INSTALL_PREFIX/include/c++/v1 \
`# -isystem $OUTPUT_DIR/lib/clang/$VERSION_SYSTEM/include` \
-isystem $RESOURCE_DIR/include \
-isystem $SYSROOT/$INSTALL_PREFIX/include \
${cxxflags-}" \
			-D CMAKE_C_FLAGS="\
-resource-dir=$RESOURCE_DIR \
-isystem $RESOURCE_DIR/include \
-isystem $SYSROOT/$INSTALL_PREFIX/include \
${cflags-}" \
			-D LLVM_USE_HOST_TOOLS=ON \
			-D LD_LIBRARY_PATH="\
$TOOLCHAIN_PREFIX/lib/$LLVM_TARGET_TRIPLE:\
$TOOLCHAIN_PREFIX/lib" \
			-W no-dev > /dev/null

#           -D LD_LIBRARY_PATH="\
# $OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE:\
# $OUTPUT_DIR/lib:\
# $DESTDIR/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE:\
# $DESTDIR/$INSTALL_PREFIX/lib" \
			# -D CMAKE_TOOLCHAIN_FILE="$color_config" \
			# -D CMAKE_CROSSCOMPILING=ON \
			# -D CMAKE_INSTALL_NAME_DIR:STRING=/$INSTALL_PREFIX/lib/llvm/$version_target \
			# -D LLVM_CCACHE_BUILD=ON \
			# -D CMAKE_C_COMPILER=clang \
			# -D CMAKE_CXX_COMPILER=clang++ \
			# -D CMAKE_CXX_FLAGS="-isystem $DESTDIR/$INSTALL_PREFIX/include/c++/v1 -isystem $MAKE_DIR/libcxx/include -isystem $KISS_ROOT/$INSTALL_PREFIX/include ${CMAKE_CXX_FLAGS}" \
			# -D CMAKE_CXX_FLAGS="-isystem $KISS_ROOT/$INSTALL_PREFIX/include -isystem $MAKE_DIR/libcxx/include -isystem $KISS_ROOT/$INSTALL_PREFIX/include/c++/v1 ${CMAKE_CXX_FLAGS}" \
			# -D LIBCXXABI_STATICALLY_LINK_UNWINDER_IN_STATIC_LIBRARY=ON \
			# -D LLVM_ENABLE_RUNTIMES="libcxx;libcxxabi;libunwind" \

		#       -D CMAKE_CXX_FLAGS="-isystem $KISS_ROOT/$INSTALL_PREFIX/include/c++/v1 \
		# -isystem $KISS_ROOT/$INSTALL_PREFIX/include ${CMAKE_CXX_FLAGS}" \

		// cue 'libcxxabi' "construction"
		cmake --build   "$OUTPUT_DIR" -j $jobs > /dev/null || kill 0
		// cue 'libcxxabi' "installation"
		cmake --install "$OUTPUT_DIR" > /dev/null || kill 0

		// as_own "$DESTDIR" \
		mkdir -p "$DESTDIR/$INSTALL_PREFIX"

		// as_own "$DESTDIR" \
		cp -r libcxxabi/include "$DESTDIR/$INSTALL_PREFIX/"
	}

	build_libcxx_individually() {
		_level_2
		// log  'cmake' "clear cache"
		clean_objects "libcxx"
		// cue 'libcxx' "configuration and generation"

		# local rpath_version="$version_xhost"
		# [ ! -z "${TOOLCHAIN_PREFIX##*"$DESTDIR"*}" ] ||
		local rpath_version="$version_target"

		# [ -d "$OUTPUT_DIR/libcxx" ] || \mkdir -p "$OUTPUT_DIR/libcxx"
		# CMAKE_SOURCE_DIR="$MAKE_DIR/libcxx"
		cmake -G Ninja \
			-B "$OUTPUT_DIR" \
			-S "$MAKE_DIR/libcxx" \
			-C $runtimes_cmake \
			-C $builtins_cmake \
			-D CMAKE_INSTALL_PREFIX=/$INSTALL_PREFIX \
			-D CMAKE_INSTALL_RPATH=XORIGIN/../lib/llvm/$version_target \
			-D CMAKE_INSTALL_NAME_DIR:STRING=/$INSTALL_PREFIX/lib \
			-D CMAKE_BUILD_WITH_INSTALL_RPATH=ON \
			-D CMAKE_BUILD_TYPE=Release \
			-D COMPILER_RESOURCE_DIR:STRING="$RESOURCE_DIR" \
			-D CMAKE_TOOLCHAIN_FILE="$TOOLCHAIN_FILES" \
			-D CMAKE_C_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang \
			-D CMAKE_ASM_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang \
			-D CMAKE_CXX_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang++ \
			-D CMAKE_CPP_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/cpp \
			-D CMAKE_CXX_STANDARD="$LLVM_REQUIRED_CXX_STANDARD" \
			-D LIBCXXABI_USE_LLVM_UNWINDER=ON \
			-D LIBCXX_CXX_ABI=libcxxabi \
			-D LIBCXX_INCLUDE_BENCHMARKS=OFF \
			-D LIBCXX_USE_COMPILER_RT=ON \
			-D LIBCXX_HAS_MUSL_LIBC=ON \
			-D LIBCXX_HAS_ATOMIC_LIB:INTERNAL=0 \
			-D LIBCXX_HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1 \
			-D LIBCXX_HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1 \
			-D CMAKE_POSITION_INDEPENDENT_CODE=ON \
			-D LLVM_USE_HOST_TOOLS=ON \
			-D LD_LIBRARY_PATH="\
$TOOLCHAIN_PREFIX/lib/$LLVM_TARGET_TRIPLE:\
$TOOLCHAIN_PREFIX/lib" \
			-W no-dev > /dev/null

#           -D LD_LIBRARY_PATH="\
# $OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE:\
# $OUTPUT_DIR/lib:\
# $DESTDIR/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE:\
# $DESTDIR/$INSTALL_PREFIX/lib" \
			# -D CMAKE_TOOLCHAIN_FILE="$color_config" \
			# -D CMAKE_CROSSCOMPILING=ON \
			# -D CMAKE_INSTALL_NAME_DIR:STRING=/$INSTALL_PREFIX/lib/llvm/$version_target \
			# -D LLVM_CCACHE_BUILD=ON \
			# -D CMAKE_C_COMPILER=clang \
			# -D CMAKE_CXX_COMPILER=clang++ \
			# -D LIBCXX_HAS_ATOMIC_LIB=OFF \
		# ld.lld: error: unable to find library -llibcxx-abi-shared
		# ld.lld: error: unable to find library -lcxxabi-headers

			# -DLLVM_INCLUDE_BENCHMARKS=OFF \
			# -DLLVM_BUILD_BENCHMARKS=OFF \
			# -DLLVM_THIRD_PARTY_DIR="$MAKE_DIR/libcxx" \

		// cue 'libcxx' "construction"
		cmake --build   "$OUTPUT_DIR" -j $jobs > /dev/null || kill 0
		// cue 'libcxx' "installation"
		cmake --install "$OUTPUT_DIR" > /dev/null || kill 0
	}

	build_clang_individually_twice() {
		_level_2
		// log  'cmake' "clear cache"
		clean_objects "clang"
		// cue 'clang' "configuration and generation for the second time construction"

		# local rpath_version="$version_xhost"
		# [ ! -z "${TOOLCHAIN_PREFIX##*"$DESTDIR"*}" ] ||
		local rpath_version="$version_target"

		# [ -d "$OUTPUT_DIR/clang" ] || \mkdir -p "$OUTPUT_DIR/clang"
		cmake -G Ninja \
			-B "$OUTPUT_DIR" \
			-S "$MAKE_DIR/clang" \
			-D CMAKE_C_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang \
			-D CMAKE_ASM_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang \
			-D CMAKE_CXX_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/clang++ \
			-D CMAKE_CPP_COMPILER=/$INSTALL_PREFIX/lib/ccache/bin/cpp \
			-D CMAKE_INSTALL_PREFIX=/$INSTALL_PREFIX \
			-D CMAKE_INSTALL_RPATH=XORIGIN/../lib/llvm/$version_target \
			-D CMAKE_INSTALL_NAME_DIR:STRING=/$INSTALL_PREFIX/lib \
			-D CMAKE_BUILD_WITH_INSTALL_RPATH=ON \
			-D CMAKE_BUILD_TYPE=Release \
			-D COMPILER_RESOURCE_DIR:STRING="$RESOURCE_DIR" \
			-D CMAKE_TOOLCHAIN_FILE="$TOOLCHAIN_FILES" \
			-D CMAKE_CXX_STANDARD="$LLVM_REQUIRED_CXX_STANDARD" \
			-D LLVM_ENABLE_RTTI=ON \
			-D LLVM_ENABLE_EH=ON \
			-D CLANG_LINK_CLANG_DYLIB=OFF \
			-D CLANG_BUILD_EXAMPLES=OFF \
			-D CLANG_INCLUDE_DOCS=OFF \
			-D CLANG_INCLUDE_TESTS=ON \
			-D LIBCLANG_BUILD_STATIC=OFF \
			-D CMAKE_POSITION_INDEPENDENT_CODE=ON \
			-D CLANG_DEFAULT_CXX_STDLIB=libc++ \
			-D CLANG_DEFAULT_RTLIB=compiler-rt \
			-D LLVM_USE_HOST_TOOLS=ON \
			-D LD_LIBRARY_PATH="\
$TOOLCHAIN_PREFIX/lib/$LLVM_TARGET_TRIPLE:\
$TOOLCHAIN_PREFIX/lib" \
			-W no-dev > /dev/null

#           -D LD_LIBRARY_PATH="\
# $OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE:\
# $OUTPUT_DIR/lib:\
# $DESTDIR/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE:\
# $DESTDIR/$INSTALL_PREFIX/lib" \
			# -D CMAKE_TOOLCHAIN_FILE="$color_config" \
			# -D CMAKE_CROSSCOMPILING=ON \
			# -D CMAKE_INSTALL_NAME_DIR:STRING=/$INSTALL_PREFIX/lib/llvm/$version_target \
			# -D LLVM_CCACHE_BUILD=ON \
			# -D CMAKE_C_COMPILER=cc \
			# -D CMAKE_CXX_COMPILER=c++ \

		// cue 'clang' "construction the second time"
		cmake --build   "$OUTPUT_DIR" -j $jobs > /dev/null || kill 0
		// cue 'clang' "installation the second time"
		cmake --install "$OUTPUT_DIR" > /dev/null || kill 0
	}

	build_runtimes() {
		# _level_2
		local toolchain_prefix="$1"
		# Too heavy, merged into runtiems and llvm
		# bootstrap_libunwind_in_tree
		# Does not work
		# ld.lld: error: duplicate symbol: __libunwind_Registers_x86_64_jumpto
		# ld.lld: error: duplicate symbol: __unw_getcontext
		# build_libunwind_individually
		#
		# compiler_rt_out_tree

		# build_libcxxabi_individually
		# build_libcxx_individually

		# bootstrap_llvm_libgcc_in_tree
		# build_llvm_libgcc_individually
		# Does not stable work
		# ld.lld: error: duplicate symbol: __libunwind_Registers_x86_64_jumpto
		# ld.lld: error: duplicate symbol: __unw_getcontext
		# runtimes_out_of_tree
		runtimes_in_tree "$toolchain_prefix" & build_id=$!
		// progress "$repo_name" "$build_id" "runtimes_in_tree"

	}

	regenerate_stage_flags() {
		STAGE_C_FLAGS="$CFLAGS"
		export STAGE_C_FLAGS
		// log '$STAGE_C_FLAGS' "$STAGE_C_FLAGS"
		# STAGE_CXX_FLAGS="-isystem $DESTDIR/$INSTALL_PREFIX/include/c++/v1 $CXXFLAGS"
		STAGE_CXX_FLAGS="$CXXFLAGS"
		export STAGE_CXX_FLAGS
		// log '$STAGE_CXX_FLAGS' "$STAGE_CXX_FLAGS"
	}

	# if [ "${bootstrap-}" = "1" ]; then


	bootstrap_options() {
		_level_2
		local toolchain_prefix="$1"
		local sysroot="$(// delegate -- to_sysroot "$toolchain_prefix")"
		local version_system="$(// delegate to_version "$sysroot/$INSTALL_PREFIX")"
		# local toolchain_version="$(// delegate to_version "$toolchain_prefix")"

		# echo "Building stage 1 and stage 2..."
		// log '$bootstrap' "$bootstrap"

		[ -f "$MAKE_DIR/files/distribution.cmake" ] ||
			// die 'file' "'$MAKE_DIR/files/distribution.cmake' does not exist"
		deploy "-C" "$MAKE_DIR/files/distribution.cmake"

		deploy "-D" "BOOTSTRAP_LD_LIBRARY_PATH" "\
$toolchain_prefix/lib/$LLVM_TARGET_TRIPLE:\
$toolchain_prefix/lib"
# $OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE:\
# $OUTPUT_DIR/lib:\

		local BOOTSTRAP_TOOLCHAIN_LIST=
		local BOOTSTRAP_TOOLCHAIN_FILES=

		deploy "-D" "BOOTSTRAP_COMPILER_RT_BUILD_SANITIZERS:BOOL" "ON"
		deploy "-D" "BOOTSTRAP_COMPILER_RT_BUILD_GWP_ASAN"        "ON"

		deploy "-D" "BOOTSTRAP_COMPILER_RT_HAS_GCC_LIB:BOOL"      "OFF"
		deploy "-D" "BOOTSTRAP_COMPILER_RT_HAS_GCC_S_LIB:BOOL"    "OFF"

		deploy "-D" "BOOTSTRAP_OS_NAME"                           "$($KISS_ROOT/usr/bin/uname)"

		[ ! -z "${toolchain_prefix##*"$DESTDIR"*}" ] ||
		deploy "-D" "BOOTSTRAP_PRINT_RTLIB_FILE_NAME" "ON"

		deploy "-D" "BOOTSTRAP_LLVM_USE_SANITIZER"                "$LLVM_USE_SANITIZER"

		deploy "-D" "BOOTSTRAP_LIBCXX_ENABLE_PARALLEL_ALGORITHMS" "ON"
		deploy "-D" "BOOTSTRAP_CLANG_CONFIG_FILE_SYSTEM_DIR"      "/etc/clang/$version_target"

		deploy "-D" "BOOTSTRAP_CMAKE_BUILD_WITH_INSTALL_RPATH"    "ON"
		deploy "-D" "BOOTSTRAP_LLDB_ENABLE_PYTHON:INTERNAL"       "0"

		deploy "-D" "BOOTSTRAP_LIBCXXABI_HAS_CXA_THREAD_ATEXIT_IMPL:INTERNAL" "0"

		modules_prepare

		deploy "-D" "BOOTSTRAP_CMAKE_MODULE_PATH"                 "$CMAKE_MODULE_PATH"

		deploy "-D" "BOOTSTRAP_CCACHE_PROGRAM"                    "$CCACHE_PROGRAM"

		deploy "-D" "BOOTSTRAP_LLVM_CCACHE_MAXSIZE:STRING"        "16GB"
		deploy "-D" "BOOTSTRAP_LLVM_CCACHE_DIR:PATH"              "$CCACHE_DIR"

		! // || / `merge_cache "$runtimes_cmake" $TOOLCHAIN_LIST |
			awk -v rs="$RS" -v fs="$FS" 'BEGIN { FS = fs; RS = rs } \
		END { print "BOOTSTRAP_TOOLCHAIN_FILES=\""$1"\"; BOOTSTRAP_TOOLCHAIN_LIST=\""$2"\"" }' ||
		printf '%s\n' "return 1"`

		deploy "-D" "BOOTSTRAP_CMAKE_TOOLCHAIN_FILE"              "$BOOTSTRAP_TOOLCHAIN_FILES"

		! // || / `merge_cache "$builtins_cmake" $TOOLCHAIN_LIST |
			awk -v rs="$RS" -v fs="$FS" 'BEGIN { FS = fs; RS = rs } \
		END { print "BOOTSTRAP_TOOLCHAIN_FILES=\""$1"\"; BOOTSTRAP_TOOLCHAIN_LIST=\""$2"\"" }' ||
		printf '%s\n' "return 1"`

		deploy "-D" "BOOTSTRAP_CMAKE_TOOLCHAIN_FILE"              "$BOOTSTRAP_TOOLCHAIN_FILES"

		! // || / `merge_cache "$color_config" $TOOLCHAIN_LIST |
			awk -v rs="$RS" -v fs="$FS" 'BEGIN { FS = fs; RS = rs } \
		END { print "BOOTSTRAP_TOOLCHAIN_FILES=\""$1"\"; BOOTSTRAP_TOOLCHAIN_LIST=\""$2"\"" }' ||
		printf '%s\n' "return 1"`

		deploy "-D" "BOOTSTRAP_CMAKE_TOOLCHAIN_FILE"              "$BOOTSTRAP_TOOLCHAIN_FILES"

		# deploy "-D" "BOOTSTRAP_CMAKE_INSTALL_PREFIX"            "$toolchain_prefix"
		deploy "-D" "BOOTSTRAP_CMAKE_INSTALL_PREFIX"              "/$INSTALL_PREFIX"
		deploy "-D" "BOOTSTRAP_CMAKE_INSTALL_RPATH:PATH"          "XORIGIN/../lib/llvm/$version_target"

		deploy "-D" "BOOTSTRAP_CMAKE_C_COMPILER_LAUNCHER"         "/usr/bin/ccache"
		deploy "-D" "BOOTSTRAP_CMAKE_CXX_COMPILER_LAUNCHER"       "/usr/bin/ccache"

		# deploy "-D" "BOOTSTRAP_LLVM_CCACHE_BUILD"               "OFF"
		# deploy "-D" "BOOTSTRAP_LLVM_CCACHE_BUILD"               "ON"

		deploy "-D" "BOOTSTRAP_CMAKE_BUILD_TYPE"                  "Release"
		# deploy "-D" "BOOTSTRAP_LLVM_DISABLE_ABI_BREAKING_CHECKS_ENFORCING:INTERNAL" "1"
		# deploy "-D" "BOOTSTRAP_CLANG_RESOURCE_DIR:STRING"       "../lib/clang/$version_system"
		# deploy "-D" "BOOTSTRAP_CLANG_RESOURCE_DIR:STRING"       "../lib/clang/$version_target" "permanent"
		deploy "-D" "BOOTSTRAP_CLANG_RESOURCE_DIR:STRING"         "../lib/clang/$version_system" "permanent"
		# deploy "-D" "BOOTSTRAP_COMPILER_RESOURCE_DIR:STRING"    "$RESOURCE_DIR"
		# deploy "-D" "BOOTSTRAP_COMPILER_RESOURCE_DIR:STRING"    "$DESTDIR/$INSTALL_PREFIX/lib/clang/$version_target" "permanent"
		deploy "-D" "BOOTSTRAP_COMPILER_RESOURCE_DIR:STRING"      "$RESOURCE_DIR" "permanent"

		# deploy "-D" "BOOTSTRAP_CMAKE_C_FLAGS"                   "$cflags"
		# deploy "-D" "BOOTSTRAP_CMAKE_C_FLAGS"                   "\$ENV{RUNTIMES_TARGET_CMAKE_C_FLAGS}"
		deploy "-D" "BOOTSTRAP_CMAKE_C_FLAGS"                     "$RUNTIMES_TARGET_CMAKE_C_FLAGS"

		# deploy "-D" "BOOTSTRAP_CMAKE_ASM_FLAGS"                 "$cflags"
		# deploy "-D" "BOOTSTRAP_CMAKE_ASM_FLAGS"                 "\$ENV{RUNTIMES_TARGET_CMAKE_C_FLAGS}"
		deploy "-D" "BOOTSTRAP_CMAKE_ASM_FLAGS"                   "$RUNTIMES_TARGET_CMAKE_C_FLAGS"

		# deploy "-D" "BOOTSTRAP_CMAKE_CXX_FLAGS"                 "$cxxflags"
#       deploy "-D" "BOOTSTRAP_CMAKE_CXX_FLAGS" "\
# -isystem $toolchain_prefix/include/c++/v1 \
# $RUNTIMES_TARGET_CMAKE_CXX_FLAGS"
		deploy "-D" "BOOTSTRAP_CMAKE_CXX_FLAGS" "\
-isystem $SYSROOT/$INSTALL_PREFIX/include/$LLVM_TARGET_TRIPLE/c++/v1 \
-isystem $SYSROOT/$INSTALL_PREFIX/include/c++/v1 \
$RUNTIMES_TARGET_CMAKE_CXX_FLAGS"

		deploy "-D" "_BOOTSTRAP_DEFAULT_PASSTHROUGH" \
			"CMAKE_C_FLAGS;CMAKE_CXX_FLAGS;CMAKE_ASM_FLAGS;${_BOOTSTRAP_DEFAULT_PASSTHROUGH-}"
		deploy "-D" "BOOTSTRAP_CLANG_BOOTSTRAP_PASSTHROUGH" \
			"LLVM_CMAKE_DIR;LLVM_DIR;CMAKE_C_FLAGS;CMAKE_CXX_FLAGS;CMAKE_ASM_FLAGS;${CLANG_BOOTSTRAP_PASSTHROUGH-}"

		deploy "-D" "BOOTSTRAP_KISS_ROOT:PATH"                    "$KISS_ROOT"
		deploy "-D" "BOOTSTRAP_LLVM_DEFAULT_TARGET_TRIPLE:STRING" "$LLVM_TARGET_TRIPLE"
		deploy "-D" "BOOTSTRAP_CMAKE_C_COMPILER_TARGET:STRING"    "$LLVM_TARGET_TRIPLE"
		deploy "-D" "BOOTSTRAP_CMAKE_CXX_COMPILER_TARGET:STRING"  "$LLVM_TARGET_TRIPLE"
		deploy "-D" "BOOTSTRAP_LLVM_RUNTIME_TARGETS"              "$LLVM_TARGET_TRIPLE"
		deploy "-D" "BOOTSTRAP_LLVM_ENABLE_LTO:STRING"            "Thin"
		deploy "-D" "BOOTSTRAP_LLVM_ENABLE_RUNTIMES:STRING"       "$runtimes"
		deploy "-D" "BOOTSTRAP_LLVM_HOST_TRIPLE:STRING"           "$(cc -dumpmachine)"
		deploy "-D" "BOOTSTRAP_LLVM_TARGET_ARCH:STRING"           "$TARGET_ARCH"
		deploy "-D" "BOOTSTRAP_LLVM_BUILD_LLVM_DYLIB"             "OFF"
		deploy "-D" "BOOTSTRAP_LLVM_LINK_LLVM_DYLIB"              "OFF"
		# Otherwise llvm needs gold
		deploy "-D" "BOOTSTRAP_LLVM_ENABLE_LLD"                   "ON"
		deploy "-D" "BOOTSTRAP_LLVM_BUILD_RUNTIMES"               "ON"

		# deploy "-D" "BOOTSTRAP_LLVM_RUNTIMES_BUILD"               "OFF"
		deploy "-D" "BOOTSTRAP_LLVM_RUNTIMES_BUILD"               "ON"
		# deploy "-D" "BOOTSTRAP_COMPILER_RT_STANDALONE_BUILD"      "ON"
		deploy "-D" "BOOTSTRAP_COMPILER_RT_STANDALONE_BUILD"      "OFF"

		deploy "-D" "BOOTSTRAP_COMPILER_RT_DEFAULT_TARGET_TRIPLE" "$LLVM_TARGET_TRIPLE"
		deploy "-D" "BOOTSTRAP_LLVM_LIBGCC_EXPLICIT_OPT_IN:BOOL"  "Yes"
		deploy "-D" "BOOTSTRAP_COMPILER_RT_BUILD_BUILTINS:BOOL"   "OFF"

		deploy "-D" "BOOTSTRAP_LLVM_BUILD_TESTS"                  "OFF"
		deploy "-D" "BOOTSTRAP_LLVM_INCLUDE_TESTS"                "ON"
		deploy "-D" "BOOTSTRAP_ALLOW_DUPLICATE_CUSTOM_TARGETS"    "ON"
		deploy "-D" "BOOTSTRAP_LLVM_TOOL_COMPILER_RT_BUILD"       "OFF"
		deploy "-D" "BOOTSTRAP_LLVM_BUILD_EXTERNAL_COMPILER_RT"   "OFF"
		deploy "-D" "BOOTSTRAP_HAVE_FCNTL_H:INTERNAL"  "1"
		deploy "-D" "BOOTSTRAP_HAVE_UNISTD_H:INTERNAL" "1"

		# https://llvm.org/docs/OpaquePointers.html
		# deploy "-D" "BOOTSTRAP_CLANG_ENABLE_OPAQUE_POINTERS" "OFF"
		# deploy "-D" "CLANG_ENABLE_OPAQUE_POINTERS" "OFF"

		if [ "$POLLY_ENABLE_GPGPU_CODEGEN" = "ON" ]; then
			deploy "-D" "BOOTSTRAP_LLVM_TARGETS_TO_BUILD:STRING"  "host;AMDGPU;NVPTX"
		else
			# deploy "-D" "BOOTSTRAP_LLVM_TARGETS_TO_BUILD:STRING"      "host;AMDGPU"
			deploy "-D" "BOOTSTRAP_LLVM_TARGETS_TO_BUILD:STRING"  "host"
		fi

		deploy "-D" "BOOTSTRAP_LLVM_EXPERIMENTAL_TARGETS_TO_BUILD:STRING"  "$LLVM_TARGETS_TO_BUILD"
		deploy "-D" "BOOTSTRAP_LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default" "ON"
		deploy "-D" "BOOTSTRAP_LLVM_ENABLE_PER_TARGET_RUNTIME_DIR"         "ON"
		deploy "-D" "BOOTSTRAP_COMPILER_RT_DEFAULT_TARGET_ARCH"            "$libname"

		deploy "-D" "BOOTSTRAP_CMAKE_SYSTEM_NAME"      "$($KISS_ROOT/usr/bin/uname)"
		deploy "-D" "BOOTSTRAP_CMAKE_HOST_SYSTEM_NAME" "$(/usr/bin/uname)"

		deploy "-D" "BOOTSTRAP_LLVM_NATIVE_TOOL_DIR"   "$NATIVE_DIR/$INSTALL_PREFIX/bin"

		# deploy "-D" "BOOTSTRAP_LIBCXX_ENABLE_ASSERTIONS:BOOL" "ON"
		deploy "-D" "BOOTSTRAP_LIBCXX_HARDENING_MODE:STRING"      "$LIBCXX_HARDENING_MODE"

		deploy "-D" "BOOTSTRAP_CLANG_DEFAULT_LINKER:STRING"       "ld.lld"

		deploy "-D" "BOOTSTRAP_CROSS_TOOLCHAIN_FLAGS_LLVM_NATIVE" "\
-D LLVM_DIR=$OUTPUT_DIR/NATIVE/lib/cmake/llvm; \
-D CMAKE_C_FLAGS=$cflags; \
-D CMAKE_CXX_FLAGS=$cxxflags; \
-D CMAKE_CPP_FLAGS=$cxxflags; \
-D LLVM_NATIVE_TOOL_DIR=$LLVM_NATIVE_TOOL_DIR; \
-D LLVM_CONFIG_PATH=$LLVM_NATIVE_TOOL_DIR/llvm-config; \
-D LLVM_TABLEGEN=$LLVM_NATIVE_TOOL_DIR/llvm-tblgen; \
-D CLANG_TABLEGEN=$LLVM_NATIVE_TOOL_DIR/clang-tblgen; \
-D LIBCXX_HARDENING_MODE:STRING=$LIBCXX_HARDENING_MODE; \
-D CLANG_DEFAULT_LINKER:STRING=ld.lld; \
-D LD_LIBRARY_PATH=$NATIVE_LD_LIBRARY_PATH; \
-D CMAKE_EXE_LINKER_FLAGS:STRING=$LDFLAGS; \
-D CMAKE_MODULE_LINKER_FLAGS:STRING=$LDFLAGS; \
-D CMAKE_SHARED_LINKER_FLAGS:STRING=$LDFLAGS; \
-D CMAKE_BUILD_TYPE=Release; \
-D CLANG_VERSION=$version_target; \
-D CMAKE_SYSROOT_COMPILE=$KISS_ROOT; \
-D CMAKE_SYSROOT=$KISS_ROOT; \
-D _CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES_INIT=; \
-D LLDB_ENABLE_PYTHON:INTERNAL=0 \
"
	# -D LIBCXX_ENABLE_ASSERTIONS:BOOL=ON; \
	# -D LLVM_DISABLE_ABI_BREAKING_CHECKS_ENFORCING:INTERNAL=1; \
	# -D LD_LIBRARY_PATH=$( \
	#   path_prepend LD_LIBRARY_PATH "$KISS_ROOT/$INSTALL_PREFIX/lib"
	#   path_prepend LD_LIBRARY_PATH "$DESTDIR/$INSTALL_PREFIX/lib"
	#   path_prepend LD_LIBRARY_PATH "$DESTDIR/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE"
	#   path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/lib"
	#   path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE"
	#   path_prepend LD_LIBRARY_PATH "$NATIVE_DIR/$INSTALL_PREFIX/lib"
	#   path_prepend LD_LIBRARY_PATH "$NATIVE_DIR/$INSTALL_PREFIX/lib/$LLVM_TARGET_TRIPLE"
	#   path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/NATIVE/lib"
	#   path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/NATIVE/lib/$LLVM_TARGET_TRIPLE"
	#   printf '%s' "$LD_LIBRARY_PATH"
	#   ) \
	# "
		[ ! -z "${toolchain_prefix:+x}" ] &&
		[ -z "${toolchain_prefix##*"$DESTDIR"*}" ] && {
			deploy "-D" "BOOTSTRAP_LLVM_TOOLS_BINARY_DIR:PATH"    "$toolchain_prefix/bin"
			# deploy "-D" "BOOTSTRAP_LLVM_NATIVE_TOOL_DIR"        "$toolchain_prefix/bin"
			deploy "-D" "BOOTSTRAP_LLVM_TABLEGEN"                 "$toolchain_prefix/bin/llvm-tblgen"
			deploy "-D" "BOOTSTRAP_LLVM_CONFIG_PATH"              "$toolchain_prefix/bin/llvm-config"
			deploy "-D" "BOOTSTRAP_CLANG_TABLEGEN"                "$toolchain_prefix/bin/clang-tblgen"
		} || {
			deploy "-D" "BOOTSTRAP_LLVM_TOOLS_BINARY_DIR:PATH"    "$OUTPUT_DIR/bin"
			deploy "-D" "BOOTSTRAP_LLVM_CONFIG_PATH"              "$toolchain_prefix/bin/llvm-config"
			# For bypassing llvm-tblgen and clang-tblgen
			# LLVM_NATIVE_TOOL_DIR
			# LLVM_TABLEGEN
			// war '$PATH' "$PATH"
			// war '$LLVM_TABLEGEN' "${LLVM_TABLEGEN-}"
			# deploy "-D" "BOOTSTRAP_LLVM_NATIVE_TOOL_DIR" "$OUTPUT_DIR/bin"
			[ ! -z "${LLVM_TABLEGEN:+x}" ] &&
			[ -z "${LLVM_TABLEGEN##*"$OUTPUT_DIR"*}" ] && {
				# deploy "-D" "BOOTSTRAP_LLVM_NATIVE_TOOL_DIR"    "$OUTPUT_DIR/bin"
				deploy "-D" "BOOTSTRAP_LLVM_TOOLS_BINARY_DIR:PATH" "$OUTPUT_DIR/bin"
				# deploy "-D" "BOOTSTRAP_LLVM_CONFIG_PATH"        "$OUTPUT_DIR/bin/llvm-config"
				deploy "-D" "BOOTSTRAP_LLVM_TABLEGEN:STRING"      "$OUTPUT_DIR/bin/llvm-tblgen"
			} || {
				# deploy "-D" "BOOTSTRAP_LLVM_TABLEGEN:STRING" "/$INSTALL_PREFIX/bin/llvm-tblgen"
				# deploy "-D" "BOOTSTRAP_LLVM_CONFIG_PATH"     "$OUTPUT_DIR/bin/llvm-config"
				# [ -f "$OUTPUT_DIR/bin/llvm-config" ] || {
				#   [ -f "$DESTDIR/$INSTALL_PREFIX/bin/llvm-config" ] &&
				#   deploy "-D" "BOOTSTRAP_LLVM_CONFIG_PATH" "$DESTDIR/$INSTALL_PREFIX/bin/llvm-config" ||
				#   deploy "-D" "BOOTSTRAP_LLVM_CONFIG_PATH" "/$INSTALL_PREFIX/bin/llvm-config"
				# }
				:
			}

			// war '$LLVM_CONFIG_PATH' "${LLVM_CONFIG_PATH-}"
			// war '$CLANG_TABLEGEN' "${CLANG_TABLEGEN-}"
			[ ! -z "${CLANG_TABLEGEN:+x}" ] &&
			[ -z "${CLANG_TABLEGEN##*"$OUTPUT_DIR"*}" ] && {
				# deploy "-D" "BOOTSTRAP_LLVM_NATIVE_TOOL_DIR"    "$OUTPUT_DIR/bin"
				deploy "-D" "BOOTSTRAP_CLANG_TABLEGEN:STRING"     "$OUTPUT_DIR/bin/clang-tblgen"
				# deploy "-D" "BOOTSTRAP_CLANG_TABLEGEN_EXE:INTERNAL" "$OUTPUT_DIR/bin/clang-tblgen"
			} || {
				# deploy "-D" "BOOTSTRAP_CLANG_TABLEGEN:STRING" "/$INSTALL_PREFIX/bin/clang-tblgen"
				# deploy "-D" "BOOTSTRAP_CLANG_TABLEGEN_EXE:INTERNAL" "/$INSTALL_PREFIX/bin/clang-tblgen"
				:
			}
			deploy "-D" "BOOTSTRAP_COMPILER_RT_USE_LLVM_UNWINDER:BOOL" "ON"
			deploy "-D" "BOOTSTRAP_ENABLE_LINKER_BUILD_ID:BOOL"   "OFF"

			[ ! -z "${CCACHE_NOHASHDIR+x}" ] &&
			deploy "-D" "BOOTSTRAP_LLVM_CCACHE_PARAMS:STRING"     "CCACHE_CPP2= CCACHE_NOHASHDIR=" ||
			deploy "-D" "BOOTSTRAP_LLVM_CCACHE_PARAMS:STRING"     "CCACHE_CPP2= CCACHE_HASHDIR="

			deploy "-D" "BOOTSTRAP_CMAKE_C_COMPILER:FILEPATH"     "/$INSTALL_PREFIX/lib/ccache/bin/clang"
			deploy "-D" "BOOTSTRAP_CMAKE_ASM_COMPILER:FILEPATH"   "/$INSTALL_PREFIX/lib/ccache/bin/clang"
			deploy "-D" "BOOTSTRAP_CMAKE_CXX_COMPILER:FILEPATH"   "/$INSTALL_PREFIX/lib/ccache/bin/clang++"
			deploy "-D" "BOOTSTRAP_CMAKE_CPP_COMPILER:FILEPATH"   "/$INSTALL_PREFIX/lib/ccache/bin/cpp"
		}

		# deploy "$bstoolchain"
		# If this is a cross, use a toolchain file
		[ -z "${KISS_ROOT:+x}" ] || {
			# "Argument list too long" might not the exact info
			# /usr/bin/ash: /var/db/kiss/lm/underconstruction/llvm/build: sed: Argument list too long
			# /usr/bin/ash: /var/db/kiss/lm/underconstruction/llvm/build: realpath: Argument list too long
			# /usr/bin/ash: eval: /usr/bin/cmake: Argument list too long

			deploy "-D" "BOOTSTRAP_CMAKE_CROSSCOMPILING" "ON"

			! // || / `merge_cache "$crosscompiling_cmake" $TOOLCHAIN_LIST |
				awk -v rs="$RS" -v fs="$FS" 'BEGIN { FS = fs; RS = rs } \
			END { print "BOOTSTRAP_TOOLCHAIN_FILES=\""$1"\"; BOOTSTRAP_TOOLCHAIN_LIST=\""$2"\"" }' ||
			printf '%s\n' "return 1"`

			deploy "-D" "BOOTSTRAP_CMAKE_TOOLCHAIN_FILE"          "$BOOTSTRAP_TOOLCHAIN_FILES"
		}

		# deploy "-D" "CMAKE_ASM_FLAGS" "$cflags"
		# deploy "-D" "CMAKE_CXX_FLAGS" "-fPIC -O3 -gline-tables-only -DNDEBUG"
		# deploy "-D" "CMAKE_C_FLAGS"   "-fPIC -O3 -gline-tables-only -DNDEBUG"

		# deploy "-D" "BOOTSTRAP_DEFAULT_SYSROOT:STRING"          "$SYSROOT"
		deploy "-D" "BOOTSTRAP_DEFAULT_SYSROOT:STRING"            "$KISS_ROOT"
		deploy "-D" "BOOTSTRAP_LLVM_BUILTIN_TARGETS:STRING"       "$LLVM_TARGET_TRIPLE"

		# deploy "-D" "BOOTSTRAP_LIBOMP_CFLAGS" "\${RUNTIMES_TARGET_CMAKE_C_FLAGS}"
		deploy "-D" "BOOTSTRAP_LIBOMP_ASMFLAGS" "${RUNTIMES_TARGET_CMAKE_C_FLAGS}"
		deploy "-D" "BOOTSTRAP_LIBOMP_CXXFLAGS" "\
-isystem $SYSROOT/$INSTALL_PREFIX/include/$LLVM_TARGET_TRIPLE/c++/v1 \
-isystem $SYSROOT/$INSTALL_PREFIX/include/c++/v1 \
$RUNTIMES_TARGET_CMAKE_CXX_FLAGS"
		deploy "-D" "BOOTSTRAP_LIBOMP_CPPFLAGS" "\
-isystem $SYSROOT/$INSTALL_PREFIX/include/$LLVM_TARGET_TRIPLE/c++/v1 \
-isystem $SYSROOT/$INSTALL_PREFIX/include/c++/v1 \
$RUNTIMES_TARGET_CMAKE_CXX_FLAGS"
		deploy "-D" "BOOTSTRAP_LIBOMP_LDFLAGS"  "${BUILTINS_TARGET_CMAKE_LDFLAGS}"
		deploy "-D" "BOOTSTRAP_LIBOMP_LIBFLAGS" "${BUILTINS_TARGET_CMAKE_LDFLAGS}"

		# deploy "-D" "BOOTSTRAP_COMPILER_RT_EMULATOR"            "ON"
		deploy "-D" "BOOTSTRAP_COMPILER_RT_EMULATOR"              "OFF"
		deploy "-D" "BOOTSTRAP_COMPILER_RT_HAS_SANITIZER_COMMON"  "ON"
		deploy "-D" "BOOTSTRAP_BUILD_SHARED_LIBS:BOOL"            "ON"

		deploy "-D" "BOOTSTRAP_CMAKE_EXE_LINKER_FLAGS:STRING"     "$LDFLAGS"
		deploy "-D" "BOOTSTRAP_CMAKE_MODULE_LINKER_FLAGS:STRING"  "$LDFLAGS"
		deploy "-D" "BOOTSTRAP_CMAKE_SHARED_LINKER_FLAGS:STRING"  "$LDFLAGS"

		deploy "-D" "BOOTSTRAP_LLVM_PARALLEL_COMPILE_JOBS"        "$jobs"
		deploy "-D" "BOOTSTRAP_LLVM_PARALLEL_LINK_JOBS"           "1"
		deploy "-D" "BOOTSTRAP_LIBCXX_INCLUDE_TESTS:BOOL"         "ON"

		deploy "-D" "BOOTSTRAP_LIBCXX_ENABLE_STD_MODULES:BOOL"    "ON"

		deploy "-D" "BOOTSTRAP_LIBCXX_CONFIGURE_IDE:BOOL"         "ON"

		deploy "-D" "BOOTSTRAP_LIBUNWIND_ENABLE_SHARED"           "ON"
		deploy "-D" "BOOTSTRAP_CXX_SUPPORTS_FNO_EXCEPTIONS_FLAG:INTERNAL" "1"
		deploy "-D" "BOOTSTRAP_CXX_SUPPORTS_FUNWIND_TABLES_FLAG:INTERNAL" "1"

		deploy "-D" "BOOTSTRAP_LIBCXXABI_STATICALLY_LINK_UNWINDER_IN_STATIC_LIBRARY" "OFF"
		deploy "-D" "BOOTSTRAP_LIBCXXABI_STATICALLY_LINK_UNWINDER_IN_SHARED_LIBRARY" "OFF"

		deploy "-D" "BOOTSTRAP_LIBUNWIND_LINK_FLAGS"              "$LDFLAGS_NO_LIBUNWIND"
		deploy "-D" "BOOTSTRAP_LIBCXXABI_ENABLE_STATIC_UNWINDER"  "OFF"

		[ "$libname" != "x86_64" ] || {
			deploy "-D" "BOOTSTRAP_LIBUNWIND_ADDITIONAL_COMPILE_FLAGS" "${LIBUNWIND_ADDITIONAL_COMPILE_FLAGS}"
			deploy "-D" "BOOTSTRAP_COMPILER_RT_ASAN_SHADOW_SCALE_DEFINITION" "${LIBUNWIND_ADDITIONAL_COMPILE_FLAGS}"
			deploy "-D" "BOOTSTRAP_CAN_TARGET_x86_64"             "ON"
		}

	}

	# bootstrap_options "$toolchain_prefix"

	# Building stage 1 and stage 2...
	stage_twice() {
		_level_2

		STAGE_C_FLAGS="$1"
		export STAGE_C_FLAGS
		// log '$STAGE_C_FLAGS' "$STAGE_C_FLAGS"
		STAGE_CXX_FLAGS="$2"
		export STAGE_CXX_FLAGS
		// log '$STAGE_CXX_FLAGS' "$STAGE_CXX_FLAGS"

		// log 'Building stage 1 and stage 2...'

		deploy "-D" "LLVM_LIBRARY_OUTPUT_INTDIR"       "$OUTPUT_DIR/lib"

		LDFLAGS=" \
-resource-dir=$RESOURCE_DIR \
-L $OUTPUT_DIR/lib/clang/$VERSION_SYSTEM/lib/$LLVM_TARGET_TRIPLE \
-L $OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE \
-L $RESOURCE_DIR/lib/$LLVM_TARGET_TRIPLE \
-L $RESOURCE_DIR/lib/linux \
"
# -L $TOOLCHAIN_PREFIX/lib/$LLVM_TARGET_TRIPLE \
		# [ "$SYSROOT_LIB" = "$DESTDIR/$INSTALL_PREFIX/lib" ] ||
		[ ! -d "$SYSROOT_LIB/$LLVM_TARGET_TRIPLE" ] ||
LDFLAGS="$LDFLAGS \
-L $SYSROOT_LIB/$LLVM_TARGET_TRIPLE \
"

LDFLAGS="$LDFLAGS \
-L $SYSROOT_LIB \
-Wl,-rpath=XORIGIN/../lib/clang/$version_target/lib/$LLVM_TARGET_TRIPLE \
-Wl,-rpath=XORIGIN/../lib/clang/$version_target/lib/linux \
-Wl,-rpath=XORIGIN/../lib/$LLVM_TARGET_TRIPLE \
-Wl,-rpath=XORIGIN/../lib \
$ldflags \
-lc++ \
-lc++abi \
-Wl,-lunwind \
"

#       LDFLAGS="-resource-dir=$RESOURCE_DIR \
# -L $OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE \
# -L $TOOLCHAIN_PREFIX/lib/$LLVM_TARGET_TRIPLE \
# -L $RESOURCE_DIR/lib/linux \
# -L $SYSROOT_LIB \
# -Wl,-rpath='\\\$ORIGIN/../lib/clang/$VERSION_SYSTEM/lib/$LLVM_TARGET_TRIPLE' \
# -Wl,-rpath='\\\$ORIGIN/../lib/clang/$VERSION_SYSTEM/lib/linux' \
# -Wl,-rpath='\\\$ORIGIN/../lib/$LLVM_TARGET_TRIPLE' \
# -Wl,-rpath='\\\$ORIGIN/../lib' \
# $ldflags \
# -lc++ \
# -lc++abi \
# "
		export LDFLAGS

		# BOOTSTRAP
		deploy "-D" "CLANG_ENABLE_BOOTSTRAP" "ON"
		deploy "-D" "CLANG_BOOTSTRAP_PASSTHROUGH" \
			"CMAKE_INSTALL_PREFIX;CMAKE_VERBOSE_MAKEFILE"
		deploy "-D" "CLANG_BOOTSTRAP_PASSTHROUGH" \
			"LLVM_CMAKE_DIR;LLVM_DIR;CMAKE_C_FLAGS;CMAKE_CXX_FLAGS;CMAKE_ASM_FLAGS;BOOTSTRAP_CMAKE_C_FLAGS;BOOTSTRAP_CMAKE_CXX_FLAGS;BOOTSTRAP_CMAKE_ASM_FLAGS;${CLANG_BOOTSTRAP_PASSTHROUGH-}"

		# deploy "-D" "CMAKE_CXX_COMPILER"     "$CXX"
		deploy "-D" "CMAKE_CXX_COMPILER:FILEPATH"      "/$INSTALL_PREFIX/lib/ccache/bin/clang++"
		deploy "-D" "CMAKE_CPP_COMPILER:FILEPATH"      "/$INSTALL_PREFIX/lib/ccache/bin/cpp"
		# deploy "-D" "CMAKE_C_COMPILER"       "$CC"
		deploy "-D" "CMAKE_C_COMPILER:FILEPATH"        "/$INSTALL_PREFIX/lib/ccache/bin/clang"
		# deploy "-D" "CMAKE_ASM_COMPILER"     "$CC"
		deploy "-D" "CMAKE_ASM_COMPILER:FILEPATH"      "/$INSTALL_PREFIX/lib/ccache/bin/clang"

		# "-w" disable all warnnings
		#       deploy "-D" "CMAKE_ASM_FLAGS"          "$cflags -lz -w"
		# deploy "-D" "CMAKE_ASM_FLAGS"                "-lz -w"
		deploy "-D" "CMAKE_ASM_FLAGS"                  "$STAGE_C_FLAGS -lz"
		# deploy "-D" "CMAKE_ASM_FLAGS"                "-lz -w \$CFLAGS"

		#       deploy "-D" "CMAKE_CXX_FLAGS"          "$cxxflags -lz -w"
		# -isystem $DESTDIR/$INSTALL_PREFIX/include/c++/v1 \
		# deploy "-D" "CMAKE_CXX_FLAGS"                "-lz -w"
		deploy "-D" "CMAKE_CXX_FLAGS"                  "$STAGE_CXX_FLAGS -lz"
		# deploy "-D" "CMAKE_CXX_FLAGS"                "-lz -w -isystem $DESTDIR/$INSTALL_PREFIX/include/c++/v1 \$CXXFLAGS"

		#       deploy "-D" "CMAKE_C_FLAGS"            "$cflags -lz -w"
		# deploy "-D" "CMAKE_C_FLAGS"                  "-lz -w"
		deploy "-D" "CMAKE_C_FLAGS"                    "$STAGE_C_FLAGS -lz"
		# deploy "-D" "CMAKE_C_FLAGS"                    "-lz -w \$CFLAGS"

		deploy "-D" "KISS_ROOT"                        "$KISS_ROOT"
		# deploy "-D" "LLVM_TARGET_ARCH"               "host"
		deploy "-D" "LLVM_TARGET_ARCH"                 "$TARGET_ARCH"
		deploy "-D" "LLVM_NATIVE_ARCH"                 "host"
		deploy "-D" "LLVM_ENABLE_ZSTD"                 "OFF"
		# deploy "-D" "LLVM_ENABLE_LTO"        "OFF"
		# deploy "-D" "LLVM_ENABLE_RUNTIMES"   "$runtimes"

		# deploy "-S" "$MAKE_DIR/llvm"
		# eval "$CMAKE $CMAKE_OPTIONS" 2>&1 || kill 0
		# cmake --build   "$OUTPUT_DIR"
		# cmake --install "$OUTPUT_DIR"
		# find $OUTPUT_DIR -mindepth 1 -maxdepth 1 -exec \rm -rf {} +

		deploy "-D" "CMAKE_EXE_LINKER_FLAGS:STRING"    "$LDFLAGS"
		deploy "-D" "CMAKE_MODULE_LINKER_FLAGS:STRING" "$LDFLAGS"
		deploy "-D" "CMAKE_SHARED_LINKER_FLAGS:STRING" "$LDFLAGS"

		# -D CMAKE_STATIC_LINKER_FLAGS:STRING="$ldflags" \

		# Hardcoded in the following file
		# llvm-project/llvm/runtimes/CMakeLists.txt
		# -D LLVM_ENABLE_PER_TARGET_RUNTIME_DIR=ON \
		# When LLVM_DEFAULT_TARGET_TRIPLE is x86_64-linux-musl,
		# lib/clang/15/lib/libclang_rt.builtins-x86_64.a
		# is moved to
		# lib/clang/15/lib/$LLVM_DEFAULT_TARGET_TRIPLE/libclang_rt.builtins.a
		# Calling command in cmake/Modules/HandleCompilerRT.cmake
		# COMMAND ${clang_command} "${cmd_prefix}--rtlib=compiler-rt" "${cmd_prefix}-print-libgcc-file-name"
		# compiler-rt/lib/builtins/CMakeLists.txt

		# -D LIBCXX_COMPILE_FLAGS="$LIBCXX_COMPILE_FLAGS" \

		# // stage_twice "$STAGE_C_FLAGS" "$STAGE_CXX_FLAGS"
		# build_target="stage2-install-distribution"
		# BUILD_PREFIX="$OUTPUT_DIR/tools/clang/stage2-bins"

		# deploy "-D" "LLVM_ENABLE_ASSERTIONS"         "ON"
		deploy "-D" "LLVM_ENABLE_ASSERTIONS"           "OFF"
		deploy "-D" "LIBCXX_HARDENING_MODE:STRING"     "$LIBCXX_HARDENING_MODE"

	}

	# else
	# Building stage 2 only...
	stage_once() {
		_level_2

		STAGE_C_FLAGS="$1"
		export STAGE_C_FLAGS
		// log '$STAGE_C_FLAGS' "$STAGE_C_FLAGS"
		STAGE_CXX_FLAGS="$2"
		export STAGE_CXX_FLAGS
		// log '$STAGE_CXX_FLAGS' "$STAGE_CXX_FLAGS"

		LDFLAGS=" \
-resource-dir=$RESOURCE_DIR \
-L $OUTPUT_DIR/lib/clang/$VERSION_SYSTEM/lib/$LLVM_TARGET_TRIPLE \
-L $OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE \
-L $RESOURCE_DIR/lib/$LLVM_TARGET_TRIPLE \
-L $RESOURCE_DIR/lib/linux \
"
# -L $TOOLCHAIN_PREFIX/lib/$LLVM_TARGET_TRIPLE \
		# [ "$SYSROOT_LIB" = "$DESTDIR/$INSTALL_PREFIX/lib" ] ||
		[ ! -d "$SYSROOT_LIB/$LLVM_TARGET_TRIPLE" ] ||
			LDFLAGS="$LDFLAGS \
-L $SYSROOT_LIB/$LLVM_TARGET_TRIPLE \
"

		LDFLAGS="$LDFLAGS \
-L $SYSROOT_LIB \
-Wl,-rpath=XORIGIN/../lib/clang/$version_target/lib/$LLVM_TARGET_TRIPLE \
-Wl,-rpath=XORIGIN/../lib/clang/$version_target/lib/linux \
-Wl,-rpath=XORIGIN/../lib/$LLVM_TARGET_TRIPLE \
-Wl,-rpath=XORIGIN/../lib \
$ldflags \
-lc++ \
-lc++abi \
-Wl,-lunwind \
"

#       LDFLAGS="-resource-dir=$RESOURCE_DIR \
# -L $OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE \
# -L $TOOLCHAIN_PREFIX/lib/$LLVM_TARGET_TRIPLE \
# -L $RESOURCE_DIR/lib/linux \
# -L $SYSROOT_LIB \
# -Wl,-rpath='\\\$ORIGIN/../lib/clang/$VERSION_SYSTEM/lib/$LLVM_TARGET_TRIPLE' \
# -Wl,-rpath='\\\$ORIGIN/../lib/clang/$VERSION_SYSTEM/lib/linux' \
# -Wl,-rpath='\\\$ORIGIN/../lib/$LLVM_TARGET_TRIPLE' \
# -Wl,-rpath='\\\$ORIGIN/../lib' \
# $ldflags \
# -lc++ \
# -lc++abi \
# "
		export LDFLAGS

		# echo "Building stage 2 only..."
		// log '$bootstrap' "$bootstrap"
		// log 'Building stage 2 only...'

		[ -f "$MAKE_DIR/files/distribution-stage2.cmake" ] ||
			// die 'file' "'$MAKE_DIR/files/distribution-stage2.cmake' does not exist"
		deploy "-C" "$MAKE_DIR/files/distribution-stage2.cmake"

		# deploy "-D" "CMAKE_CXX_COMPILER"     "$CXX"
		deploy "-D" "CMAKE_CXX_COMPILER:FILEPATH"      "/$INSTALL_PREFIX/lib/ccache/bin/clang++"
		deploy "-D" "CMAKE_CPP_COMPILER:FILEPATH"      "/$INSTALL_PREFIX/lib/ccache/bin/cpp"
		# deploy "-D" "CMAKE_C_COMPILER"       "$CC"
		deploy "-D" "CMAKE_C_COMPILER:FILEPATH"        "/$INSTALL_PREFIX/lib/ccache/bin/clang"
		# deploy "-D" "CMAKE_ASM_COMPILER"     "$CC"
		deploy "-D" "CMAKE_ASM_COMPILER:FILEPATH"      "/$INSTALL_PREFIX/lib/ccache/bin/clang"


		deploy "-D" "CMAKE_C_FLAGS:STRING"             "$cflags"
		deploy "-D" "CMAKE_C_FLAGS_RELEASE"            "$cflags"
		deploy "-D" "CMAKE_CXX_FLAGS:STRING"           "$cxxflags"
		deploy "-D" "CMAKE_CXX_FLAGS_RELEASE"          "$cxxflags"
		deploy "-D" "CMAKE_ASM_FLAGS:STRING"           "$cflags"
		deploy "-D" "CMAKE_ASM_FLAGS_RELEASE"          "$cflags"

		# deploy "$toolchain"
		# If this is a cross-build, use a toolchain file
		[ -z "${KISS_ROOT:+x}" ] || {
			deploy "-D" "CMAKE_CROSSCOMPILING"         "ON"

			! // || / `merge_cache "$crosscompiling_cmake" $TOOLCHAIN_LIST |
				awk -v rs="$RS" -v fs="$FS" 'BEGIN { FS = fs; RS = rs } \
			END { print "TOOLCHAIN_FILES=\""$1"\"; TOOLCHAIN_LIST=\""$2"\"" }' ||
			printf '%s\n' "return 1"`

			deploy "-D" "CMAKE_TOOLCHAIN_FILE" "$TOOLCHAIN_FILES"
		}

		if [ "$POLLY_ENABLE_GPGPU_CODEGEN" = "ON" ]; then
			deploy "-D" "LLVM_TARGETS_TO_BUILD:STRING" "host;AMDGPU;NVPTX"
		else
			deploy "-D" "LLVM_TARGETS_TO_BUILD:STRING" "host;AMDGPU"
			# deploy "-D" "BOOTSTRAP_LLVM_TARGETS_TO_BUILD:STRING"      "host"
		fi

		deploy "-D" "LLVM_EXPERIMENTAL_TARGETS_TO_BUILD:STRING" "$LLVM_TARGETS_TO_BUILD"

		# deploy "-D" "LLVM_ENABLE_ASSERTIONS"         "ON"
		deploy "-D" "LLVM_ENABLE_ASSERTIONS"           "OFF"
		deploy "-D" "LIBCXX_HARDENING_MODE:STRING"     "$LIBCXX_HARDENING_MODE"
		# deploy "-D" "LLVM_ENABLE_LTO"                "OFF"
		deploy "-D" "LLVM_ENABLE_LTO"                  "Thin"
		deploy "-D" "LLVM_ENABLE_RUNTIMES"             "$runtimes"
		# https://groups.google.com/g/polly-dev/c/vxumPMhrSEs
		deploy "-D" "LLVM_LINK_LLVM_DYLIB"             "OFF"
		# deploy "-D" "CMAKE_EXE_LINKER_FLAGS:STRING"  "$ldflags"
		deploy "-D" "CMAKE_EXE_LINKER_FLAGS:STRING"    "$LDFLAGS"
		# deploy "-D" "CMAKE_MODULE_LINKER_FLAGS:STRING" "$ldflags"
		deploy "-D" "CMAKE_MODULE_LINKER_FLAGS:STRING" "$LDFLAGS"
		# deploy "-D" "CMAKE_SHARED_LINKER_FLAGS:STRING" "$ldflags"
		deploy "-D" "CMAKE_SHARED_LINKER_FLAGS:STRING" "$LDFLAGS"
		deploy "-D" "KISS_ROOT"                        "$KISS_ROOT"

		# deploy "-D" "CMAKE_ASM_COMPILER:FILEPATH"    "$CC"

		# /working/toolchain/llvm/official/runtimes/CMakeLists.txt
		deploy "-D" "CMAKE_REQUIRED_FLAGS"             "${CMAKE_REQUIRED_FLAGS-} --sysroot=${KISS_ROOT}"
		# deploy "-D" "CMAKE_REQUIRED_FLAGS"           "${CMAKE_REQUIRED_FLAGS-}"


		deploy "-D" "LLVM_TARGET_ARCH"                 "$TARGET_ARCH"
		deploy "-D" "LLVM_ENABLE_ZSTD"                 "ON"
		# deploy "-D" "LLVM_NATIVE_ARCH"               "$TARGET_ARCH"
		# llvm/cmake/config-ix.cmake
		deploy "-D" "LLVM_NATIVE_ARCH"                 "host"

		# -D CMAKE_STATIC_LINKER_FLAGS:STRING="$ldflags" \
		# -D LLVM_ENABLE_RUNTIMES=all

		# Hardcoded in the following file
		# /working/toolchain/llvm/llvm-project/llvm/runtimes/CMakeLists.txt
		# -D LLVM_ENABLE_PER_TARGET_RUNTIME_DIR=ON \

		# -D LIBCXX_COMPILE_FLAGS="$LIBCXX_COMPILE_FLAGS" \
		# -D LLVM_ENABLE_PROJECTS="clang;clang-tools-extra;libclc;lld;lldb;mlir;polly;pstl" \

		# stage_once "$STAGE_C_FLAGS" "$STAGE_CXX_FLAGS"
		# build_target="install-distribution"
		# BUILD_PREFIX="$OUTPUT_DIR"

	}

	# fi

	stage_route() {
		_level_2
		local toolchain_prefix="$1"
		shift 1
		local use_intermediate="$1"
		shift 1

		local STAGE_C_FLAGS="${1-"$STAGE_C_FLAGS"}"
		// log '$STAGE_C_FLAGS' "$STAGE_C_FLAGS"
		local STAGE_CXX_FLAGS="${2-"$STAGE_CXX_FLAGS"}"
		// log '$STAGE_CXX_FLAGS' "$STAGE_CXX_FLAGS"

		# local runtimes_individual="true"

		# clean_objects "$source"

		# rsync -aq "$runtimes_cmake" "$runtimes_cmake.copy"
		# rsync -aq "$builtins_cmake" "$builtins_cmake.copy"

		# // determine_target &&
		// common_options_init "$toolchain_prefix"

		# deploy "-S" "$MAKE_DIR/llvm"
		# eval "$CMAKE $CMAKE_OPTIONS" 2>&1 || kill 0
		#
		# CMAKE_OPTIONS="$CMAKE \\$newline"

		# CMAKE_OPTIONS="$CMAKE \\$newline"

		# deploy "-G" "\"$GENERATOR_TYPE\""
		# deploy "-B" "\"$OUTPUT_DIR\""

		# deploy "-C" "\"$MAKE_DIR/cache.cmake\""
		# deploy "-D" "CMAKE_INSTALL_PREFIX:PATH" "$toolchain_prefix"

		# Reference
		# deploy "-C" "clang/cmake/caches/DistributionExample.cmake"

		# eval "$CMAKE $CMAKE_OPTIONS" 2>&1 || kill 0
		# CMAKE_OPTIONS="$CMAKE \\$newline"

		[ -z "${use_intermediate:+x}" ] ||
			// runtimes_use_intermediate "$toolchain_prefix"

		[ "${bootstrap-}" -ne "0" ] && {
			# Non-bootstraping
			# Caches "$MAKE_DIR/files/distribution-stage2.cmake"
			// stage_once "$STAGE_C_FLAGS" "$STAGE_CXX_FLAGS"
			build_target="install-distribution"
			# BUILD_PREFIX="$OUTPUT_DIR"
		} || {
			# Bootstraping
			# Caches "$MAKE_DIR/files/distribution.cmake"
			// bootstrap_options "$toolchain_prefix"
			// stage_twice "$STAGE_C_FLAGS" "$STAGE_CXX_FLAGS"
			build_target="stage2-install-distribution"
			# BUILD_PREFIX="$OUTPUT_DIR/tools/clang/stage2-bins"

			# deploy "-D" "CMAKE_C_COMPILER:FILEPATH"   "/$INSTALL_PREFIX/lib/ccache/bin/clang"
			# deploy "-D" "CMAKE_ASM_COMPILER:FILEPATH" "/$INSTALL_PREFIX/lib/ccache/bin/clang"
			# deploy "-D" "CMAKE_CXX_COMPILER:FILEPATH" "/$INSTALL_PREFIX/lib/ccache/bin/clang++"

			# deploy "-D" "CMAKE_C_COMPILER"            "$CC"
			# deploy "-D" "CMAKE_ASM_COMPILER"          "$CC"
			# deploy "-D" "CMAKE_CXX_COMPILER"          "$CXX"

			# deploy "-D" "CMAKE_C_FLAGS:STRING"        "$cflags"
			# deploy "-D" "CMAKE_ASM_FLAGS:STRING"      "$cflags"
			# deploy "-D" "CMAKE_CXX_FLAGS:STRING"      "$cxxflags"

		}

		BUILD_PREFIX="$OUTPUT_DIR/tools/clang/$build_target-bins"

		// log 'literal: $CMAKE_C_COMPILER'             "$CMAKE_C_COMPILER"
		// log 'literal: $CMAKE_ASM_COMPILER'           "$CMAKE_ASM_COMPILER"
		// log 'literal: $CMAKE_CXX_COMPILER'           "$CMAKE_CXX_COMPILER"
		// log '$CMAKE_C_COMPILER'                      "$(which clang)"
		// log '$CMAKE_CXX_COMPILER'                    "$(which clang++)"

		# [ -z "${use_intermediate:+x}" ] ||
		// runtimes_use_intermediate_flags "$toolchain_prefix"
		# // runtimes_use_intermediate_flags "$toolchain_prefix" "$runtimes_individual"

		# deploy "-C" "runtimes.cmake"
		# write_to_file "$runtimes_cmake" "$builtins_flags_list"
		deploy "-C" "$runtimes_cmake"
		deploy "-C" "$builtins_cmake"
	}

	stage_route "$TOOLCHAIN_PREFIX" "" "${STAGE_C_FLAGS-}" "${STAGE_CXX_FLAGS-}"

	# [ -f "$DESTDIR/$INSTALL_PREFIX/bin/llvm-ar" ] ||
	# {
	#   // llvm_bootstrap
	#   # // clang_bootstrap
	#   // build_runtimes "$toolchain_prefix"
	#   # // build_clang_individually_twice
	# }


	regenerate() {
		_level_2
		local source="$1"
		[ ! -z "${source:+x}" ] || // die '$source' "is empty"
		shift 1
		clean_objects "$source"

		local toolchain_prefix="$1"
		shift 1

		# use_intermediate="false"
		use_intermediate=""
		[ "$toolchain_prefix" != "$DESTDIR/$INSTALL_PREFIX" ] ||
			use_intermediate="use_intermediate"

		[ "$#" -eq "2" ] && {
			STAGE_C_FLAGS="$1"
			STAGE_CXX_FLAGS="$2"
		} ||
			regenerate_stage_flags

		stage_route "$toolchain_prefix" "$use_intermediate" "$STAGE_C_FLAGS" "$STAGE_CXX_FLAGS"

		# deploy "-S" "$MAKE_DIR/runtimes"
		# eval "$CMAKE $CMAKE_OPTIONS" 2>&1 || kill 0


		# deploy "-S" "$MAKE_DIR/llvm"
		deploy "-S" "$MAKE_DIR/$source"

		! // || / `merge_cache "$common_cmake" $TOOLCHAIN_LIST |
			awk -v rs="$RS" -v fs="$FS" 'BEGIN { FS = fs; RS = rs } \
		END { print "TOOLCHAIN_FILES=\""$1"\"; TOOLCHAIN_LIST=\""$2"\"" }' ||
		printf '%s\n' "return 1"`

		deploy "-D" "CMAKE_TOOLCHAIN_FILE" "$TOOLCHAIN_FILES"

		# # [ -z "${KISS_DEBUG+x}" ] ||
		# printf "%s\n" "$CMAKE_OPTIONS"
		# [ ! -z "${USER_OUTPUT:+x}" ] || {
		#   : "${KISS_TMPDIR:="/tmp/$(whoami)/kiss"}" && export KISS_TMPDIR
		#   USER_OUTPUT="$KISS_TMPDIR/logs/build.log"
		# }
		# printf "%s\n" "$CMAKE_OPTIONS" >> "$USER_OUTPUT"

		# // log '$CMAKE_OPTIONS' "$CMAKE_OPTIONS"
		// log '$CMAKE $CMAKE_OPTIONS' "performing"
		/ "$CMAKE $CMAKE_OPTIONS" > /dev/null ||
		/ "$CMAKE $CMAKE_OPTIONS" || kill 0

		fix_cmakecxxcompiler "$output_dir"

		# case "$CMAKE_OPTIONS" in
		#   *"\\\$ENV{"*"}"*)
		# This was a bug that kiss did not clear ENV=/usr/bin/kiss in the shell environment, and fixed
		#       # sed replace "\\\$ENV" to "\$ENV" on all CMakeCache.txt
		# esac

	}

	find_target() {
		local result=1

		# Find build target:
		# 1. ninja level: ninja -t targets
		# 2. cmake level: local search_target="$(cmake --build . --target help 2> /dev/null | grep "$target")" || :

		result=$(for item in $( \
			ninja -C "$OUTPUT_DIR" -t targets | grep -v "\/" | awk -F: '{print $1}' | grep "$1"); do
		[ "$item" != "$1" ] || { printf '%d' 0; return 0; }; done; printf '%d' 1; ) || :
		return $result
	}

	in_tree() {
		_level_2
		local target="$1"
		# readonly target
		local source="${2-"llvm"}"
		local use_intermediate="${3-}"
		# local runtimes_individual="${4-}"

		local toolchain_prefix="$TOOLCHAIN_PREFIX"

		[ ! -z "${target##*"-tblgen"}" ] || {
			# Setting environment to tell init scripts which is the correct edition/route
			# local llvm_tblgen_previous="$LLVM_TABLEGEN"
			# export LLVM_TABLEGEN="/$INSTALL_PREFIX/bin/llvm-tblgen"
			# clang-tblgen is version and native(build)/host/target specific
			local clang_tblgen_previous="$CLANG_TABLEGEN"
			# export CLANG_TABLEGEN="/$INSTALL_PREFIX/bin/clang-tblgen"
			export CLANG_TABLEGEN="$OUTPUT_DIR/bin/clang-tblgen"
		}
		# Refrash environment dependencies
		target_flags_updated "$toolchain_prefix" ||
			// builtins_target_flags "$toolchain_prefix"
			# // builtins_target_flags "$toolchain_prefix" "$runtimes_individual"

		[ "$PWD" = "$MAKE_DIR" ] || cd "$MAKE_DIR"

		# [ -z "${use_intermediate:+x}" ] &&
		[ "$(// delegate -- source_dir)" = "$source" ] ||
		#   [ ! -z "${search_target:+x}" ] &&
		#   [ -z "${search_target##*"$target"*}" ] ||
		find_target "$target" || {
			// cue "$target" "configuration and generation [globally]"
			// regenerate "$source" "$toolchain_prefix"
		}

		# // cue "$target" "builtins preparation [globally]"
		# [ "$PWD" = "$MAKE_DIR" ] || cd "$MAKE_DIR"
		# ninja -j $jobs -C "$OUTPUT_DIR" builtins > /dev/null || kill 0

		fix_cmakecxxcompiler "$output_dir"

		// cue "$target" "construction [globally]"
		[ "$PWD" = "$MAKE_DIR" ] || cd "$MAKE_DIR"
		# ! find_target "unwind_shared_objects" ||
		#   ninja -C "$OUTPUT_DIR" unwind_shared_objects
		# ! find_target "unwind_shared" ||
		#   ninja -C "$OUTPUT_DIR" unwind_shared
		# cmake --build "$OUTPUT_DIR" --target "$target" -j $jobs > /dev/null || kill 0
		ninja -j $jobs -C "$OUTPUT_DIR" "$target" > /dev/null ||
		ninja -j $jobs -C "$OUTPUT_DIR" "$target" || kill 0
		# ninja -j $jobs -C "$OUTPUT_DIR" "check-llvm-config" || kill 0
		ninja -C "$OUTPUT_DIR" check-llvm-tools-llvm-config > /dev/null || kill 0
		ninja -j $jobs -C "$OUTPUT_DIR" "check-llvm-tablegen" > /dev/null || kill 0
		ninja -j $jobs -C "$OUTPUT_DIR" "check-clang-tablegen" > /dev/null || kill 0
		# ninja -j $jobs -C "$OUTPUT_DIR" "check-clang" || kill 0

		! find_target "check-$target" ||
		ninja -j $jobs -C "$OUTPUT_DIR" "check-$target" > /dev/null ||
		ninja -j $jobs -C "$OUTPUT_DIR" "check-$target" || kill 0

		# ninja -j $jobs -C "$OUTPUT_DIR" all || kill 0

		// check_clang || // die 'clang' "build invalid targets"

		// cue "$target" "installation [globally]"
		[ "$PWD" = "$MAKE_DIR" ] || cd "$MAKE_DIR"

		local phony_install="install-$target"
		find_target "install-$target" || {
			find_target "$target-install" &&
			phony_install="$target-install" ||
			// die "$target" "neither '$target-install' nor 'install-$target' are available"
		}
		# ninja -j $jobs -C "$OUTPUT_DIR" "install-$target" > /dev/null || {
		# ninja -C "$OUTPUT_DIR" "install-$target" > /dev/null && {
		ninja -C "$OUTPUT_DIR" "$phony_install" > /dev/null && {
			ninja -C "$OUTPUT_DIR" "install"
			[ ! -d "$OUTPUT_DIR/NATIVE/lib" ] ||
				{
					// as_own "$NATIVE_DIR" \
					rsync -aqz "$OUTPUT_DIR/NATIVE/lib/." "$NATIVE_DIR/$INSTALL_PREFIX/lib/" && // as_own "$NATIVE_DIR" sync; }
			[ ! -d "$OUTPUT_DIR/NATIVE/bin" ] ||
				{
					// as_own "$NATIVE_DIR" \
					rsync -aqz "$OUTPUT_DIR/NATIVE/bin/." "$LLVM_NATIVE_TOOL_DIR/" && // as_own "$NATIVE_DIR" sync; }

			local builtins_dest_dir="$DESTDIR/$INSTALL_PREFIX/lib/clang/$version_target/lib/$LLVM_TARGET_TRIPLE"
			[ -f "$builtins_dest_dir/libclang_rt.builtins.a" ] || {
				ninja -C "$OUTPUT_DIR" install-compiler-rt
			}
			[ -f "$builtins_dest_dir/libclang_rt.builtins.a" ] || {
				target_file="$(find "$OUTPUT_DIR" | grep "libclang_rt.builtins.a" | grep "$LLVM_TARGET_TRIPLE")"
				// as_own "$DESTDIR" \
				rsync "${target_file%/*}/." "$builtins_dest_dir/" && // as_own "$DESTDIR" sync
			}
		} ||
		# ninja -C "$OUTPUT_DIR" "install" ||
		{
			[ "$PWD" = "$MAKE_DIR" ] || cd "$MAKE_DIR"
			// cue "$target" "configuration and generation [globally]"
			// regenerate "$source" "$toolchain_prefix"
			// cue "$target" "installation [globally again]"
			#
			# ninja -C "$OUTPUT_DIR" "llvm-tblgen" > /dev/null || kill 0
			# ninja -C "$OUTPUT_DIR" "clang-tblgen" > /dev/null || kill 0
			#
			# file INSTALL cannot find
			# "/tmp/root/kiss/objects/llvm/lib/libLLVMTableGenCommon.so.18git": No such
			# install-LLVMTableGenCommon: phony
			ninja -C "$OUTPUT_DIR" "install-LLVMTableGenCommon" > /dev/null || kill 0
			ninja -C "$OUTPUT_DIR" "libLLVMFuzzerCLI.so" > /dev/null || kill 0

			# # ninja -j $jobs -C "$OUTPUT_DIR" "install-$target" > /dev/null || kill 0
			# ninja -C "$OUTPUT_DIR" "install-$target" > /dev/null || {
			# # ninja -C "$OUTPUT_DIR" "install-$target" || {
			#   # stage2-install
			#   local phony="$(ninja -C "$OUTPUT_DIR" -t targets | grep -v "\/" | grep "${target}-install:" | awk -F ":" '{print $1}')"
			#   [ ! -z "${phony:+x}" ] &&
			#   # ninja -C "$OUTPUT_DIR" "${target}-install"
			#   ninja -C "$OUTPUT_DIR" "$phony" || false
			# } ||
			ninja -C "$OUTPUT_DIR" "$phony_install" > /dev/null ||
			# cmake --install "$OUTPUT_DIR" > /dev/null || kill 0
			ninja -C "$OUTPUT_DIR" "install" > /dev/null ||
			ninja -C "$OUTPUT_DIR" "install" || {
				clean_objects "$source"
				kill 0
			}
		}
		cue '$target' "'$target' installation succeeded"
		[ ! -z "${target##*"-tblgen"}" ] || {
			# export LLVM_TABLEGEN="$llvm_tblgen_previous"
			export CLANG_TABLEGEN="$clang_tblgen_previous"
		}
	}

	clang_in_tree() {
		_level_2
		local toolchain_prefix="$1"
		# local runtimes_individual="${2-}"

		# path_prepend PATH "$OUTPUT_DIR/bin"
		local ld_library_path_previous="$LD_LIBRARY_PATH"
		# path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/lib"
		# path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE"

		local llvm_tblgen_previous="$LLVM_TABLEGEN"
		[ -f "$DESTDIR/$INSTALL_PREFIX/bin/llvm-tblgen" ] &&
			export LLVM_TABLEGEN="$DESTDIR/$INSTALL_PREFIX/bin/llvm-tblgen" ||
			export LLVM_TABLEGEN="$OUTPUT_DIR/bin/llvm-tblgen"

		local clang_tblgen_previous="$CLANG_TABLEGEN"
		[ -f "$DESTDIR/$INSTALL_PREFIX/bin/clang-tblgen" ] &&
			export CLANG_TABLEGEN="$DESTDIR/$INSTALL_PREFIX/bin/clang-tblgen" ||
			export CLANG_TABLEGEN="$OUTPUT_DIR/bin/clang-tblgen"

		target_flags_updated "$toolchain_prefix" ||
			// builtins_target_flags "$toolchain_prefix"
			# // builtins_target_flags "$toolchain_prefix" "$runtimes_individual"

		[ "$PWD" = "$MAKE_DIR" ] || cd "$MAKE_DIR"
		# local search_target="$(cmake --build . --target help 2> /dev/null | grep "clang")" || :

		[ "$(// delegate -- source_dir)" = "llvm" ] ||
			# [ ! -z "${search_target:+x}" ] &&
			# [ -z "${search_target##*"clang"*}" ] ||
		find_target "clang" ||
		{
			// cue "clang" "configuration and generation [globally]"
			// regenerate "llvm" "$toolchain_prefix"
		}
		# // regenerate "llvm"

		fix_cmakecxxcompiler "$output_dir"

		// cue 'llvm-tblgen' "construction"
		cmake --build "$OUTPUT_DIR" --target llvm-tblgen -j $jobs > /dev/null ||
		cmake --build "$OUTPUT_DIR" --target llvm-tblgen -j $jobs || kill 0
		cmake --build "$OUTPUT_DIR" --target install-llvm-tblgen -j $jobs || kill 0
		// cue 'clang-tblgen' "construction"
		cmake --build "$OUTPUT_DIR" --target clang-tblgen -j $jobs > /dev/null ||
		cmake --build "$OUTPUT_DIR" --target clang-tblgen -j $jobs || kill 0
		cmake --build "$OUTPUT_DIR" --target install-clang-tblgen -j $jobs || kill 0
		// cue 'clang' "construction"
		cmake --build "$OUTPUT_DIR" --target clang -j $jobs ||
		cmake --build "$OUTPUT_DIR" --target clang -j $jobs || kill 0
		# ninja -j $jobs -C "$OUTPUT_DIR" check-clang 2>&1 || :

		# ********************
		# Expectedly Failed Tests (24):
		#   Clang :: ARCMT/GC-no-arc-runtime.m
		#   Clang :: ASTMerge/APValue/APValue.cpp
		#   Clang :: ASTMerge/function-cpp/test.cpp
		#   Clang :: Analysis/container-modeling-no-aggressive-binary-operation-simplification-warn.cpp
		#   Clang :: Analysis/iterator-modeling-no-aggressive-binary-operation-simplification-no-crash.cpp
		#   Clang :: Analysis/outofbound-notwork.c
		#   Clang :: Analysis/redecl.c
		#   Clang :: Analysis/string-fail.c
		#   Clang :: CXX/temp/temp.res/temp.dep.res/temp.point/p1.cpp
		#   Clang :: CodeGen/callback_pthread_create.c
		#   Clang :: CodeGen/libcalls-d.c
		#   Clang :: CodeGen/libcalls-ld.c
		#   Clang :: CodeGenCXX/address-space-of-this.cpp
		#   Clang :: CodeGenCXX/conversion-function.cpp
		#   Clang :: CodeGenCXX/cxx20-module-extern-1.cppm
		#   Clang :: CodeGenCXX/sanitize-dtor-trivial.cpp
		#   Clang :: Driver/gfortran.f90
		#   Clang :: FixIt/fixit-pmem.cpp
		#   Clang :: InterfaceStubs/object-double.c
		#   Clang :: PCH/changed-files.c
		#   Clang :: PCH/source-manager-stack.c
		#   Clang :: Parser/cxx-ambig-decl-expr-xfail.cpp
		#   Clang :: SemaCXX/switch-implicit-fallthrough-cxx98.cpp
		#   Clang :: SemaTemplate/instantiate-function-1.mm
		#
		# ********************
		# Failed Tests (11):
		#   Clang :: APINotes/yaml-roundtrip-2.test
		#   Clang :: APINotes/yaml-roundtrip.test
		#   Clang :: Driver/crash-diagnostics-dir-3.c
		#   Clang :: Driver/crash-diagnostics-dir.c
		#   Clang :: Driver/crash-report-clang-cl.cpp
		#   Clang :: Driver/crash-report-header.h
		#   Clang :: Driver/crash-report-spaces.c
		#   Clang :: Driver/crash-report.cpp
		#   Clang :: Driver/emit-reproducer.c
		#   Clang :: Driver/hip-link-bundle-archive.hip
		#   Clang :: Driver/output-file-cleanup.c
		#
		#
		# Testing Time: 293.38s
		#   Skipped          :    35
		#   Unsupported      :  2920
		#   Passed           : 31101
		#   Expectedly Failed:    24
		#   Failed           :    11
		# ninja: job failed: cd /tmp/$LOGNAME/kiss/proc/make/llvm/objects/tools/clang/test && /usr/bin/python3.11 /tmp/$LOGNAME/kiss/proc/make/llvm/objects/./bin/llvm-lit -vv --show-unsupported --show-xfail -j 13 --param USE_Z3_SOLVER=0 /tmp/$LOGNAME/kiss/proc/make/llvm/objects/tools/clang/test

		# runtimes_dir: "$DESTDIR/$INSTALL_PREFIX/lib/clang/18/lib/x86_64-linux-musl"
		// ver_naming "$OUTPUT_DIR/lib/clang" "$version_target" "$version_target_major"
		cmake --build "$OUTPUT_DIR" -j $jobs || kill 0

		! find_target "check-clang" ||
		ninja -j $jobs -C "$OUTPUT_DIR" "check-clang" > /dev/null ||
		ninja -j $jobs -C "$OUTPUT_DIR" "check-clang" || kill 0

		// check_clang || // die 'clang' "build invalid targets"

		cd "$MAKE_DIR"

		// cue 'clang' "installation"
		ninja -j $jobs -C "$OUTPUT_DIR" install-clang > /dev/null || kill 0
		cmake --install "$OUTPUT_DIR" > /dev/null || kill 0

		[ ! -d "$OUTPUT_DIR/NATIVE/lib" ] ||
			{
				// as_own "$NATIVE_DIR" \
				rsync -aqz "$OUTPUT_DIR/NATIVE/lib/." "$NATIVE_DIR/$INSTALL_PREFIX/lib/" && // as_own "$NATIVE_DIR" sync; }
		[ ! -d "$OUTPUT_DIR/NATIVE/bin" ] ||
			{
				// as_own "$NATIVE_DIR" \
				rsync -aqz "$OUTPUT_DIR/NATIVE/bin/." "$LLVM_NATIVE_TOOL_DIR/" && // as_own "$NATIVE_DIR" sync; }

		// ver_naming "$DESTDIR/$INSTALL_PREFIX/lib/clang" "$version_target" "$version_target_major"

		// install_clang_libs && {
			path_prepend LD_LIBRARY_PATH "$TOOLCHAIN_PREFIX/lib"
			path_prepend LD_LIBRARY_PATH "$TOOLCHAIN_PREFIX/lib/$LLVM_TARGET_TRIPLE"
			path_prepend LLVM_TABLEGEN   "$TOOLCHAIN_PREFIX/bin/llvm-tblgen"
			path_prepend CLANG_TABLEGEN  "$TOOLCHAIN_PREFIX/bin/clang-tblgen"
		} || {
			# path_prepend LD_LIBRARY_PATH "$ld_library_path_previous"
			# path_prepend LLVM_TABLEGEN="$llvm_tblgen_previous"
			path_prepend CLANG_TABLEGEN "$clang_tblgen_previous"
		}

		cd "$MAKE_DIR"
	}

	builtins_apply() {
		local toolchain_prefix="$1"
		local sysroot="$(// delegate -- to_sysroot "$toolchain_prefix")"
		local version_system="$(// delegate to_version "$sysroot/$INSTALL_PREFIX")"
		# local toolchain_version="$(// delegate to_version "$toolchain_prefix")"
		# local runtimes_individual="${1-}"
		# local stage_name="${2-}"

		local stage_name="${2-}"

		# [ -f "${BUILD_PREFIX}/bin/clang-tblgen" ] || BUILD_PREFIX="$OUTPUT_DIR"
		// log '$BUILD_PREFIX' "$BUILD_PREFIX"
		// log "\$CFLAGS   of $stage_name stage" "$CFLAGS"
		// log "\$CXXFLAGS of $stage_name stage" "$CXXFLAGS"
		# RESOURCE_DIR_FOR_CHECK="$RESOURCE_DIR"
		# BINDIR_HOST_CHECK="$BINDIR_HOST"

		# clean_objects "llvm"
		# https://github.com/ccache/ccache/issues/806
		export CCACHE_COMPILERTYPE=clang
		# toolchain_prefix="$(// delegate tool_chain "$DESTDIR/$INSTALL_PREFIX" "bin/clang" "bin/clang++")"
		# // tool_chain "$DESTDIR/$INSTALL_PREFIX" "bin/clang" "bin/clang++"
		// tool_chain "$toolchain_prefix" "bin/clang" "bin/clang++"
		[ "$TOOLCHAIN_PREFIX" = "$DESTDIR/$INSTALL_PREFIX" ] ||
			// die '$TOOLCHAIN_PREFIX' "'$TOOLCHAIN_PREFIX' exporting failed"
		target_flags_updated "$toolchain_prefix" ||
			// builtins_target_flags "$toolchain_prefix"
			# // builtins_target_flags "$DESTDIR/$INSTALL_PREFIX" "$runtimes_individual"

		STAGE_C_FLAGS="$RUNTIMES_TARGET_CMAKE_C_FLAGS"
		export STAGE_C_FLAGS
		// log '$STAGE_C_FLAGS' "$STAGE_C_FLAGS"

		# It's the same as $CXXFLAGS
		STAGE_CXX_FLAGS="\
-isystem $SYSROOT/$INSTALL_PREFIX/include/$LLVM_TARGET_TRIPLE/c++/v1 \
-isystem $SYSROOT/$INSTALL_PREFIX/include/c++/v1 \
$RUNTIMES_TARGET_CMAKE_CXX_FLAGS"
		export STAGE_CXX_FLAGS
		// log '$STAGE_CXX_FLAGS' "$STAGE_CXX_FLAGS"

		// log '$TOOLCHAIN_PREFIX' "$TOOLCHAIN_PREFIX"

		# search_target="$(cmake --build . --target help 2> /dev/null | grep "stage2-distribution")" || :
		# [ "$(// delegate -- source_dir)" = "llvm" ] &&
		# [ ! -z "${search_target:+x}" ] &&
		# [ -z "${search_target##*"stage2-distribution"*}" ] ||
		// regenerate "llvm" "$TOOLCHAIN_PREFIX"
	}

	individual() {
		# _level_2
		local toolchain_prefix="$1"
		# build_runtimes "$toolchain_prefix"
		# // die 'test' "backgound process failed"
		llvm_bootstrap
		local dest_resource_dir="$DESTDIR/$INSTALL_PREFIX/lib/clang/$version_target"
		local builtins_dest_dir="$dest_resource_dir/lib/$LLVM_TARGET_TRIPLE"
		[ ! -f "$builtins_dest_dir/libclang_rt.builtins.a" ] || {
			builtins_mock_all "$libname" "$builtins_dest_dir"
			# builtin_mock "$libname" "$builtins_dest_dir/libclang_rt.builtins.a"
			# builtin_mock "$libname" "$builtins_dest_dir/clang_rt.crtbegin.o"
			# builtin_mock "$libname" "$builtins_dest_dir/clang_rt.crtend.o"
		}
		clang_bootstrap
		local builtins_dest_dir="$dest_resource_dir/lib/$LLVM_TARGET_TRIPLE"
		[ ! -f "$builtins_dest_dir/libclang_rt.builtins.a" ] || {
			builtins_mock_all "$libname" "$builtins_dest_dir"
			# builtin_mock "$libname" "$builtins_dest_dir/libclang_rt.builtins.a"
			# builtin_mock "$libname" "$builtins_dest_dir/clang_rt.crtbegin.o"
			# builtin_mock "$libname" "$builtins_dest_dir/clang_rt.crtend.o"
		}

		build_runtimes "$toolchain_prefix"
		local dest_resource_dir="$DESTDIR/$INSTALL_PREFIX/lib/clang/$version_target"
		local anchor_dir="$dest_resource_dir/lib/linux"
		local builtins_dest_dir="$dest_resource_dir/lib/$LLVM_TARGET_TRIPLE"
		[ ! -f "$builtins_dest_dir/libclang_rt.builtins.a" ] &&
			// die '$builtins_dest_dir/libclang_rt.builtins.a' "'$builtins_dest_dir/libclang_rt.builtins.a' does not exist" || {
			builtins_mock_all "$libname" "$builtins_dest_dir"
			# builtin_mock "$libname" "$builtins_dest_dir/libclang_rt.builtins.a"
			# builtin_mock "$libname" "$builtins_dest_dir/clang_rt.crtbegin.o"
			# builtin_mock "$libname" "$builtins_dest_dir/clang_rt.crtend.o"
		}
		[ -f "$anchor_dir/libclang_rt.builtins-$libname.a" ] ||
			// die '$dest_resource_dir/lib/linux/libclang_rt.builtins-$libname.a' "does not exist"

		# build_clang_individually_twice
	}

	toolchain_reset() {
		local toolchain_prefix="$1"
		local title="${2-}"
		# These path settings will transfer the compiler from
		# /usr/lib/ccache/bin/clang
		# to
		# /working/kiss/proc/pkg/llvm/usr/bin/clang-18.0.0
		# So, we do not need -D LLVM_CCACHE_BUILD=ON and do not want to introduce troubles from the enabling?
		# But,
		# CCACHE_COMPILERCHECK=content
		# Or,
		# CCACHE_COMPILERCHECK="%compiler% -v"
		# is the another trick that can not be avoided since the compiler per se is upgraded
		# [ -z "${bin_path##*$KISS_ROOT*}" ] ||
		path_prepend PATH            "$toolchain_prefix/bin"

		path_prepend LIBRARY_PATH    "$toolchain_prefix/lib"
		path_prepend LIBRARY_PATH    "$toolchain_prefix/lib/$LLVM_TARGET_TRIPLE"
		# path_prepend LIBRARY_PATH    "$OUTPUT_DIR/lib"
		# path_prepend LIBRARY_PATH    "$OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE"

		path_prepend LD_LIBRARY_PATH "$toolchain_prefix/lib"
		path_prepend LD_LIBRARY_PATH "$toolchain_prefix/lib/$LLVM_TARGET_TRIPLE"
		# path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/lib"
		# path_prepend LD_LIBRARY_PATH "$OUTPUT_DIR/lib/$LLVM_TARGET_TRIPLE"

		local dest_resource_dir="$SYSROOT/$INSTALL_PREFIX/lib/clang/$version_target"
		[ -d "$dest_resource_dir" ] ||
		[ -L "$dest_resource_dir" ] || {
			dest_resource_dir="$SYSROOT/$INSTALL_PREFIX/lib/clang/$version_target_major"
			[ -d "$dest_resource_dir" ] ||
			[ -L "$dest_resource_dir" ] ||
			// die '$dest_resource_dir' "does not eixist '$dest_resource_dir'"
		}

		config_site

		local builtins_dest_dir="$dest_resource_dir/lib/$LLVM_TARGET_TRIPLE"
		local anchor_dir="$dest_resource_dir/lib/linux"
		{
			! builtins_exist "$builtins_dest_dir" &&
			// die '$builtins_dest_dir' "'$builtins_dest_dir' does not have essential builtins" ||
			# [ ! -f "$builtins_dest_dir/libclang_rt.builtins.a" ] ||
			[ "$(readlink -fn "$builtins_dest_dir/libclang_rt.builtins.a")" = \
			"$(readlink -fn "$anchor_dir/libclang_rt.builtins-$libname.a")" ]
		} || {
			builtins_mock_all "$libname" "$builtins_dest_dir"
			# builtin_mock "$libname" "$builtins_dest_dir/libclang_rt.builtins.a"
			# builtin_mock "$libname" "$builtins_dest_dir/clang_rt.crtbegin.o"
			# builtin_mock "$libname" "$builtins_dest_dir/clang_rt.crtend.o"
		}
		[ -f "$anchor_dir/libclang_rt.builtins-$libname.a" ] ||
			// die "$dest_resource_dir/lib/linux/libclang_rt.builtins-$libname.a" "does not exist"

		builtins_apply "$toolchain_prefix" "$title"

		fix_cmakecxxcompiler "$output_dir"
	}

	# Discover problems in advance and avoid wasting a lot of time on useless efforts before a failure
	# Failure is not terrible. What is terrible is that there is no chance of comeback in this round
	build_all() {
		_level_2
		local toolchain_prefix="$1"
		# // cue "unwind-$LLVM_TARGET_TRIPLE" "construction"

		local output_dir="$OUTPUT_DIR"
		[ -d "$output_dir" ] || \mkdir -p "$output_dir"

		fix_cmakecxxcompiler "$output_dir"

		// cue "unwind" "construction"
		# ninja -C "$OUTPUT_DIR" "unwind-$LLVM_TARGET_TRIPLE" 2>&1 || kill 0
		ninja -C "$OUTPUT_DIR" "unwind" > /dev/null 2>&1 ||
		ninja -C "$OUTPUT_DIR" "unwind" 2>&1 || kill 0
		local check_unwind_target="check-unwind-$LLVM_TARGET_TRIPLE"
		local check_unwind_target_result=
		check_unwind_target_result="$(cd $OUTPUT_DIR
			# ninja -C "$OUTPUT_DIR" help |
			ninja -C "$OUTPUT_DIR" -t targets |
			# check-unwind-$LLVM_TARGET_TRIPLE ask for -lgcc -lgcc_s
			grep check-unwind | grep -v "/" | grep -v $LLVM_TARGET_TRIPLE |
			awk -F: '{print $1}' 2> /dev/null)" || :
		# stage2-check-unwind == $check_unwind_target_result
		# [ -z "${check_unwind_target_result:+x}" ] || {
		! find_target "$check_unwind_target" || {
			// cue '$check_unwind_target' "$check_unwind_target"
			# // cue "check-unwind-$LLVM_TARGET_TRIPLE" "construction"
			// cue "$check_unwind_target" "construction"
			# ninja -C "$OUTPUT_DIR" "check-unwind-$LLVM_TARGET_TRIPLE" 2>&1 || kill 0
			# Insist building check-unwind but not such a target
			# ninja -C "$OUTPUT_DIR" "$check_unwind_target" > /dev/null 2>&1 ||
			# ninja -C "$OUTPUT_DIR" "$check_unwind_target" || kill 0
			// cue "install-unwind-$LLVM_TARGET_TRIPLE" "construction"
			# ninja -C "$OUTPUT_DIR" "install-unwind-$LLVM_TARGET_TRIPLE" 2>&1 || kill 0
			ninja -C "$OUTPUT_DIR" "install-unwind-$LLVM_TARGET_TRIPLE" 2>&1 ||
			ninja -C "$OUTPUT_DIR" "install-unwind" 2>&1 || kill 0
			// check_libunwind $(find "$output_dir" -type f -name "libunwind.so.*") ||
				// die 'libunwind' "build failed"

			local runtimes_dest="$DESTDIR/$INSTALL_PREFIX/lib/$LLVM_DEFAULT_TARGET_TRIPLE"
			[ -d "$runtimes_dest" ] ||
			// as_own "$DESTDIR" \mkdir -p "$runtimes_dest"

			// as_own "$DESTDIR" \
			rsync -aqz "$output_dir/lib/$LLVM_DEFAULT_TARGET_TRIPLE/." "$runtimes_dest/" && // as_own "$DESTDIR" sync

			// check_libunwind $(find "$runtimes_dest" -type f -name "libunwind.so.*") ||
				// die 'installed libunwind' "is invalid"
		}

		// cue 'llvm-config' "construction"
		ninja -C "$OUTPUT_DIR" llvm-config > /dev/null 2>&1 || kill 0
		# Extremely slow
		# // cue 'check-llvm-tools-llvm-config' "construction"
		# ninja -C "$OUTPUT_DIR" check-llvm-tools-llvm-config > /dev/null 2>&1 || kill 0
		// cue 'install-llvm-config' "construction"
		ninja -C "$OUTPUT_DIR" install-llvm-config 2>&1 || kill 0

		// cue 'llvm-min-tblgen' "construction"
		ninja -C "$OUTPUT_DIR" llvm-min-tblgen > /dev/null 2>&1 || kill 0
		# // cue 'check-llvm-min-tblgen' "construction"
		# ninja -C "$OUTPUT_DIR" check-llvm-min-tblgen 2>&1 || kill 0

		// cue 'llvm-tblgen' "construction"
		ninja -C "$OUTPUT_DIR" llvm-tblgen > /dev/null 2>&1 || kill 0
		# ninja -C "$OUTPUT_DIR" check-llvm-tblgen 2>&1 || kill 0
		ninja -C "$OUTPUT_DIR" install-llvm-tblgen

		# [ "$bootstrap" = "1" ] ||
		// cue 'clang-tblgen' "construction"
		ninja -C "$OUTPUT_DIR" clang-tblgen > /dev/null 2>&1 || kill 0
		# ninja -C "$OUTPUT_DIR" check-clang-tblgen 2>&1 || kill 0
		ninja -C "$OUTPUT_DIR" install-clang-tblgen
		[ -f "$DESTDIR/$INSTALL_PREFIX/bin/llvm-config" ] || {
			// as_own "$DESTDIR" \
			rsync -aq "$OUTPUT_DIR/bin/llvm-config" "$DESTDIR/$INSTALL_PREFIX/" && // as_own "$DESTDIR" sync
		}
		[ -f "$DESTDIR/$INSTALL_PREFIX/bin/llvm-tblgen" ] || {
			// as_own "$DESTDIR" \
			rsync -aq "$OUTPUT_DIR/bin/llvm-tblgen" "$DESTDIR/$INSTALL_PREFIX/" && // as_own "$DESTDIR" sync
		}
		[ -f "$DESTDIR/$INSTALL_PREFIX/bin/clang-tblgen" ] || {
			// as_own "$DESTDIR" \
			rsync -aq "$OUTPUT_DIR/bin/clang-tblgen" "$DESTDIR/$INSTALL_PREFIX/" && // as_own "$DESTDIR" sync
		}

		# [ -f "$toolchain_prefix/bin/llvm-tblgen" ] ||
		# // in_tree "llvm-tblgen"
		# [ -f "$toolchain_prefix/bin/clang-tblgen" ] ||
		# // in_tree "clang-tblgen"

		# // cue 'runtimes' "construction"
		# runtimes_in_tree "$toolchain_prefix"
		# # ninja -C "$OUTPUT_DIR" runtimes > /dev/null 2>&1 ||
		# # ninja -C "$OUTPUT_DIR" runtimes || kill 0

		local dest_resource_dir="$SYSROOT/$INSTALL_PREFIX/lib/clang/$version_target"
		[ -d "$dest_resource_dir" ] ||
		[ -L "$dest_resource_dir" ] || {
			dest_resource_dir="$SYSROOT/$INSTALL_PREFIX/lib/clang/$version_target_major"
			[ -d "$dest_resource_dir" ] ||
			[ -L "$dest_resource_dir" ] ||
			// die '$dest_resource_dir' "does not eixist '$dest_resource_dir'"
		}

		config_site

		local builtins_dest_dir="$dest_resource_dir/lib/$LLVM_TARGET_TRIPLE"
		local anchor_dir="$dest_resource_dir/lib/linux"
		[ ! -f "$builtins_dest_dir/libclang_rt.builtins.a" ] &&
			// die '$builtins_dest_dir/libclang_rt.builtins.a' "'$builtins_dest_dir/libclang_rt.builtins.a' does not exist" || {

			local source_path_out="$OUTPUT_DIR/lib/clang/$version_target/lib/$LLVM_TARGET_TRIPLE"
			# ! [ "$builtins_dest_dir/libclang_rt.builtins.a" -ot "$source_path_out/libclang_rt.builtins.a" ] &&
			builtins_valid "$builtins_dest_dir" "$source_path_out" &&
			[ "$(readlink -fn "$builtins_dest_dir/libclang_rt.builtins.a")" = \
			"$(readlink -fn "$anchor_dir/libclang_rt.builtins-$libname.a")" ] ||
			builtins_mock_all "$libname" "$builtins_dest_dir"
		}
		[ -f "$anchor_dir/libclang_rt.builtins-$libname.a" ] ||
			// die '$dest_resource_dir/lib/linux/libclang_rt.builtins-$libname.a' "does not exist"

		# compiler-rt;libunwind;libcxxabi;libcxx
		// cue 'all' "construction"
		(
		ninja -C "$OUTPUT_DIR" all > /dev/null 2>&1 ||
		ninja -C "$OUTPUT_DIR" all ||
		kill 0
		) & build_id=$!
		// progress "$repo_name" "$build_id" "all"
		ninja -C "$OUTPUT_DIR" install
		// check_clang || // die 'clang' "build invalid targets"

	}

	// individual "$TOOLCHAIN_PREFIX" & build_id=$!
	// progress "$repo_name" "$build_id" "bootstrap_00"
	# / [ "${job_$build_id}" -eq "0" ] || // die 'individual' "failed somewhere"
	# wait $build_id
	# [ "$?" -eq "0" ] || // die 'individual' "failed somewhere"

	# // toolchain_reset "$DESTDIR/$INSTALL_PREFIX" "stage_00"
	#
	# // individual "$TOOLCHAIN_PREFIX" & build_id=$!
	# // progress "$repo_name" "$build_id" "bootstrap_01"
	#


	// toolchain_reset "$DESTDIR/$INSTALL_PREFIX" "stage_00"

	dest_resource_dir="$DESTDIR/$INSTALL_PREFIX/lib/clang/$version_target"
	builtins_dest_dir="$dest_resource_dir/lib/$LLVM_TARGET_TRIPLE"
	anchor_dir="$dest_resource_dir/lib/linux"
	# ! empty "$builtins_dest_dir" ||
	[ ! -f "$builtins_dest_dir/libclang_rt.builtins.a" ] &&
		// die '$builtins_dest_dir/libclang_rt.builtins.a' "'$builtins_dest_dir/libclang_rt.builtins.a' does not exist" || {

		local source_path_out="$OUTPUT_DIR/lib/clang/$version_target/lib/$LLVM_TARGET_TRIPLE"
		builtins_valid "$builtins_dest_dir" "$source_path_out" &&
		[ "$(readlink -fn "$builtins_dest_dir/libclang_rt.builtins.a")" = \
		"$(readlink -fn "$anchor_dir/libclang_rt.builtins-$libname.a")" ] ||
		# [ -f "$anchor_dir/libclang_rt.builtins-$libname.a" ] ||
		builtins_mock_all "$libname" "$builtins_dest_dir"
		[ -f "$anchor_dir/libclang_rt.builtins-$libname.a" ] ||
			// die '$dest_resource_dir/lib/linux/libclang_rt.builtins-$libname.a' "does not exist"
	}

	// cue 'runtimes' "construction [$FUNCNAME]"
	runtimes_in_tree "$TOOLCHAIN_PREFIX" & build_id=$!
	// progress "$repo_name" "$build_id" "runtimes_in_tree"

	# ninja -C "$OUTPUT_DIR" runtimes > /dev/null 2>&1 ||
	# ninja -C "$OUTPUT_DIR" runtimes || kill 0

	// build_all "$TOOLCHAIN_PREFIX" & build_id=$!
	// progress "$repo_name" "$build_id" "build_all"

	# [ -f "$TOOLCHAIN_PREFIX/bin/clang" ] ||
	# // clang_in_tree "$TOOLCHAIN_PREFIX"

	[ "$PWD" = "$MAKE_DIR" ] || cd "$MAKE_DIR"

	# // cue 'clear' "cmake cache"
	# find $OUTPUT_DIR -mindepth 1 -maxdepth 1 -exec \rm -rf {} +
	# deploy "-S" "$MAKE_DIR/llvm"
	# eval "$CMAKE $CMAKE_OPTIONS" 2>&1 || kill 0

	fix_cmakecxxcompiler "$output_dir"

	[ -f "$TOOLCHAIN_PREFIX/bin/llvm-config" ] ||
		// in_tree "llvm-config"

	# Hard to build globally with NOT LLVM_RUNTIMES_BUILD
	# [ -f "$dest_resource_dir/lib/$LLVM_TARGET_TRIPLE/libclang_rt.builtins.a" ] ||
	# [ -f "$dest_resource_dir/lib/linux/libclang_rt.builtins-$libname.a" ] ||
		# // in_tree "compiler-rt" "llvm" "use_intermediate"
		#
	# Failed
	# // in_tree "runtimes" "llvm" "use_intermediate" & build_id=$!
	# // progress "$repo_name" "$build_id" "runtimes"

	# // cue 'compiler-rt' "construction"
	# cmake --build "$OUTPUT_DIR" --target compiler-rt -j $jobs > /dev/null || kill 0
	# // cue 'compiler-rt' "installation"
	# ninja -j $jobs -C "$OUTPUT_DIR" install-compiler-rt > /dev/null || kill 0

	# cmake --build "$OUTPUT_DIR" --target compiler-rt -j $jobs 2>&1 || kill 0
	# ninja -j $jobs -C "$OUTPUT_DIR" install-compiler-rt 2>&1 || kill 0

	# # ninja: unknown target 'libcxx'
	# cmake --build "$OUTPUT_DIR" --target cxx cxxabi unwind -j $jobs 2>&1 || kill 0
	# ninja -j $jobs -C "$OUTPUT_DIR" install-cxx install-cxxabi install-unwind 2>&1 || kill 0

	# lld needs this
	# Can not be merged into in_tree "lld"
	// in_tree "LLVMTargetParser"  & progress "$repo_name" $! "LLVMTargetParser building"
	// in_tree "LLVMSupport"       & progress "$repo_name" $! "LLVMSupport building"
	// in_tree "LLVMDemangle"      & progress "$repo_name" $! "LLVMDemangle building"
	# Do I need this?
	# lld_in_tree() {}
	[ -f "$TOOLCHAIN_PREFIX/bin/lld" ] ||
		// in_tree "lld"           & progress "$repo_name" $! "lld building"
	[ -f "$TOOLCHAIN_PREFIX/bin/lld" ] || {
		// war 'lld' "is supposed to be built?"
		find $DESTDIR -type f -name lld
		// log '$DESTDIR' "$DESTDIR"
		// log '$INSTALL_PREFIX' "$INSTALL_PREFIX"
		// log '$TOOLCHAIN_PREFIX/bin/$target' "$TOOLCHAIN_PREFIX/bin/lld"
		// log 'date' "$(date)"
	}

	config_site

	dest_resource_dir="$DESTDIR/$INSTALL_PREFIX/lib/clang/$version_target"
	builtins_dest_dir="$dest_resource_dir/lib/$LLVM_TARGET_TRIPLE"
	# [ ! -f "$builtins_dest_dir/libclang_rt.builtins.a" ] || {
		builtins_mock_all "$libname" "$builtins_dest_dir"
		# builtin_mock "$libname" "$builtins_dest_dir/libclang_rt.builtins.a"
		# builtin_mock "$libname" "$builtins_dest_dir/clang_rt.crtbegin.o"
		# builtin_mock "$libname" "$builtins_dest_dir/clang_rt.crtend.o"
	# }

	# cd "$DESTDIR/$INSTALL_PREFIX/lib/clang/$version_target_major/lib"
	# [ -d "linux" ] || \mkdir "linux"
	# cd "linux"
	# [ ! -f "../$LLVM_TARGET_TRIPLE/libclang_rt.builtins.a" ] ||
	# {
	#   {
	#       [ -L "libclang_rt.builtins-x86_64.a" ] &&
	#       [ "$(readlink -fn "libclang_rt.builtins-x86_64.a")" = "../$LLVM_TARGET_TRIPLE/libclang_rt.builtins.a" ]
	#   } ||
	#   [ -f "libclang_rt.builtins-x86_64.a" ]
	# } || {
	#   [ -L "libclang_rt.builtins-x86_64.a" ] && \rm -f "libclang_rt.builtins-x86_64.a"
	#   \ln -sf "../$LLVM_TARGET_TRIPLE/libclang_rt.builtins.a" "libclang_rt.builtins-x86_64.a"
	# }
	# \ln -sf "../$LLVM_TARGET_TRIPLE/clang_rt.crtbegin.o"    "clang_rt.crtbegin-x86_64.o"
	# \ln -sf "../$LLVM_TARGET_TRIPLE/clang_rt.crtend.o"      "clang_rt.crtend-x86_64.o"


	# // in_tree "compiler-rt"
	# Needs cxxflags has c++/v1
	# // in_tree "unwind"
	# ninja: unknown target 'cxx'
	# ninja: unknown target 'libcxx'
	# ninja -C "$OUTPUT_DIR" cxx cxxabi unwind                                   # Build
	# ninja -C "$OUTPUT_DIR" libcxx libcxxabi libunwind                          # Build
	# ninja -C "$OUTPUT_DIR" check-libcxx check-libcxxabi check-libunwind        # Test
	# ninja -C "$OUTPUT_DIR" install-libcxx install-libcxxabi install-libunwind  # Install

	# Does not want cxxflags having c++/v1
	# // in_tree "cxxabi"      "llvm" "use_intermediate"
	# // in_tree "cxx"         "llvm" "use_intermediate"
	#
	# // in_tree "runtimes"    "llvm" "use_intermediate"

	# // in_tree "llvm-libgcc" "llvm" "use_intermediate"

	[ "$PWD" = "$MAKE_DIR" ] || cd "$MAKE_DIR"

	# // build_runtimes

	# No ccache? the first time in tree build/install clang
	# Failed
	# // clang_in_tree "$TOOLCHAIN_PREFIX" & build_id=$!
	# // progress "$repo_name" "$build_id" "clang"

	# Looking at clang/CMakeLists.txt ${CLANG_STAGE} for details
	# Using just built binaries
	stage_build() {
		_level_2
		local toolchain_prefix="$1"
		# ninja stage2-distribution
		# ninja stage2-install-distribution

		# [ "$bootstrap" != "1" ] || {
		#   # // cue 'stage2 [1st run]' "'stage2' construction"
		#   # lib_linux_out "$OUTPUT_DIR/tools/clang/stage2-bins/lib/clang/$version_target"
		#   # cmake --build "$OUTPUT_DIR" --target "stage2" -j "$jobs" > /dev/null || kill 0
		#   #
		#   # [ "$PWD" = "$MAKE_DIR" ] || cd "$MAKE_DIR"
		#   # // cue 'stage2-distribution [1st run]' "'stage2-distribution' construction"
		#   # lib_linux_out "$OUTPUT_DIR/tools/clang/stage2-distribution-bins/lib/clang/$version_target"
		#   # cmake --build "$OUTPUT_DIR" --target "stage2-distribution" -j "$jobs" > /dev/null || kill 0
		#
		#   [ "$PWD" = "$MAKE_DIR" ] || cd "$MAKE_DIR"
		#   // cue 'stage2 [1st run]' "'stage2' installation"
		#   config_site
		#   lib_linux_out "$OUTPUT_DIR/tools/clang/stage2-install-distribution-bins/lib/clang/$version_target"
		#   # "stage2-install-distribution" == "$build_target"
		#   cmake --build "$OUTPUT_DIR" --target "stage2-install-distribution" -j "$jobs" || kill 0
		# }
		#
		# builtins_apply "$toolchain_prefix" "stage_01"
		#
		// build_all "$toolchain_prefix" # & build_id=$!
		# // progress "$repo_name" "$build_id" "build_all"
		# // clang_in_tree "$TOOLCHAIN_PREFIX"

		# // in_tree "clang"
		# // in_tree "runtimes"

		// cue 'in_tree' "stage2"
		// in_tree "stage2" || :

		[ "$PWD" = "$MAKE_DIR" ] || cd "$MAKE_DIR"

		# clean_objects "llvm"

		# [ "$(// delegate -- source_dir)" = "llvm" ] ||
		# // regenerate "llvm" "$TOOLCHAIN_PREFIX"

		# https://github.com/llvm/llvm-project/issues/58219
		# When put openmp in projects list
		# The dependency target "omptarget.devicertl.amdgpu" of target
		# "omptarget.rtl.amdgpu" does not exist.
		# Reomved openmp from projects list
		# VERBOSE=1 cmake --build "$OUTPUT_DIR" -j 12 --target llvm-extract stage2 2>&1 || kill 0

		# These operations only can be done in configure stage
			# -C "$OUTPUT_DIR/NATIVE/CMakeFiles/$CMAKE_VERSION/CMakeCCompiler.cmake" \
			# -C "$OUTPUT_DIR/NATIVE/CMakeFiles/$CMAKE_VERSION/CMakeCXXCompiler.cmake" \

		# // cue 'stage2 [2nd run]' "'stage2' construction"
		# lib_linux_out "$OUTPUT_DIR/tools/clang/stage2-bins/lib/clang/$version_target"
		# cmake --build "$OUTPUT_DIR" --target "stage2" -j "$jobs" > /dev/null || kill 0
		#
		[ "$PWD" = "$MAKE_DIR" ] || cd "$MAKE_DIR"

		fix_cmakecxxcompiler "$output_dir"

		// cue '$build_target [2nd run]' "'$build_target' construction"
		[ "$build_target" = "stage2-distribution" ] || {
			lib_linux_out "$OUTPUT_DIR/tools/clang/stage2-distribution-bins/lib/clang/$version_target"
			cmake --build "$OUTPUT_DIR" --target "stage2-distribution" -j "$jobs" > /dev/null || kill 0
		}
		[ "$PWD" = "$MAKE_DIR" ] || cd "$MAKE_DIR"
		// cue '$build_target' "'$build_target' construction"
		// cue '$LD_LIBRARY_PATH' "$LD_LIBRARY_PATH"
		config_site
		lib_linux_out "$OUTPUT_DIR/tools/clang/$build_target-bins/lib/clang/$version_target"
		# cmake --build "$OUTPUT_DIR" --target "$build_target" -j "$jobs" > /dev/null || kill 0
		(
		cmake --build "$OUTPUT_DIR" --target "$build_target" -j "$jobs" || kill 0
		# ninja -j $jobs -C "$OUTPUT_DIR" $build_target 2>&1 || kill 0
		) & build_id=$!
		// progress "$repo_name" "$build_id" "$build_target"

		// cue '$build_target' "'$build_target' installation"
		cmake --build "$OUTPUT_DIR" --target install 2>&1 || kill 0
		# cmake --install "$OUTPUT_DIR" 2>&1 || kill 0
		# // cue '$build_target' "'$build_target' python3 installation"
		# python3 "$MAKE_DIR/llvm/utils/lit/setup.py" "$OUTPUT_DIR" 2>&1 || kill 0
	}

	# Stage_build needs tablegens which come from the previous phase?
	# Without reset:
	# ninja: error: unknown target 'stage2-install-distribution'
	// toolchain_reset "$DESTDIR/$INSTALL_PREFIX" "stage_01"

	// stage_build "$TOOLCHAIN_PREFIX" & build_id=$!
	// progress "$repo_name" "$build_id" "stage_build 00"

	# Toolchain upgrade, and the following operations are time-consuming
	# Because the brand new toolchain always creates its ccache from scratch
	# builtins_apply "$TOOLCHAIN_PREFIX" "stage_00"
	# Stage build needs tablegens which come from the previous phase?
	# Without reset:
	# ninja: error: unknown target 'stage2-install-distribution'
	// toolchain_reset "$DESTDIR/$INSTALL_PREFIX" "stage_02"

	// stage_build "$TOOLCHAIN_PREFIX" & build_id=$!
	// progress "$repo_name" "$build_id" "stage_build 01"

	[ "$TOOLCHAIN_PREFIX" = "$DESTDIR/$INSTALL_PREFIX" ] ||
		// die '$TOOLCHAIN_PREFIX' "'$TOOLCHAIN_PREFIX' exporting failed"

	[ -d "$TOOLCHAIN_PREFIX/bin" ] ||
		// as_own "$DESTDIR" \
		mkdir -p "$TOOLCHAIN_PREFIX/bin"
	[ -d "$DESTDIR/${CLANG_CONFIG_FILE_SYSTEM_DIR#*/}" ] ||
		// as_own "$DESTDIR" \
		mkdir -p "$DESTDIR/${CLANG_CONFIG_FILE_SYSTEM_DIR#*/}"

	// as_own "$DESTDIR" \
	cp -r libcxxabi/include "$TOOLCHAIN_PREFIX/"
	# Clang: clang-tblgen, required for crossbuilding.
	[ -f "$BUILD_PREFIX/bin/clang-tblgen" ]    || BUILD_PREFIX="$OUTPUT_DIR"
	[ ! -f "$BUILD_PREFIX/bin/llvm-config" ]   ||
	// as_own "$DESTDIR" \
	cp "$BUILD_PREFIX/bin/llvm-config"   "$DESTDIR"/$INSTALL_PREFIX/bin/llvm-config
	[ ! -f "$BUILD_PREFIX/bin/llvm-tblgen" ]   ||
	// as_own "$DESTDIR" \
	cp "$BUILD_PREFIX/bin/llvm-tblgen"   "$DESTDIR"/$INSTALL_PREFIX/bin/llvm-tblgen
	[ ! -f "$BUILD_PREFIX/bin/clang-tblgen" ]  ||
	// as_own "$DESTDIR" \
	cp "$BUILD_PREFIX/bin/clang-tblgen"  "$DESTDIR"/$INSTALL_PREFIX/bin/clang-tblgen
	[ ! -f "$BUILD_PREFIX/lib/libPollyISL.a" ] ||
	// as_own "$DESTDIR" \
	cp "$BUILD_PREFIX/lib/libPollyISL.a" "$DESTDIR"/$INSTALL_PREFIX/lib/libPollyISL.a
	[ ! -f "$BUILD_PREFIX/lib/libPolly.a" ]    ||
	// as_own "$DESTDIR" \
	cp "$BUILD_PREFIX/lib/libPolly.a"    "$DESTDIR"/$INSTALL_PREFIX/lib/libPolly.a

	cd "$DESTDIR"/$INSTALL_PREFIX/bin
	# LLD: Replace GNU binutils
	ln -s -f ld.lld    ld
	# Clang: Some legacy programs may require cc
	ln -s -f clang     cc
	# Clang: equivalent for c++
	ln -s -f clang++   c++
	# Clang: equivalent for cpp
	ln -s -f clang-cpp cpp

	# Clang: POSIX compliance
	// as_own "$DESTDIR" \
	cp $MAKE_DIR/files/c99 "$DESTDIR"/$INSTALL_PREFIX/bin/
	chmod 755 "$TOOLCHAIN_PREFIX/bin/c99"

	set +f
	# Clang: Override libexec, the path is hardcoded, unfortunately.
	\mv -f \
		"$TOOLCHAIN_PREFIX/libexec/"*analyze* \
		"$TOOLCHAIN_PREFIX/libexec/"*intercept* \
		"$TOOLCHAIN_PREFIX/lib/clang/"

	set -f

	\rmdir "$TOOLCHAIN_PREFIX/libexec"

	sed -e "s|libexec|lib/clang|" < "$TOOLCHAIN_PREFIX/bin/scan-build" > _
	\mv -f _ "$TOOLCHAIN_PREFIX/bin/scan-build"
	chmod +x "$TOOLCHAIN_PREFIX/bin/scan-build"

	# For GCC compatibility
	cc_compatibility() {
		local source="$1"
		local anchor="$2"
		[ "$PWD" = "$DESTDIR/$INSTALL_PREFIX/bin" ] || cd "$DESTDIR/$INSTALL_PREFIX/bin"

		[ -f "$source" ] || {
			// die '$source' "'$source' does not exist"
		}
		command -v "$source" > /dev/null 2>&1 || {
			// die '$source' "'$source' is not an executable"
		}
		! is_folder "$anchor" || // die '$anchor' "'$anchor' is not a valid anchor"
		! is_file "$anchor"   || // die '$anchor' "'$anchor' is not a valid anchor"
		[ "$(readlink -fn "$anchor")" = "$(readlink -fn "$source")" ] ||
		\ln -sf "$source" "$anchor"
	}
	cd "$DESTDIR"/$INSTALL_PREFIX/bin
	# \ln -s -f llvm-readobj  readelf
	cc_compatibility llvm-readobj  readelf
	# \ln -s -f llvm-objcopy  strip
	cc_compatibility llvm-objcopy  strip
	# \ln -s -f llvm-ar       ar
	cc_compatibility llvm-ar       ar
	# \ln -s -f llvm-nm       nm
	cc_compatibility llvm-nm       nm
	# \ln -s -f llvm-objcopy  objcopy
	cc_compatibility llvm-objcopy  objcopy
	[ -f "llvm-objdump" ] || {
		// die 'llvm-objdump' "does not exist"
	}
	# \ln -s -f llvm-objdump  objdump
	cc_compatibility llvm-objdump  objdump
	# \ln -s -f llvm-strings  strings
	cc_compatibility llvm-strings  strings
	# \ln -s -f llvm-objcopy  otool
	cc_compatibility llvm-objcopy  otool
	# \ln -s -f llvm-ar       llvm-ranlib
	cc_compatibility llvm-ar       llvm-ranlib
	[ -f "llvm-ranlib" ] || {
		// die 'llvm-ranlib' "does not exist"
	}
	# \ln -s -f llvm-ranlib   ranlib
	cc_compatibility llvm-ranlib   ranlib
	# \ln -s -f llvm-as       as
	cc_compatibility llvm-as       as

	# kiss uses /usr/lib/clang
	# This makes things like Rust easier:
	// ver_naming "$DESTDIR/$INSTALL_PREFIX/lib/clang" "$version_target" "$version_target_major"
	# cd "$DESTDIR"/$INSTALL_PREFIX/lib/clang
	# [ ! -d "$version_target_major" ] || {
	#   [ -d "$version_target" ] && {
	#       rsync -aqz --remove-source-files "$version_target_major/." "$version_target/" &&
	#       sync
	#       \rm -rf "$version_target_major"
	#   } ||
	#   \mv "$version_target_major" "$version_target"
	# }
	# Moved to post-install
	# [ -L "system" ] &&
	#   [ "$(readlink -fn "system")" = "$(readlink -fn "$version_target")" ] ||
	#   \ln -s -f "$version_target" "system"

	fix_builtins() (
		local location="$1"
		# [ "$PWD" = "$DESTDIR/$INSTALL_PREFIX/lib" ] || cd "$DESTDIR/$INSTALL_PREFIX/lib"
		[ "$PWD" = "$location" ] || cd "$location"
		# \ln -s -f "clang/$version_target/lib/$LLVM_DEFAULT_TARGET_TRIPLE/clang_rt.crtbegin.o"    "crtbegin.o"
		builtins_suffix=""
		builtins_path="clang/$version_target/lib/$LLVM_DEFAULT_TARGET_TRIPLE"
		[ "$LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default" = "ON" ] || {
			# \ln -s -f "clang/$version_target/lib/linux/clang_rt.crtbegin-$libname.o"    "crtbegin.o"
			builtins_suffix="-$libname"
			builtins_path="clang/$version_target/lib/linux"
		}

		fix_builtins_impl() {
			local nominal_address="$1"
			local anchor="$2"
			# local absolute_builtins="$(readlink -fn "$builtins_path/libclang_rt.builtins$builtins_suffix.a")"
			local absolute_builtins="$(readlink -fn "$nominal_address")"
			[ -f "$absolute_builtins" ] ||
				// die '$absolute_builtins' "'$absolute_builtins' does not exist"
			# \ln -s -f "$builtins_path/libclang_rt.builtins$builtins_suffix.a" "libatomic.a"
			[ ! -e "$anchor" ] || \rm -f "$anchor"
			\ln -s -f "$nominal_address" "$anchor"
		}

		fix_builtins_impl "$builtins_path/libclang_rt.builtins$builtins_suffix.a" "libatomic.a"

		# \ln -s -f "$builtins_path/clang_rt.crtbegin$builtins_suffix.o"    "crtbegin.o"
		fix_builtins_impl "$builtins_path/clang_rt.crtbegin$builtins_suffix.o"    "crtbegin.o"

		# \ln -s -f "$builtins_path/clang_rt.crtbegin$builtins_suffix.o"    "crtbeginS.o"
		fix_builtins_impl "$builtins_path/clang_rt.crtbegin$builtins_suffix.o"    "crtbeginS.o"

		# \ln -s -f "$builtins_path/clang_rt.crtend$builtins_suffix.o"      "crtend.o"
		fix_builtins_impl "$builtins_path/clang_rt.crtend$builtins_suffix.o"      "crtend.o"

		# \ln -s -f "$builtins_path/clang_rt.crtend$builtins_suffix.o"      "crtendS.o"
		fix_builtins_impl "$builtins_path/clang_rt.crtend$builtins_suffix.o"      "crtendS.o"
	)

	fix_builtins "$DESTDIR/$INSTALL_PREFIX/lib"

	fix_runtimes() (
		local location="$1"
		# [ "$PWD" = "$DESTDIR/$INSTALL_PREFIX/lib" ] || cd "$DESTDIR/$INSTALL_PREFIX/lib"
		[ "$PWD" = "$location" ] || cd "$location"
		[ -e "$location/$LLVM_DEFAULT_TARGET_TRIPLE/libc++.so" ] &&
		[ -e "$location/$LLVM_DEFAULT_TARGET_TRIPLE/libc++abi.so" ] &&
		[ -e "$location/$LLVM_DEFAULT_TARGET_TRIPLE/libunwind.so" ] ||
		// die '$location' "'$location' is not an appropriate address for runtimes"
		# Legacy programs require library files under "$DESTDIR/$INSTALL_PREFIX/lib"
		# libc++.a
		# libc++.so -> libc++.so.1
		# libc++.so.1 -> libc++.so.1.0
		# libc++.so.1.0
		# libc++abi.a
		# libc++abi.so -> libc++abi.so.1
		# libc++abi.so.1 -> libc++abi.so.1.0
		# libc++abi.so.1.0
		# libc++experimental.a
		# libunwind.a
		# libunwind.so -> libunwind.so.1
		# libunwind.so.1 -> libunwind.so.1.0
		# libunwind.so.1.0
		local item absolute_source anchor
		for item in $(\ls -1 "$LLVM_DEFAULT_TARGET_TRIPLE/"); do
			! is_link "./$item" || continue
			absolute_source="$(readlink -fn "$LLVM_DEFAULT_TARGET_TRIPLE/$item")"
			[ -f "$absolute_source" ] || continue
			# libunwind.so.1.0 under "$DESTDIR/$INSTALL_PREFIX/lib" is not a valid library
			# chrpath -l shows ./libunwind.so: no rpath or runpath tag found. And $KISS_ROOT/usr/bin/cc -v shows
			# Error relocating /opt/kiss/usr/bin/../lib/libunwind.so.1: __libunwind_Registers_x86_64_jumpto: symbol not found
			# Error relocating /opt/kiss/usr/bin/../lib/libunwind.so.1: __unw_getcontext: symbol not found
			[ ! -z "${item##*".so"*}" ] ||
			chrpath -l "./$item" > /dev/null 2>&1 || {
				chrpath -l "$absolute_source" > /dev/null 2>&1 ||
				// die '$absolute_source' "'$absolute_source' is not an valid library"
				// war '$item' "'$item' is an invalid library${newline}\
				(no rpath or runpath tag found), gonna remove it"
				\rm -f "./$item"
			}

			[ ! -e "./$item" ] ||
			[ ! -z "${item##*"unwind"*}" ] ||
			// check_libunwind "./$item" || {
				// check_libunwind "$absolute_source" ||
				// die '$absolute_source' "'$absolute_source' is not an valid libunwind library"
				// war '$item' "'$item' is an invalid library${newline}\
				(undefined references), gonna remove it"
				\rm -f "./$item"
			}
			[ -e "./$item" ] ||
			\ln -sf "$LLVM_DEFAULT_TARGET_TRIPLE/$item" "$item"
		done
	)

	fix_runtimes "$DESTDIR/$INSTALL_PREFIX/lib"

	# https://chromium.googlesource.com/experimental/gn/+/2bc30b1d7e0d91dec74b2d1c5522fea8f90ffb05/third_party/instrumented_libraries/scripts/fix_rpaths.sh
	#! /bin/sh
	# Copyright 2013 The Chromium Authors. All rights reserved.
	# Use of this source code is governed by a BSD-style license that can be found in the LICENSE file.

	# Changes all RPATHs in a given directory from XORIGIN to $ORIGIN
	# See the comment about XORIGIN in instrumented_libraries.gyp

	# Fixes rpath from XORIGIN to $ORIGIN in a single file $1.
	# function fix_rpath (
	fix_rpath() (
		local target="$1"
		[ -w "$target" ] || {
			# FIXME(earthdok): libcups2 DSOs are created non-writable, causing this
			# script to fail. As a temporary measure, ignore non-writable files.
			# echo "fix_rpaths: skipping non-writable file $target"
			// log '$target' "'$target' is a non-writable file, ignored"
			return 0
		}

		# Only attempt to fix RPATH if the entry actually exists.
		# FIXME(earthdok): find out why zlib1g on Precise doesn't get RPATH set.
		chrpath -l "$target" || {
			// log '$target' "'$target' does not contain RPATH/RUNPATH entries"
			return 0
		}
		// debug '$target' "'$target' fixing" &
		# chrpath -r $(chrpath $target | cut -d " " -f 2 | sed s/XORIGIN/\$ORIGIN/g \
		#   | sed s/RPATH=//g) $target
		# chrpath -r $(chrpath $target | cut -d " " -f 2 | sed 's/XORIGIN/\$ORIGIN/g' \
		#   | sed 's/RPATH=//g' | sed 's/RUNPATH=//g') $target
		# (
		# For test
		# ORIGIN="XORIGIN";
		local list="$(chrpath "$target" | cut -d " " -f 2 | cut -d "=" -f 2)"
		local new_list=
		local ifs="$IFS"
		local IFS=":"
		local item
		for item in $list; do
			// debug '$item' "$item" &
			# local found=1
			list_contains "$item" $new_list || new_list="${new_list:+"${new_list}:"}$item"
			# local i
			# for i in $new_list; do [ "$i" != "$item" ] && echo "\$i = $i; \$item = $item" || { found=0; echo "\$found = $found"; break; } done
			# [ "$found" -eq "0" ] && echo "found \$item = $item" || new_list="${new_list:+"${new_list}:"}$item"
		done
		new_list="$(printf '%s' "$new_list" | sed 's/XORIGIN/\$ORIGIN/g')"
		// debug '$new_list' "$(esceval "$new_list")" &
		# case "${KISS_DEBUG-}" in *"$FUNCNAME"*)
		# 	local element
		# 	for element in $new_list; do
		# 		# echo $(printf '%s' "$element" | sed 's/XORIGIN/\$ORIGIN/g');
		# 		printf '\t%s' "$element"
		# 	done
		# 	printf '\n'
		# esac
		# )

		local IFS="$ifs"
		# chrpath -r $(chrpath $target | cut -d " " -f 2 | cut -d "=" -f 2 | sed 's/XORIGIN/\$ORIGIN/g') "$target"
		chrpath -r $new_list "$target"

	)

	# for i in $(find $target | grep -P "\.so(.\d+)*$"); do
	for i in $(find "$DESTDIR/$INSTALL_PREFIX/lib" -mindepth 1 | grep "\.a*$"); do
		! is_file "$i" ||
		! (file "$i" | grep -q ELF) ||
		[ ! -w "$i" ]  ||
		patchelf --set-rpath '$ORIGIN/../lib:$ORIGIN/../lib/x86_64-linux-musl:$ORIGIN/../lib/clang/18.0.0/lib/x86_64-linux-musl:$ORIGIN/../lib/clang/18.0.0/lib/linux:$ORIGIN/../lib/llvm/18.0.0' "$i" ||
		fix_rpath "$i" ||
		// die '$i' "'$i' patch failed"
	done
	for i in $(find "$DESTDIR/$INSTALL_PREFIX/lib" -mindepth 1 | grep "\.so*$"); do
		# fix_rpath "$i"
		! is_file "$i" ||
		! (file "$i" | grep -q ELF) ||
		[ ! -w "$i" ]  ||
		patchelf --set-rpath '$ORIGIN/../lib:$ORIGIN/../lib/x86_64-linux-musl:$ORIGIN/../lib/clang/18.0.0/lib/x86_64-linux-musl:$ORIGIN/../lib/clang/18.0.0/lib/linux:$ORIGIN/../lib/llvm/18.0.0' "$i" ||
		fix_rpath "$i" ||
		// die '$i' "'$i' patch failed"
	done
	for i in $(find "$DESTDIR/$INSTALL_PREFIX/bin" -mindepth 1); do
		is_file "$i" &&
		file "$i" | grep -q ELF || {
			// debug '$i' "'$i' is not an ELF executable" &
			continue
		}
		# ! is_file "$i" ||
		[ ! -w "$i" ]  ||
		patchelf --set-rpath '$ORIGIN/../lib:$ORIGIN/../lib/x86_64-linux-musl:$ORIGIN/../lib/clang/18.0.0/lib/x86_64-linux-musl:$ORIGIN/../lib/clang/18.0.0/lib/linux:$ORIGIN/../lib/llvm/18.0.0' "$i" ||
		fix_rpath "$i" ||
		// die '$i' "'$i' patch failed"
	done

	# [ -d "$TOOLCHAIN_PREFIX/lib/llvm" ] || \mkdir -p "$TOOLCHAIN_PREFIX/lib/llvm"
	# /usr/lib/llvm/17.0.0/lib/clang/17
	// ver_naming "$TOOLCHAIN_PREFIX/lib/llvm/$version_target/lib/clang" "$version_target" "$version_target_major"

	# Use new llvm-config to generate a pkg-config file.

	path_prepend PATH "$TOOLCHAIN_PREFIX/bin"

	# [ ! -z "${PATH:+x}" ] &&
	# [ -z "${PATH##"$TOOLCHAIN_PREFIX/bin:"*}" ] ||
	#   PATH="$TOOLCHAIN_PREFIX/bin${PATH:+":$PATH"}"
	# export PATH

	// as_own "$DESTDIR" \
	\mkdir -p "$TOOLCHAIN_PREFIX/lib/pkgconfig"

	# shellcheck disable=2016
	sed -e "s|$DESTDIR||" -e 's|/usr/include|\${includedir}|' \
		> "$TOOLCHAIN_PREFIX/lib/pkgconfig/llvm.pc" << EOF
prefix=/usr
exec_prefix=\${prefix}
libdir=\${exec_prefix}/lib
includedir=\${prefix}/include
has_rtti=$( \
	LD_LIBRARY_PATH=$TOOLCHAIN_PREFIX/lib/$KISS_XHOST_TRIPLE:$TOOLCHAIN_PREFIX/lib \
	$TOOLCHAIN_PREFIX/bin/llvm-config --has-rtti)

Name: LLVM
Description: LLVM compiler infrastructure
URL: https://llvm.org
Version: $( \
	LD_LIBRARY_PATH=$TOOLCHAIN_PREFIX/lib/$KISS_XHOST_TRIPLE:$TOOLCHAIN_PREFIX/lib \
	$TOOLCHAIN_PREFIX/bin/llvm-config --version | tr -d '[:alpha:]' 2> /dev/null)
Requires:
Requires.private: zlib
Libs: -L\${libdir} $( \
	LD_LIBRARY_PATH=$TOOLCHAIN_PREFIX/lib/$KISS_XHOST_TRIPLE:$TOOLCHAIN_PREFIX/lib \
	$TOOLCHAIN_PREFIX/bin/llvm-config --libs)
Libs.private: -lc++ $( \
	LD_LIBRARY_PATH=$TOOLCHAIN_PREFIX/lib/$KISS_XHOST_TRIPLE:$TOOLCHAIN_PREFIX/lib \
	$TOOLCHAIN_PREFIX/bin/llvm-config --link-static)
Cflags: $( \
	LD_LIBRARY_PATH=$TOOLCHAIN_PREFIX/lib/$KISS_XHOST_TRIPLE:$TOOLCHAIN_PREFIX/lib \
	$TOOLCHAIN_PREFIX/bin/llvm-config --cflags)
EOF

	# No longer working
	# Libs.private: -lc++ $($TOOLCHAIN_PREFIX/bin/llvm-config --libs --link-static)

	// trap_off

	(
	end=`date +%s`
	build_time=$(expr $end - $start)
	// log "$repo_name" "building takes $build_time seconds"
	) &

	# This entire quotes is set for avoid the script already loaded into memeory
	# from being currupted by continually editing
	return 0

}









